/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Media File
        /// </summary>
        /// <remarks>
        /// Gather data about the media objects in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream V1AccountAccountIDMediaMediaIDFileGet(string accountID, string mediaID, int operationIndex = 0);

        /// <summary>
        /// Get Media File
        /// </summary>
        /// <remarks>
        /// Gather data about the media objects in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> V1AccountAccountIDMediaMediaIDFileGetWithHttpInfo(string accountID, string mediaID, int operationIndex = 0);
        /// <summary>
        /// Add Media File
        /// </summary>
        /// <remarks>
        /// Include a media file that is connected to a media object in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="file">Media file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetSingle</returns>
        ServiceDocsMediaGetSingle V1AccountAccountIDMediaMediaIDFilePost(string accountID, string mediaID, System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Add Media File
        /// </summary>
        /// <remarks>
        /// Include a media file that is connected to a media object in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="file">Media file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetSingle</returns>
        ApiResponse<ServiceDocsMediaGetSingle> V1AccountAccountIDMediaMediaIDFilePostWithHttpInfo(string accountID, string mediaID, System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Get Media List
        /// </summary>
        /// <remarks>
        /// View all media files for an account in your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetAll</returns>
        ServiceDocsMediaGetAll V1AccountAccountidMediaGet(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// Get Media List
        /// </summary>
        /// <remarks>
        /// View all media files for an account in your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetAll</returns>
        ApiResponse<ServiceDocsMediaGetAll> V1AccountAccountidMediaGetWithHttpInfo(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0);
        /// <summary>
        /// Delete Media
        /// </summary>
        /// <remarks>
        /// Remove a media file that is no longer in use from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetSingle</returns>
        ServiceDocsMediaGetSingle V1AccountAccountidMediaMediaidDelete(string accountid, string mediaid, int operationIndex = 0);

        /// <summary>
        /// Delete Media
        /// </summary>
        /// <remarks>
        /// Remove a media file that is no longer in use from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetSingle</returns>
        ApiResponse<ServiceDocsMediaGetSingle> V1AccountAccountidMediaMediaidDeleteWithHttpInfo(string accountid, string mediaid, int operationIndex = 0);
        /// <summary>
        /// Get Media Details
        /// </summary>
        /// <remarks>
        /// Permit users to view an account&#39;s specific media information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetSingle</returns>
        ServiceDocsMediaGetSingle V1AccountAccountidMediaMediaidGet(string accountid, string mediaid, int operationIndex = 0);

        /// <summary>
        /// Get Media Details
        /// </summary>
        /// <remarks>
        /// Permit users to view an account&#39;s specific media information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetSingle</returns>
        ApiResponse<ServiceDocsMediaGetSingle> V1AccountAccountidMediaMediaidGetWithHttpInfo(string accountid, string mediaid, int operationIndex = 0);
        /// <summary>
        /// Create Media
        /// </summary>
        /// <remarks>
        /// Generate a media object to allow users to upload a media file in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="media">Media creation or update payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetSingle</returns>
        ServiceDocsMediaGetSingle V1AccountAccountidMediaPost(string accountid, ServiceVOIPMediaAddEditData media, int operationIndex = 0);

        /// <summary>
        /// Create Media
        /// </summary>
        /// <remarks>
        /// Generate a media object to allow users to upload a media file in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="media">Media creation or update payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetSingle</returns>
        ApiResponse<ServiceDocsMediaGetSingle> V1AccountAccountidMediaPostWithHttpInfo(string accountid, ServiceVOIPMediaAddEditData media, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Media File
        /// </summary>
        /// <remarks>
        /// Gather data about the media objects in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> V1AccountAccountIDMediaMediaIDFileGetAsync(string accountID, string mediaID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Media File
        /// </summary>
        /// <remarks>
        /// Gather data about the media objects in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> V1AccountAccountIDMediaMediaIDFileGetWithHttpInfoAsync(string accountID, string mediaID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Add Media File
        /// </summary>
        /// <remarks>
        /// Include a media file that is connected to a media object in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="file">Media file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsMediaGetSingle> V1AccountAccountIDMediaMediaIDFilePostAsync(string accountID, string mediaID, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Media File
        /// </summary>
        /// <remarks>
        /// Include a media file that is connected to a media object in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="file">Media file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsMediaGetSingle>> V1AccountAccountIDMediaMediaIDFilePostWithHttpInfoAsync(string accountID, string mediaID, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Media List
        /// </summary>
        /// <remarks>
        /// View all media files for an account in your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsMediaGetAll> V1AccountAccountidMediaGetAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Media List
        /// </summary>
        /// <remarks>
        /// View all media files for an account in your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsMediaGetAll>> V1AccountAccountidMediaGetWithHttpInfoAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Media
        /// </summary>
        /// <remarks>
        /// Remove a media file that is no longer in use from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsMediaGetSingle> V1AccountAccountidMediaMediaidDeleteAsync(string accountid, string mediaid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Media
        /// </summary>
        /// <remarks>
        /// Remove a media file that is no longer in use from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsMediaGetSingle>> V1AccountAccountidMediaMediaidDeleteWithHttpInfoAsync(string accountid, string mediaid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Media Details
        /// </summary>
        /// <remarks>
        /// Permit users to view an account&#39;s specific media information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsMediaGetSingle> V1AccountAccountidMediaMediaidGetAsync(string accountid, string mediaid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Media Details
        /// </summary>
        /// <remarks>
        /// Permit users to view an account&#39;s specific media information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsMediaGetSingle>> V1AccountAccountidMediaMediaidGetWithHttpInfoAsync(string accountid, string mediaid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Media
        /// </summary>
        /// <remarks>
        /// Generate a media object to allow users to upload a media file in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="media">Media creation or update payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsMediaGetSingle> V1AccountAccountidMediaPostAsync(string accountid, ServiceVOIPMediaAddEditData media, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Media
        /// </summary>
        /// <remarks>
        /// Generate a media object to allow users to upload a media file in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="media">Media creation or update payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsMediaGetSingle>> V1AccountAccountidMediaPostWithHttpInfoAsync(string accountid, ServiceVOIPMediaAddEditData media, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaApi : IMediaApiSync, IMediaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaApi : IMediaApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MediaApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Media File Gather data about the media objects in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream V1AccountAccountIDMediaMediaIDFileGet(string accountID, string mediaID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = V1AccountAccountIDMediaMediaIDFileGetWithHttpInfo(accountID, mediaID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Media File Gather data about the media objects in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> V1AccountAccountIDMediaMediaIDFileGetWithHttpInfo(string accountID, string mediaID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling MediaApi->V1AccountAccountIDMediaMediaIDFileGet");
            }

            // verify the required parameter 'mediaID' is set
            if (mediaID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mediaID' when calling MediaApi->V1AccountAccountIDMediaMediaIDFileGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "audio/mp3",
                "audio/mpeg",
                "audio/mpeg3",
                "audio/x-wav",
                "audio/wav",
                "audio/ogg",
                "video/x-flv",
                "video/h264",
                "video/mpeg",
                "video/quicktime",
                "video/mp4",
                "video/webm"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("mediaID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mediaID)); // path parameter

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountIDMediaMediaIDFileGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v1/account/{accountID}/media/{mediaID}/file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDMediaMediaIDFileGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Media File Gather data about the media objects in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> V1AccountAccountIDMediaMediaIDFileGetAsync(string accountID, string mediaID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await V1AccountAccountIDMediaMediaIDFileGetWithHttpInfoAsync(accountID, mediaID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Media File Gather data about the media objects in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> V1AccountAccountIDMediaMediaIDFileGetWithHttpInfoAsync(string accountID, string mediaID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling MediaApi->V1AccountAccountIDMediaMediaIDFileGet");
            }

            // verify the required parameter 'mediaID' is set
            if (mediaID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mediaID' when calling MediaApi->V1AccountAccountIDMediaMediaIDFileGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "audio/mp3",
                "audio/mpeg",
                "audio/mpeg3",
                "audio/x-wav",
                "audio/wav",
                "audio/ogg",
                "video/x-flv",
                "video/h264",
                "video/mpeg",
                "video/quicktime",
                "video/mp4",
                "video/webm"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("mediaID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mediaID)); // path parameter

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountIDMediaMediaIDFileGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v1/account/{accountID}/media/{mediaID}/file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDMediaMediaIDFileGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Media File Include a media file that is connected to a media object in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="file">Media file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetSingle</returns>
        public ServiceDocsMediaGetSingle V1AccountAccountIDMediaMediaIDFilePost(string accountID, string mediaID, System.IO.Stream file, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> localVarResponse = V1AccountAccountIDMediaMediaIDFilePostWithHttpInfo(accountID, mediaID, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Media File Include a media file that is connected to a media object in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="file">Media file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> V1AccountAccountIDMediaMediaIDFilePostWithHttpInfo(string accountID, string mediaID, System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling MediaApi->V1AccountAccountIDMediaMediaIDFilePost");
            }

            // verify the required parameter 'mediaID' is set
            if (mediaID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mediaID' when calling MediaApi->V1AccountAccountIDMediaMediaIDFilePost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'file' when calling MediaApi->V1AccountAccountIDMediaMediaIDFilePost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("mediaID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mediaID)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountIDMediaMediaIDFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsMediaGetSingle>("/v1/account/{accountID}/media/{mediaID}/file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDMediaMediaIDFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Media File Include a media file that is connected to a media object in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="file">Media file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsMediaGetSingle> V1AccountAccountIDMediaMediaIDFilePostAsync(string accountID, string mediaID, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> localVarResponse = await V1AccountAccountIDMediaMediaIDFilePostWithHttpInfoAsync(accountID, mediaID, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Media File Include a media file that is connected to a media object in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="mediaID">Media ID, 32 alpha numeric</param>
        /// <param name="file">Media file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle>> V1AccountAccountIDMediaMediaIDFilePostWithHttpInfoAsync(string accountID, string mediaID, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling MediaApi->V1AccountAccountIDMediaMediaIDFilePost");
            }

            // verify the required parameter 'mediaID' is set
            if (mediaID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mediaID' when calling MediaApi->V1AccountAccountIDMediaMediaIDFilePost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'file' when calling MediaApi->V1AccountAccountIDMediaMediaIDFilePost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("mediaID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mediaID)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountIDMediaMediaIDFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsMediaGetSingle>("/v1/account/{accountID}/media/{mediaID}/file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDMediaMediaIDFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Media List View all media files for an account in your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetAll</returns>
        public ServiceDocsMediaGetAll V1AccountAccountidMediaGet(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetAll> localVarResponse = V1AccountAccountidMediaGetWithHttpInfo(accountid, startKey, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Media List View all media files for an account in your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetAll> V1AccountAccountidMediaGetWithHttpInfo(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling MediaApi->V1AccountAccountidMediaGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountidMediaGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsMediaGetAll>("/v1/account/{accountid}/media", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidMediaGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Media List View all media files for an account in your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsMediaGetAll> V1AccountAccountidMediaGetAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetAll> localVarResponse = await V1AccountAccountidMediaGetWithHttpInfoAsync(accountid, startKey, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Media List View all media files for an account in your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetAll>> V1AccountAccountidMediaGetWithHttpInfoAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling MediaApi->V1AccountAccountidMediaGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountidMediaGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsMediaGetAll>("/v1/account/{accountid}/media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidMediaGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Media Remove a media file that is no longer in use from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetSingle</returns>
        public ServiceDocsMediaGetSingle V1AccountAccountidMediaMediaidDelete(string accountid, string mediaid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> localVarResponse = V1AccountAccountidMediaMediaidDeleteWithHttpInfo(accountid, mediaid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Media Remove a media file that is no longer in use from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> V1AccountAccountidMediaMediaidDeleteWithHttpInfo(string accountid, string mediaid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling MediaApi->V1AccountAccountidMediaMediaidDelete");
            }

            // verify the required parameter 'mediaid' is set
            if (mediaid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mediaid' when calling MediaApi->V1AccountAccountidMediaMediaidDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mediaid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mediaid)); // path parameter

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountidMediaMediaidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsMediaGetSingle>("/v1/account/{accountid}/media/{mediaid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidMediaMediaidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Media Remove a media file that is no longer in use from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsMediaGetSingle> V1AccountAccountidMediaMediaidDeleteAsync(string accountid, string mediaid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> localVarResponse = await V1AccountAccountidMediaMediaidDeleteWithHttpInfoAsync(accountid, mediaid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Media Remove a media file that is no longer in use from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle>> V1AccountAccountidMediaMediaidDeleteWithHttpInfoAsync(string accountid, string mediaid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling MediaApi->V1AccountAccountidMediaMediaidDelete");
            }

            // verify the required parameter 'mediaid' is set
            if (mediaid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mediaid' when calling MediaApi->V1AccountAccountidMediaMediaidDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mediaid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mediaid)); // path parameter

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountidMediaMediaidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsMediaGetSingle>("/v1/account/{accountid}/media/{mediaid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidMediaMediaidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Media Details Permit users to view an account&#39;s specific media information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetSingle</returns>
        public ServiceDocsMediaGetSingle V1AccountAccountidMediaMediaidGet(string accountid, string mediaid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> localVarResponse = V1AccountAccountidMediaMediaidGetWithHttpInfo(accountid, mediaid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Media Details Permit users to view an account&#39;s specific media information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> V1AccountAccountidMediaMediaidGetWithHttpInfo(string accountid, string mediaid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling MediaApi->V1AccountAccountidMediaMediaidGet");
            }

            // verify the required parameter 'mediaid' is set
            if (mediaid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mediaid' when calling MediaApi->V1AccountAccountidMediaMediaidGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mediaid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mediaid)); // path parameter

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountidMediaMediaidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsMediaGetSingle>("/v1/account/{accountid}/media/{mediaid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidMediaMediaidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Media Details Permit users to view an account&#39;s specific media information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsMediaGetSingle> V1AccountAccountidMediaMediaidGetAsync(string accountid, string mediaid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> localVarResponse = await V1AccountAccountidMediaMediaidGetWithHttpInfoAsync(accountid, mediaid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Media Details Permit users to view an account&#39;s specific media information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="mediaid">Media ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle>> V1AccountAccountidMediaMediaidGetWithHttpInfoAsync(string accountid, string mediaid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling MediaApi->V1AccountAccountidMediaMediaidGet");
            }

            // verify the required parameter 'mediaid' is set
            if (mediaid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mediaid' when calling MediaApi->V1AccountAccountidMediaMediaidGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mediaid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mediaid)); // path parameter

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountidMediaMediaidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsMediaGetSingle>("/v1/account/{accountid}/media/{mediaid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidMediaMediaidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Media Generate a media object to allow users to upload a media file in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="media">Media creation or update payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsMediaGetSingle</returns>
        public ServiceDocsMediaGetSingle V1AccountAccountidMediaPost(string accountid, ServiceVOIPMediaAddEditData media, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> localVarResponse = V1AccountAccountidMediaPostWithHttpInfo(accountid, media);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Media Generate a media object to allow users to upload a media file in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="media">Media creation or update payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsMediaGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> V1AccountAccountidMediaPostWithHttpInfo(string accountid, ServiceVOIPMediaAddEditData media, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling MediaApi->V1AccountAccountidMediaPost");
            }

            // verify the required parameter 'media' is set
            if (media == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'media' when calling MediaApi->V1AccountAccountidMediaPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = media;

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountidMediaPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsMediaGetSingle>("/v1/account/{accountid}/media", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidMediaPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Media Generate a media object to allow users to upload a media file in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="media">Media creation or update payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsMediaGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsMediaGetSingle> V1AccountAccountidMediaPostAsync(string accountid, ServiceVOIPMediaAddEditData media, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle> localVarResponse = await V1AccountAccountidMediaPostWithHttpInfoAsync(accountid, media, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Media Generate a media object to allow users to upload a media file in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="media">Media creation or update payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsMediaGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsMediaGetSingle>> V1AccountAccountidMediaPostWithHttpInfoAsync(string accountid, ServiceVOIPMediaAddEditData media, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling MediaApi->V1AccountAccountidMediaPost");
            }

            // verify the required parameter 'media' is set
            if (media == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'media' when calling MediaApi->V1AccountAccountidMediaPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = media;

            localVarRequestOptions.Operation = "MediaApi.V1AccountAccountidMediaPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsMediaGetSingle>("/v1/account/{accountid}/media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidMediaPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
