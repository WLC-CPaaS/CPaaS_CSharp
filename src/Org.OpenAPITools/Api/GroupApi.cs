/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Group List
        /// </summary>
        /// <remarks>
        /// Get a list of groups associated with an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetAll</returns>
        ServiceDocGroupGetAll V1AccountAccountIDGroupGet(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// Get Group List
        /// </summary>
        /// <remarks>
        /// Get a list of groups associated with an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetAll</returns>
        ApiResponse<ServiceDocGroupGetAll> V1AccountAccountIDGroupGetWithHttpInfo(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0);
        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete a call group in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetSingle</returns>
        ServiceDocGroupGetSingle V1AccountAccountIDGroupGroupIDDelete(string accountID, string groupID, int operationIndex = 0);

        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete a call group in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetSingle</returns>
        ApiResponse<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDDeleteWithHttpInfo(string accountID, string groupID, int operationIndex = 0);
        /// <summary>
        /// Get Group Details
        /// </summary>
        /// <remarks>
        /// Access details about a single group within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetSingle</returns>
        ServiceDocGroupGetSingle V1AccountAccountIDGroupGroupIDGet(string accountID, string groupID, int operationIndex = 0);

        /// <summary>
        /// Get Group Details
        /// </summary>
        /// <remarks>
        /// Access details about a single group within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetSingle</returns>
        ApiResponse<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDGetWithHttpInfo(string accountID, string groupID, int operationIndex = 0);
        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Modify the name, settings and other information for a group within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetSingle</returns>
        ServiceDocGroupGetSingle V1AccountAccountIDGroupGroupIDPut(string accountID, string groupID, ServiceVOIPGroupAddEdit2 reqBody, int operationIndex = 0);

        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Modify the name, settings and other information for a group within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetSingle</returns>
        ApiResponse<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDPutWithHttpInfo(string accountID, string groupID, ServiceVOIPGroupAddEdit2 reqBody, int operationIndex = 0);
        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Provide an additional resource by adding a group list to an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="group">group fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetSingle</returns>
        ServiceDocGroupGetSingle V1AccountAccountIDGroupPost(string accountID, ServiceVOIPGroupAddEdit2 group, int operationIndex = 0);

        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Provide an additional resource by adding a group list to an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="group">group fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetSingle</returns>
        ApiResponse<ServiceDocGroupGetSingle> V1AccountAccountIDGroupPostWithHttpInfo(string accountID, ServiceVOIPGroupAddEdit2 group, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Group List
        /// </summary>
        /// <remarks>
        /// Get a list of groups associated with an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocGroupGetAll> V1AccountAccountIDGroupGetAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Group List
        /// </summary>
        /// <remarks>
        /// Get a list of groups associated with an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocGroupGetAll>> V1AccountAccountIDGroupGetWithHttpInfoAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete a call group in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDDeleteAsync(string accountID, string groupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete a call group in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocGroupGetSingle>> V1AccountAccountIDGroupGroupIDDeleteWithHttpInfoAsync(string accountID, string groupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Group Details
        /// </summary>
        /// <remarks>
        /// Access details about a single group within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDGetAsync(string accountID, string groupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Group Details
        /// </summary>
        /// <remarks>
        /// Access details about a single group within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocGroupGetSingle>> V1AccountAccountIDGroupGroupIDGetWithHttpInfoAsync(string accountID, string groupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Modify the name, settings and other information for a group within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDPutAsync(string accountID, string groupID, ServiceVOIPGroupAddEdit2 reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Modify the name, settings and other information for a group within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocGroupGetSingle>> V1AccountAccountIDGroupGroupIDPutWithHttpInfoAsync(string accountID, string groupID, ServiceVOIPGroupAddEdit2 reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Provide an additional resource by adding a group list to an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="group">group fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocGroupGetSingle> V1AccountAccountIDGroupPostAsync(string accountID, ServiceVOIPGroupAddEdit2 group, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Provide an additional resource by adding a group list to an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="group">group fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocGroupGetSingle>> V1AccountAccountIDGroupPostWithHttpInfoAsync(string accountID, ServiceVOIPGroupAddEdit2 group, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApi : IGroupApiSync, IGroupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupApi : IGroupApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Group List Get a list of groups associated with an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetAll</returns>
        public ServiceDocGroupGetAll V1AccountAccountIDGroupGet(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetAll> localVarResponse = V1AccountAccountIDGroupGetWithHttpInfo(accountID, startKey, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group List Get a list of groups associated with an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetAll> V1AccountAccountIDGroupGetWithHttpInfo(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocGroupGetAll>("/v1/account/{accountID}/group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group List Get a list of groups associated with an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocGroupGetAll> V1AccountAccountIDGroupGetAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetAll> localVarResponse = await V1AccountAccountIDGroupGetWithHttpInfoAsync(accountID, startKey, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group List Get a list of groups associated with an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetAll>> V1AccountAccountIDGroupGetWithHttpInfoAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocGroupGetAll>("/v1/account/{accountID}/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Delete a call group in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetSingle</returns>
        public ServiceDocGroupGetSingle V1AccountAccountIDGroupGroupIDDelete(string accountID, string groupID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> localVarResponse = V1AccountAccountIDGroupGroupIDDeleteWithHttpInfo(accountID, groupID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Delete a call group in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDDeleteWithHttpInfo(string accountID, string groupID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupGroupIDDelete");
            }

            // verify the required parameter 'groupID' is set
            if (groupID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupID' when calling GroupApi->V1AccountAccountIDGroupGroupIDDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupID)); // path parameter

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupGroupIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocGroupGetSingle>("/v1/account/{accountID}/group/{groupID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupGroupIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Delete a call group in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDDeleteAsync(string accountID, string groupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> localVarResponse = await V1AccountAccountIDGroupGroupIDDeleteWithHttpInfoAsync(accountID, groupID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Delete a call group in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle>> V1AccountAccountIDGroupGroupIDDeleteWithHttpInfoAsync(string accountID, string groupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupGroupIDDelete");
            }

            // verify the required parameter 'groupID' is set
            if (groupID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupID' when calling GroupApi->V1AccountAccountIDGroupGroupIDDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupID)); // path parameter

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupGroupIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocGroupGetSingle>("/v1/account/{accountID}/group/{groupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupGroupIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Details Access details about a single group within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetSingle</returns>
        public ServiceDocGroupGetSingle V1AccountAccountIDGroupGroupIDGet(string accountID, string groupID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> localVarResponse = V1AccountAccountIDGroupGroupIDGetWithHttpInfo(accountID, groupID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Details Access details about a single group within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDGetWithHttpInfo(string accountID, string groupID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupGroupIDGet");
            }

            // verify the required parameter 'groupID' is set
            if (groupID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupID' when calling GroupApi->V1AccountAccountIDGroupGroupIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupID)); // path parameter

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupGroupIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocGroupGetSingle>("/v1/account/{accountID}/group/{groupID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupGroupIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Details Access details about a single group within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDGetAsync(string accountID, string groupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> localVarResponse = await V1AccountAccountIDGroupGroupIDGetWithHttpInfoAsync(accountID, groupID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Details Access details about a single group within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle>> V1AccountAccountIDGroupGroupIDGetWithHttpInfoAsync(string accountID, string groupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupGroupIDGet");
            }

            // verify the required parameter 'groupID' is set
            if (groupID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupID' when calling GroupApi->V1AccountAccountIDGroupGroupIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupID)); // path parameter

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupGroupIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocGroupGetSingle>("/v1/account/{accountID}/group/{groupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupGroupIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Modify the name, settings and other information for a group within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetSingle</returns>
        public ServiceDocGroupGetSingle V1AccountAccountIDGroupGroupIDPut(string accountID, string groupID, ServiceVOIPGroupAddEdit2 reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> localVarResponse = V1AccountAccountIDGroupGroupIDPutWithHttpInfo(accountID, groupID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Modify the name, settings and other information for a group within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDPutWithHttpInfo(string accountID, string groupID, ServiceVOIPGroupAddEdit2 reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupGroupIDPut");
            }

            // verify the required parameter 'groupID' is set
            if (groupID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupID' when calling GroupApi->V1AccountAccountIDGroupGroupIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling GroupApi->V1AccountAccountIDGroupGroupIDPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupGroupIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocGroupGetSingle>("/v1/account/{accountID}/group/{groupID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupGroupIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Modify the name, settings and other information for a group within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocGroupGetSingle> V1AccountAccountIDGroupGroupIDPutAsync(string accountID, string groupID, ServiceVOIPGroupAddEdit2 reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> localVarResponse = await V1AccountAccountIDGroupGroupIDPutWithHttpInfoAsync(accountID, groupID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Modify the name, settings and other information for a group within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="groupID">Group ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle>> V1AccountAccountIDGroupGroupIDPutWithHttpInfoAsync(string accountID, string groupID, ServiceVOIPGroupAddEdit2 reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupGroupIDPut");
            }

            // verify the required parameter 'groupID' is set
            if (groupID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupID' when calling GroupApi->V1AccountAccountIDGroupGroupIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling GroupApi->V1AccountAccountIDGroupGroupIDPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupGroupIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocGroupGetSingle>("/v1/account/{accountID}/group/{groupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupGroupIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Group Provide an additional resource by adding a group list to an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="group">group fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocGroupGetSingle</returns>
        public ServiceDocGroupGetSingle V1AccountAccountIDGroupPost(string accountID, ServiceVOIPGroupAddEdit2 group, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> localVarResponse = V1AccountAccountIDGroupPostWithHttpInfo(accountID, group);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Group Provide an additional resource by adding a group list to an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="group">group fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocGroupGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> V1AccountAccountIDGroupPostWithHttpInfo(string accountID, ServiceVOIPGroupAddEdit2 group, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupPost");
            }

            // verify the required parameter 'group' is set
            if (group == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'group' when calling GroupApi->V1AccountAccountIDGroupPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = group;

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocGroupGetSingle>("/v1/account/{accountID}/group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Group Provide an additional resource by adding a group list to an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="group">group fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocGroupGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocGroupGetSingle> V1AccountAccountIDGroupPostAsync(string accountID, ServiceVOIPGroupAddEdit2 group, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle> localVarResponse = await V1AccountAccountIDGroupPostWithHttpInfoAsync(accountID, group, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Group Provide an additional resource by adding a group list to an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="group">group fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocGroupGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocGroupGetSingle>> V1AccountAccountIDGroupPostWithHttpInfoAsync(string accountID, ServiceVOIPGroupAddEdit2 group, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling GroupApi->V1AccountAccountIDGroupPost");
            }

            // verify the required parameter 'group' is set
            if (group == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'group' when calling GroupApi->V1AccountAccountIDGroupPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = group;

            localVarRequestOptions.Operation = "GroupApi.V1AccountAccountIDGroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocGroupGetSingle>("/v1/account/{accountID}/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDGroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
