/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemporalRuleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Temporal Rule List
        /// </summary>
        /// <remarks>
        /// Access all temporal rules for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetAll</returns>
        ServiceDocsTemporalRuleGetAll V1AccountAccountIDTemporalruleGet(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// Get Temporal Rule List
        /// </summary>
        /// <remarks>
        /// Access all temporal rules for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetAll</returns>
        ApiResponse<ServiceDocsTemporalRuleGetAll> V1AccountAccountIDTemporalruleGetWithHttpInfo(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0);
        /// <summary>
        /// Create Temporal Rule
        /// </summary>
        /// <remarks>
        /// Create temporal rules for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alphanumeric</param>
        /// <param name="temporalrule">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetSingle</returns>
        ServiceDocsTemporalRuleGetSingle V1AccountAccountIDTemporalrulePost(string accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule, int operationIndex = 0);

        /// <summary>
        /// Create Temporal Rule
        /// </summary>
        /// <remarks>
        /// Create temporal rules for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alphanumeric</param>
        /// <param name="temporalrule">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetSingle</returns>
        ApiResponse<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalrulePostWithHttpInfo(string accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule, int operationIndex = 0);
        /// <summary>
        /// Delete Temporal Rule
        /// </summary>
        /// <remarks>
        /// Remove a temporal rule from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">temporal rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetSingle</returns>
        ServiceDocsTemporalRuleGetSingle V1AccountAccountIDTemporalruleTemporalRuleIDDelete(string accountID, string temporalRuleID, int operationIndex = 0);

        /// <summary>
        /// Delete Temporal Rule
        /// </summary>
        /// <remarks>
        /// Remove a temporal rule from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">temporal rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetSingle</returns>
        ApiResponse<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDDeleteWithHttpInfo(string accountID, string temporalRuleID, int operationIndex = 0);
        /// <summary>
        /// Get Temporal Rule Details
        /// </summary>
        /// <remarks>
        /// View details about individual time rules.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetSingle</returns>
        ServiceDocsTemporalRuleGetSingle V1AccountAccountIDTemporalruleTemporalRuleIDGet(string accountID, string temporalRuleID, int operationIndex = 0);

        /// <summary>
        /// Get Temporal Rule Details
        /// </summary>
        /// <remarks>
        /// View details about individual time rules.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetSingle</returns>
        ApiResponse<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDGetWithHttpInfo(string accountID, string temporalRuleID, int operationIndex = 0);
        /// <summary>
        /// Update Temporal Rule
        /// </summary>
        /// <remarks>
        /// Edit the existing temporal rules in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetSingle</returns>
        ServiceDocsTemporalRuleGetSingle V1AccountAccountIDTemporalruleTemporalRuleIDPut(string accountID, string temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody, int operationIndex = 0);

        /// <summary>
        /// Update Temporal Rule
        /// </summary>
        /// <remarks>
        /// Edit the existing temporal rules in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetSingle</returns>
        ApiResponse<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDPutWithHttpInfo(string accountID, string temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemporalRuleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Temporal Rule List
        /// </summary>
        /// <remarks>
        /// Access all temporal rules for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetAll> V1AccountAccountIDTemporalruleGetAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Temporal Rule List
        /// </summary>
        /// <remarks>
        /// Access all temporal rules for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsTemporalRuleGetAll>> V1AccountAccountIDTemporalruleGetWithHttpInfoAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Temporal Rule
        /// </summary>
        /// <remarks>
        /// Create temporal rules for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alphanumeric</param>
        /// <param name="temporalrule">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalrulePostAsync(string accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Temporal Rule
        /// </summary>
        /// <remarks>
        /// Create temporal rules for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alphanumeric</param>
        /// <param name="temporalrule">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsTemporalRuleGetSingle>> V1AccountAccountIDTemporalrulePostWithHttpInfoAsync(string accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Temporal Rule
        /// </summary>
        /// <remarks>
        /// Remove a temporal rule from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">temporal rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDDeleteAsync(string accountID, string temporalRuleID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Temporal Rule
        /// </summary>
        /// <remarks>
        /// Remove a temporal rule from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">temporal rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsTemporalRuleGetSingle>> V1AccountAccountIDTemporalruleTemporalRuleIDDeleteWithHttpInfoAsync(string accountID, string temporalRuleID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Temporal Rule Details
        /// </summary>
        /// <remarks>
        /// View details about individual time rules.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDGetAsync(string accountID, string temporalRuleID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Temporal Rule Details
        /// </summary>
        /// <remarks>
        /// View details about individual time rules.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsTemporalRuleGetSingle>> V1AccountAccountIDTemporalruleTemporalRuleIDGetWithHttpInfoAsync(string accountID, string temporalRuleID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Temporal Rule
        /// </summary>
        /// <remarks>
        /// Edit the existing temporal rules in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDPutAsync(string accountID, string temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Temporal Rule
        /// </summary>
        /// <remarks>
        /// Edit the existing temporal rules in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsTemporalRuleGetSingle>> V1AccountAccountIDTemporalruleTemporalRuleIDPutWithHttpInfoAsync(string accountID, string temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemporalRuleApi : ITemporalRuleApiSync, ITemporalRuleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemporalRuleApi : ITemporalRuleApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemporalRuleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemporalRuleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemporalRuleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemporalRuleApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemporalRuleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemporalRuleApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemporalRuleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemporalRuleApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Temporal Rule List Access all temporal rules for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetAll</returns>
        public ServiceDocsTemporalRuleGetAll V1AccountAccountIDTemporalruleGet(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetAll> localVarResponse = V1AccountAccountIDTemporalruleGetWithHttpInfo(accountID, startKey, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Temporal Rule List Access all temporal rules for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetAll> V1AccountAccountIDTemporalruleGetWithHttpInfo(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalruleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsTemporalRuleGetAll>("/v1/account/{accountID}/temporalrule", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalruleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Temporal Rule List Access all temporal rules for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetAll> V1AccountAccountIDTemporalruleGetAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetAll> localVarResponse = await V1AccountAccountIDTemporalruleGetWithHttpInfoAsync(accountID, startKey, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Temporal Rule List Access all temporal rules for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetAll>> V1AccountAccountIDTemporalruleGetWithHttpInfoAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalruleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsTemporalRuleGetAll>("/v1/account/{accountID}/temporalrule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalruleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Temporal Rule Create temporal rules for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alphanumeric</param>
        /// <param name="temporalrule">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetSingle</returns>
        public ServiceDocsTemporalRuleGetSingle V1AccountAccountIDTemporalrulePost(string accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> localVarResponse = V1AccountAccountIDTemporalrulePostWithHttpInfo(accountID, temporalrule);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Temporal Rule Create temporal rules for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alphanumeric</param>
        /// <param name="temporalrule">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalrulePostWithHttpInfo(string accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalrulePost");
            }

            // verify the required parameter 'temporalrule' is set
            if (temporalrule == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'temporalrule' when calling TemporalRuleApi->V1AccountAccountIDTemporalrulePost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = temporalrule;

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalrulePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsTemporalRuleGetSingle>("/v1/account/{accountID}/temporalrule", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalrulePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Temporal Rule Create temporal rules for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alphanumeric</param>
        /// <param name="temporalrule">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalrulePostAsync(string accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> localVarResponse = await V1AccountAccountIDTemporalrulePostWithHttpInfoAsync(accountID, temporalrule, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Temporal Rule Create temporal rules for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alphanumeric</param>
        /// <param name="temporalrule">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle>> V1AccountAccountIDTemporalrulePostWithHttpInfoAsync(string accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalrulePost");
            }

            // verify the required parameter 'temporalrule' is set
            if (temporalrule == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'temporalrule' when calling TemporalRuleApi->V1AccountAccountIDTemporalrulePost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = temporalrule;

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalrulePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsTemporalRuleGetSingle>("/v1/account/{accountID}/temporalrule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalrulePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Temporal Rule Remove a temporal rule from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">temporal rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetSingle</returns>
        public ServiceDocsTemporalRuleGetSingle V1AccountAccountIDTemporalruleTemporalRuleIDDelete(string accountID, string temporalRuleID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> localVarResponse = V1AccountAccountIDTemporalruleTemporalRuleIDDeleteWithHttpInfo(accountID, temporalRuleID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Temporal Rule Remove a temporal rule from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">temporal rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDDeleteWithHttpInfo(string accountID, string temporalRuleID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDDelete");
            }

            // verify the required parameter 'temporalRuleID' is set
            if (temporalRuleID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'temporalRuleID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("temporalRuleID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(temporalRuleID)); // path parameter

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalruleTemporalRuleIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsTemporalRuleGetSingle>("/v1/account/{accountID}/temporalrule/{temporalRuleID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalruleTemporalRuleIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Temporal Rule Remove a temporal rule from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">temporal rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDDeleteAsync(string accountID, string temporalRuleID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> localVarResponse = await V1AccountAccountIDTemporalruleTemporalRuleIDDeleteWithHttpInfoAsync(accountID, temporalRuleID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Temporal Rule Remove a temporal rule from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">temporal rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle>> V1AccountAccountIDTemporalruleTemporalRuleIDDeleteWithHttpInfoAsync(string accountID, string temporalRuleID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDDelete");
            }

            // verify the required parameter 'temporalRuleID' is set
            if (temporalRuleID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'temporalRuleID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("temporalRuleID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(temporalRuleID)); // path parameter

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalruleTemporalRuleIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsTemporalRuleGetSingle>("/v1/account/{accountID}/temporalrule/{temporalRuleID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalruleTemporalRuleIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Temporal Rule Details View details about individual time rules.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetSingle</returns>
        public ServiceDocsTemporalRuleGetSingle V1AccountAccountIDTemporalruleTemporalRuleIDGet(string accountID, string temporalRuleID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> localVarResponse = V1AccountAccountIDTemporalruleTemporalRuleIDGetWithHttpInfo(accountID, temporalRuleID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Temporal Rule Details View details about individual time rules.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDGetWithHttpInfo(string accountID, string temporalRuleID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDGet");
            }

            // verify the required parameter 'temporalRuleID' is set
            if (temporalRuleID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'temporalRuleID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("temporalRuleID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(temporalRuleID)); // path parameter

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalruleTemporalRuleIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsTemporalRuleGetSingle>("/v1/account/{accountID}/temporalrule/{temporalRuleID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalruleTemporalRuleIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Temporal Rule Details View details about individual time rules.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDGetAsync(string accountID, string temporalRuleID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> localVarResponse = await V1AccountAccountIDTemporalruleTemporalRuleIDGetWithHttpInfoAsync(accountID, temporalRuleID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Temporal Rule Details View details about individual time rules.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle>> V1AccountAccountIDTemporalruleTemporalRuleIDGetWithHttpInfoAsync(string accountID, string temporalRuleID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDGet");
            }

            // verify the required parameter 'temporalRuleID' is set
            if (temporalRuleID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'temporalRuleID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("temporalRuleID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(temporalRuleID)); // path parameter

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalruleTemporalRuleIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsTemporalRuleGetSingle>("/v1/account/{accountID}/temporalrule/{temporalRuleID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalruleTemporalRuleIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Temporal Rule Edit the existing temporal rules in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsTemporalRuleGetSingle</returns>
        public ServiceDocsTemporalRuleGetSingle V1AccountAccountIDTemporalruleTemporalRuleIDPut(string accountID, string temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> localVarResponse = V1AccountAccountIDTemporalruleTemporalRuleIDPutWithHttpInfo(accountID, temporalRuleID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Temporal Rule Edit the existing temporal rules in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsTemporalRuleGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDPutWithHttpInfo(string accountID, string temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDPut");
            }

            // verify the required parameter 'temporalRuleID' is set
            if (temporalRuleID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'temporalRuleID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("temporalRuleID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(temporalRuleID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalruleTemporalRuleIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsTemporalRuleGetSingle>("/v1/account/{accountID}/temporalrule/{temporalRuleID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalruleTemporalRuleIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Temporal Rule Edit the existing temporal rules in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsTemporalRuleGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsTemporalRuleGetSingle> V1AccountAccountIDTemporalruleTemporalRuleIDPutAsync(string accountID, string temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle> localVarResponse = await V1AccountAccountIDTemporalruleTemporalRuleIDPutWithHttpInfoAsync(accountID, temporalRuleID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Temporal Rule Edit the existing temporal rules in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="temporalRuleID">Temporal Rule ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsTemporalRuleGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsTemporalRuleGetSingle>> V1AccountAccountIDTemporalruleTemporalRuleIDPutWithHttpInfoAsync(string accountID, string temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDPut");
            }

            // verify the required parameter 'temporalRuleID' is set
            if (temporalRuleID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'temporalRuleID' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling TemporalRuleApi->V1AccountAccountIDTemporalruleTemporalRuleIDPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("temporalRuleID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(temporalRuleID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "TemporalRuleApi.V1AccountAccountIDTemporalruleTemporalRuleIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsTemporalRuleGetSingle>("/v1/account/{accountID}/temporalrule/{temporalRuleID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDTemporalruleTemporalRuleIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
