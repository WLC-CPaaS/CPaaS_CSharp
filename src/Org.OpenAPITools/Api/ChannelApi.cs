/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Channel Details
        /// </summary>
        /// <remarks>
        /// Access details about each channel in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsChannelGetSingle</returns>
        ServiceDocsChannelGetSingle V1AccountAccountIDChannelChannelIDGet(string accountID, string channelID, int operationIndex = 0);

        /// <summary>
        /// Get Channel Details
        /// </summary>
        /// <remarks>
        /// Access details about each channel in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsChannelGetSingle</returns>
        ApiResponse<ServiceDocsChannelGetSingle> V1AccountAccountIDChannelChannelIDGetWithHttpInfo(string accountID, string channelID, int operationIndex = 0);
        /// <summary>
        /// Associate Action to Channel
        /// </summary>
        /// <remarks>
        /// Link an action, such as transfer or hangup to a channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceAPIResponse</returns>
        ServiceAPIResponse V1AccountAccountIDChannelChannelIDPost(string accountID, string channelID, ServiceVOIPChannelRunActionData reqBody, int operationIndex = 0);

        /// <summary>
        /// Associate Action to Channel
        /// </summary>
        /// <remarks>
        /// Link an action, such as transfer or hangup to a channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceAPIResponse</returns>
        ApiResponse<ServiceAPIResponse> V1AccountAccountIDChannelChannelIDPostWithHttpInfo(string accountID, string channelID, ServiceVOIPChannelRunActionData reqBody, int operationIndex = 0);
        /// <summary>
        /// Associate Metaflow to Channel
        /// </summary>
        /// <remarks>
        /// Link a metaflow to an active channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceAPIResponse</returns>
        ServiceAPIResponse V1AccountAccountIDChannelChannelIDPut(string accountID, string channelID, ServiceVOIPChannelRunMetaflowData reqBody, int operationIndex = 0);

        /// <summary>
        /// Associate Metaflow to Channel
        /// </summary>
        /// <remarks>
        /// Link a metaflow to an active channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceAPIResponse</returns>
        ApiResponse<ServiceAPIResponse> V1AccountAccountIDChannelChannelIDPutWithHttpInfo(string accountID, string channelID, ServiceVOIPChannelRunMetaflowData reqBody, int operationIndex = 0);
        /// <summary>
        /// Get Account Channel List
        /// </summary>
        /// <remarks>
        /// Get a list of active channels for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsChannelGetAll</returns>
        ServiceDocsChannelGetAll V1AccountAccountIDChannelGet(string accountID, int operationIndex = 0);

        /// <summary>
        /// Get Account Channel List
        /// </summary>
        /// <remarks>
        /// Get a list of active channels for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsChannelGetAll</returns>
        ApiResponse<ServiceDocsChannelGetAll> V1AccountAccountIDChannelGetWithHttpInfo(string accountID, int operationIndex = 0);
        /// <summary>
        /// Get Device Channel List
        /// </summary>
        /// <remarks>
        /// Get the list of active channels for a device.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="deviceID">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsChannelGetAll</returns>
        ServiceDocsChannelGetAll V1AccountAccountIDDeviceDeviceIDChannelGet(string accountID, string deviceID, int operationIndex = 0);

        /// <summary>
        /// Get Device Channel List
        /// </summary>
        /// <remarks>
        /// Get the list of active channels for a device.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="deviceID">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsChannelGetAll</returns>
        ApiResponse<ServiceDocsChannelGetAll> V1AccountAccountIDDeviceDeviceIDChannelGetWithHttpInfo(string accountID, string deviceID, int operationIndex = 0);
        /// <summary>
        /// Get User Channel List
        /// </summary>
        /// <remarks>
        /// Get the list of active channels for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsChannelGetAll</returns>
        ServiceDocsChannelGetAll V1AccountAccountIDUserUserIDChannelGet(string accountID, string userID, int operationIndex = 0);

        /// <summary>
        /// Get User Channel List
        /// </summary>
        /// <remarks>
        /// Get the list of active channels for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsChannelGetAll</returns>
        ApiResponse<ServiceDocsChannelGetAll> V1AccountAccountIDUserUserIDChannelGetWithHttpInfo(string accountID, string userID, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Channel Details
        /// </summary>
        /// <remarks>
        /// Access details about each channel in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsChannelGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsChannelGetSingle> V1AccountAccountIDChannelChannelIDGetAsync(string accountID, string channelID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channel Details
        /// </summary>
        /// <remarks>
        /// Access details about each channel in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsChannelGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsChannelGetSingle>> V1AccountAccountIDChannelChannelIDGetWithHttpInfoAsync(string accountID, string channelID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Associate Action to Channel
        /// </summary>
        /// <remarks>
        /// Link an action, such as transfer or hangup to a channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceAPIResponse</returns>
        System.Threading.Tasks.Task<ServiceAPIResponse> V1AccountAccountIDChannelChannelIDPostAsync(string accountID, string channelID, ServiceVOIPChannelRunActionData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Associate Action to Channel
        /// </summary>
        /// <remarks>
        /// Link an action, such as transfer or hangup to a channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceAPIResponse>> V1AccountAccountIDChannelChannelIDPostWithHttpInfoAsync(string accountID, string channelID, ServiceVOIPChannelRunActionData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Associate Metaflow to Channel
        /// </summary>
        /// <remarks>
        /// Link a metaflow to an active channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceAPIResponse</returns>
        System.Threading.Tasks.Task<ServiceAPIResponse> V1AccountAccountIDChannelChannelIDPutAsync(string accountID, string channelID, ServiceVOIPChannelRunMetaflowData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Associate Metaflow to Channel
        /// </summary>
        /// <remarks>
        /// Link a metaflow to an active channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceAPIResponse>> V1AccountAccountIDChannelChannelIDPutWithHttpInfoAsync(string accountID, string channelID, ServiceVOIPChannelRunMetaflowData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Account Channel List
        /// </summary>
        /// <remarks>
        /// Get a list of active channels for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsChannelGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsChannelGetAll> V1AccountAccountIDChannelGetAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Channel List
        /// </summary>
        /// <remarks>
        /// Get a list of active channels for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsChannelGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsChannelGetAll>> V1AccountAccountIDChannelGetWithHttpInfoAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Device Channel List
        /// </summary>
        /// <remarks>
        /// Get the list of active channels for a device.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="deviceID">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsChannelGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsChannelGetAll> V1AccountAccountIDDeviceDeviceIDChannelGetAsync(string accountID, string deviceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Device Channel List
        /// </summary>
        /// <remarks>
        /// Get the list of active channels for a device.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="deviceID">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsChannelGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsChannelGetAll>> V1AccountAccountIDDeviceDeviceIDChannelGetWithHttpInfoAsync(string accountID, string deviceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get User Channel List
        /// </summary>
        /// <remarks>
        /// Get the list of active channels for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsChannelGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsChannelGetAll> V1AccountAccountIDUserUserIDChannelGetAsync(string accountID, string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Channel List
        /// </summary>
        /// <remarks>
        /// Get the list of active channels for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsChannelGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsChannelGetAll>> V1AccountAccountIDUserUserIDChannelGetWithHttpInfoAsync(string accountID, string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelApi : IChannelApiSync, IChannelApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelApi : IChannelApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChannelApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Channel Details Access details about each channel in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsChannelGetSingle</returns>
        public ServiceDocsChannelGetSingle V1AccountAccountIDChannelChannelIDGet(string accountID, string channelID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetSingle> localVarResponse = V1AccountAccountIDChannelChannelIDGetWithHttpInfo(accountID, channelID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Channel Details Access details about each channel in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsChannelGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetSingle> V1AccountAccountIDChannelChannelIDGetWithHttpInfo(string accountID, string channelID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDGet");
            }

            // verify the required parameter 'channelID' is set
            if (channelID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'channelID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("channelID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(channelID)); // path parameter

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDChannelChannelIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsChannelGetSingle>("/v1/account/{accountID}/channel/{channelID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDChannelChannelIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Channel Details Access details about each channel in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsChannelGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsChannelGetSingle> V1AccountAccountIDChannelChannelIDGetAsync(string accountID, string channelID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetSingle> localVarResponse = await V1AccountAccountIDChannelChannelIDGetWithHttpInfoAsync(accountID, channelID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Channel Details Access details about each channel in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsChannelGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetSingle>> V1AccountAccountIDChannelChannelIDGetWithHttpInfoAsync(string accountID, string channelID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDGet");
            }

            // verify the required parameter 'channelID' is set
            if (channelID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'channelID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("channelID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(channelID)); // path parameter

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDChannelChannelIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsChannelGetSingle>("/v1/account/{accountID}/channel/{channelID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDChannelChannelIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Action to Channel Link an action, such as transfer or hangup to a channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceAPIResponse</returns>
        public ServiceAPIResponse V1AccountAccountIDChannelChannelIDPost(string accountID, string channelID, ServiceVOIPChannelRunActionData reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse> localVarResponse = V1AccountAccountIDChannelChannelIDPostWithHttpInfo(accountID, channelID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Action to Channel Link an action, such as transfer or hangup to a channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceAPIResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse> V1AccountAccountIDChannelChannelIDPostWithHttpInfo(string accountID, string channelID, ServiceVOIPChannelRunActionData reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPost");
            }

            // verify the required parameter 'channelID' is set
            if (channelID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'channelID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPost");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("channelID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(channelID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDChannelChannelIDPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceAPIResponse>("/v1/account/{accountID}/channel/{channelID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDChannelChannelIDPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Action to Channel Link an action, such as transfer or hangup to a channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceAPIResponse</returns>
        public async System.Threading.Tasks.Task<ServiceAPIResponse> V1AccountAccountIDChannelChannelIDPostAsync(string accountID, string channelID, ServiceVOIPChannelRunActionData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse> localVarResponse = await V1AccountAccountIDChannelChannelIDPostWithHttpInfoAsync(accountID, channelID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Action to Channel Link an action, such as transfer or hangup to a channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceAPIResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse>> V1AccountAccountIDChannelChannelIDPostWithHttpInfoAsync(string accountID, string channelID, ServiceVOIPChannelRunActionData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPost");
            }

            // verify the required parameter 'channelID' is set
            if (channelID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'channelID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPost");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("channelID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(channelID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDChannelChannelIDPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceAPIResponse>("/v1/account/{accountID}/channel/{channelID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDChannelChannelIDPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Metaflow to Channel Link a metaflow to an active channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceAPIResponse</returns>
        public ServiceAPIResponse V1AccountAccountIDChannelChannelIDPut(string accountID, string channelID, ServiceVOIPChannelRunMetaflowData reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse> localVarResponse = V1AccountAccountIDChannelChannelIDPutWithHttpInfo(accountID, channelID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Metaflow to Channel Link a metaflow to an active channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceAPIResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse> V1AccountAccountIDChannelChannelIDPutWithHttpInfo(string accountID, string channelID, ServiceVOIPChannelRunMetaflowData reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPut");
            }

            // verify the required parameter 'channelID' is set
            if (channelID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'channelID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("channelID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(channelID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDChannelChannelIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceAPIResponse>("/v1/account/{accountID}/channel/{channelID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDChannelChannelIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Metaflow to Channel Link a metaflow to an active channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceAPIResponse</returns>
        public async System.Threading.Tasks.Task<ServiceAPIResponse> V1AccountAccountIDChannelChannelIDPutAsync(string accountID, string channelID, ServiceVOIPChannelRunMetaflowData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse> localVarResponse = await V1AccountAccountIDChannelChannelIDPutWithHttpInfoAsync(accountID, channelID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Metaflow to Channel Link a metaflow to an active channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="channelID">Channel ID</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceAPIResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse>> V1AccountAccountIDChannelChannelIDPutWithHttpInfoAsync(string accountID, string channelID, ServiceVOIPChannelRunMetaflowData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPut");
            }

            // verify the required parameter 'channelID' is set
            if (channelID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'channelID' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling ChannelApi->V1AccountAccountIDChannelChannelIDPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("channelID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(channelID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDChannelChannelIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceAPIResponse>("/v1/account/{accountID}/channel/{channelID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDChannelChannelIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Channel List Get a list of active channels for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsChannelGetAll</returns>
        public ServiceDocsChannelGetAll V1AccountAccountIDChannelGet(string accountID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll> localVarResponse = V1AccountAccountIDChannelGetWithHttpInfo(accountID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Channel List Get a list of active channels for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsChannelGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll> V1AccountAccountIDChannelGetWithHttpInfo(string accountID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDChannelGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDChannelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsChannelGetAll>("/v1/account/{accountID}/channel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDChannelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Channel List Get a list of active channels for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsChannelGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsChannelGetAll> V1AccountAccountIDChannelGetAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll> localVarResponse = await V1AccountAccountIDChannelGetWithHttpInfoAsync(accountID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Channel List Get a list of active channels for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsChannelGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll>> V1AccountAccountIDChannelGetWithHttpInfoAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDChannelGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDChannelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsChannelGetAll>("/v1/account/{accountID}/channel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDChannelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Device Channel List Get the list of active channels for a device.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="deviceID">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsChannelGetAll</returns>
        public ServiceDocsChannelGetAll V1AccountAccountIDDeviceDeviceIDChannelGet(string accountID, string deviceID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll> localVarResponse = V1AccountAccountIDDeviceDeviceIDChannelGetWithHttpInfo(accountID, deviceID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device Channel List Get the list of active channels for a device.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="deviceID">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsChannelGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll> V1AccountAccountIDDeviceDeviceIDChannelGetWithHttpInfo(string accountID, string deviceID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDDeviceDeviceIDChannelGet");
            }

            // verify the required parameter 'deviceID' is set
            if (deviceID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceID' when calling ChannelApi->V1AccountAccountIDDeviceDeviceIDChannelGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceID)); // path parameter

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDDeviceDeviceIDChannelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsChannelGetAll>("/v1/account/{accountID}/device/{deviceID}/channel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDDeviceDeviceIDChannelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Device Channel List Get the list of active channels for a device.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="deviceID">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsChannelGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsChannelGetAll> V1AccountAccountIDDeviceDeviceIDChannelGetAsync(string accountID, string deviceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll> localVarResponse = await V1AccountAccountIDDeviceDeviceIDChannelGetWithHttpInfoAsync(accountID, deviceID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device Channel List Get the list of active channels for a device.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="deviceID">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsChannelGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll>> V1AccountAccountIDDeviceDeviceIDChannelGetWithHttpInfoAsync(string accountID, string deviceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDDeviceDeviceIDChannelGet");
            }

            // verify the required parameter 'deviceID' is set
            if (deviceID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceID' when calling ChannelApi->V1AccountAccountIDDeviceDeviceIDChannelGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceID)); // path parameter

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDDeviceDeviceIDChannelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsChannelGetAll>("/v1/account/{accountID}/device/{deviceID}/channel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDDeviceDeviceIDChannelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Channel List Get the list of active channels for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsChannelGetAll</returns>
        public ServiceDocsChannelGetAll V1AccountAccountIDUserUserIDChannelGet(string accountID, string userID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll> localVarResponse = V1AccountAccountIDUserUserIDChannelGetWithHttpInfo(accountID, userID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Channel List Get the list of active channels for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsChannelGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll> V1AccountAccountIDUserUserIDChannelGetWithHttpInfo(string accountID, string userID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDUserUserIDChannelGet");
            }

            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling ChannelApi->V1AccountAccountIDUserUserIDChannelGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDUserUserIDChannelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsChannelGetAll>("/v1/account/{accountID}/user/{userID}/channel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDUserUserIDChannelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Channel List Get the list of active channels for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsChannelGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsChannelGetAll> V1AccountAccountIDUserUserIDChannelGetAsync(string accountID, string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll> localVarResponse = await V1AccountAccountIDUserUserIDChannelGetWithHttpInfoAsync(accountID, userID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Channel List Get the list of active channels for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsChannelGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsChannelGetAll>> V1AccountAccountIDUserUserIDChannelGetWithHttpInfoAsync(string accountID, string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ChannelApi->V1AccountAccountIDUserUserIDChannelGet");
            }

            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling ChannelApi->V1AccountAccountIDUserUserIDChannelGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter

            localVarRequestOptions.Operation = "ChannelApi.V1AccountAccountIDUserUserIDChannelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsChannelGetAll>("/v1/account/{accountID}/user/{userID}/channel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDUserUserIDChannelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
