/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICPaaSManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All CPaaS Users
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all CPaaS users in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">number of records to return, range 1 to 100 (optional)</param>
        /// <param name="startKey">unique to fetch next records (optional)</param>
        /// <param name="sort">sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="role">User Role (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserGetAll</returns>
        ServiceDocsAdminUserGetAll V1MgmtUserGet(int? pageSize = default, string? startKey = default, string? sort = default, string? email = default, string? role = default, string? firstName = default, string? lastName = default, int operationIndex = 0);

        /// <summary>
        /// Get All CPaaS Users
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all CPaaS users in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">number of records to return, range 1 to 100 (optional)</param>
        /// <param name="startKey">unique to fetch next records (optional)</param>
        /// <param name="sort">sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="role">User Role (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserGetAll</returns>
        ApiResponse<ServiceDocsAdminUserGetAll> V1MgmtUserGetWithHttpInfo(int? pageSize = default, string? startKey = default, string? sort = default, string? email = default, string? role = default, string? firstName = default, string? lastName = default, int operationIndex = 0);
        /// <summary>
        /// Invite CPaaS User
        /// </summary>
        /// <remarks>
        /// Link a new CPaaS user to an existing client account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserGetSingle</returns>
        ServiceDocsAdminUserGetSingle V1MgmtUserPost(ServiceAdminUserAddData reqBody, int operationIndex = 0);

        /// <summary>
        /// Invite CPaaS User
        /// </summary>
        /// <remarks>
        /// Link a new CPaaS user to an existing client account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserGetSingle</returns>
        ApiResponse<ServiceDocsAdminUserGetSingle> V1MgmtUserPostWithHttpInfo(ServiceAdminUserAddData reqBody, int operationIndex = 0);
        /// <summary>
        /// Delete CPaaS User
        /// </summary>
        /// <remarks>
        /// Delete a CPaaS user from the associated account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserDelete</returns>
        ServiceDocsAdminUserDelete V1MgmtUserUserIDDelete(string userID, int operationIndex = 0);

        /// <summary>
        /// Delete CPaaS User
        /// </summary>
        /// <remarks>
        /// Delete a CPaaS user from the associated account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserDelete</returns>
        ApiResponse<ServiceDocsAdminUserDelete> V1MgmtUserUserIDDeleteWithHttpInfo(string userID, int operationIndex = 0);
        /// <summary>
        /// Get CPaaS User Details
        /// </summary>
        /// <remarks>
        /// View details about each CPaaS user in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserGetSingle</returns>
        ServiceDocsAdminUserGetSingle V1MgmtUserUserIDGet(string userID, int operationIndex = 0);

        /// <summary>
        /// Get CPaaS User Details
        /// </summary>
        /// <remarks>
        /// View details about each CPaaS user in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserGetSingle</returns>
        ApiResponse<ServiceDocsAdminUserGetSingle> V1MgmtUserUserIDGetWithHttpInfo(string userID, int operationIndex = 0);
        /// <summary>
        /// Update CPaaS User Role
        /// </summary>
        /// <remarks>
        /// Update a CPaaS user&#39;s role within a client&#39;s account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserGetSingle</returns>
        ServiceDocsAdminUserGetSingle V1MgmtUserUserIDPut(string userID, ServiceAdminUserEditData reqBody, int operationIndex = 0);

        /// <summary>
        /// Update CPaaS User Role
        /// </summary>
        /// <remarks>
        /// Update a CPaaS user&#39;s role within a client&#39;s account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserGetSingle</returns>
        ApiResponse<ServiceDocsAdminUserGetSingle> V1MgmtUserUserIDPutWithHttpInfo(string userID, ServiceAdminUserEditData reqBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICPaaSManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get All CPaaS Users
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all CPaaS users in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">number of records to return, range 1 to 100 (optional)</param>
        /// <param name="startKey">unique to fetch next records (optional)</param>
        /// <param name="sort">sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="role">User Role (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsAdminUserGetAll> V1MgmtUserGetAsync(int? pageSize = default, string? startKey = default, string? sort = default, string? email = default, string? role = default, string? firstName = default, string? lastName = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All CPaaS Users
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all CPaaS users in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">number of records to return, range 1 to 100 (optional)</param>
        /// <param name="startKey">unique to fetch next records (optional)</param>
        /// <param name="sort">sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="role">User Role (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAdminUserGetAll>> V1MgmtUserGetWithHttpInfoAsync(int? pageSize = default, string? startKey = default, string? sort = default, string? email = default, string? role = default, string? firstName = default, string? lastName = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Invite CPaaS User
        /// </summary>
        /// <remarks>
        /// Link a new CPaaS user to an existing client account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAdminUserGetSingle> V1MgmtUserPostAsync(ServiceAdminUserAddData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Invite CPaaS User
        /// </summary>
        /// <remarks>
        /// Link a new CPaaS user to an existing client account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAdminUserGetSingle>> V1MgmtUserPostWithHttpInfoAsync(ServiceAdminUserAddData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete CPaaS User
        /// </summary>
        /// <remarks>
        /// Delete a CPaaS user from the associated account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserDelete</returns>
        System.Threading.Tasks.Task<ServiceDocsAdminUserDelete> V1MgmtUserUserIDDeleteAsync(string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete CPaaS User
        /// </summary>
        /// <remarks>
        /// Delete a CPaaS user from the associated account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserDelete)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAdminUserDelete>> V1MgmtUserUserIDDeleteWithHttpInfoAsync(string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get CPaaS User Details
        /// </summary>
        /// <remarks>
        /// View details about each CPaaS user in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAdminUserGetSingle> V1MgmtUserUserIDGetAsync(string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get CPaaS User Details
        /// </summary>
        /// <remarks>
        /// View details about each CPaaS user in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAdminUserGetSingle>> V1MgmtUserUserIDGetWithHttpInfoAsync(string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update CPaaS User Role
        /// </summary>
        /// <remarks>
        /// Update a CPaaS user&#39;s role within a client&#39;s account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAdminUserGetSingle> V1MgmtUserUserIDPutAsync(string userID, ServiceAdminUserEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update CPaaS User Role
        /// </summary>
        /// <remarks>
        /// Update a CPaaS user&#39;s role within a client&#39;s account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAdminUserGetSingle>> V1MgmtUserUserIDPutWithHttpInfoAsync(string userID, ServiceAdminUserEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICPaaSManagementApi : ICPaaSManagementApiSync, ICPaaSManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CPaaSManagementApi : ICPaaSManagementApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CPaaSManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CPaaSManagementApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CPaaSManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CPaaSManagementApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CPaaSManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CPaaSManagementApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CPaaSManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CPaaSManagementApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get All CPaaS Users Retrieve a list of all CPaaS users in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">number of records to return, range 1 to 100 (optional)</param>
        /// <param name="startKey">unique to fetch next records (optional)</param>
        /// <param name="sort">sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="role">User Role (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserGetAll</returns>
        public ServiceDocsAdminUserGetAll V1MgmtUserGet(int? pageSize = default, string? startKey = default, string? sort = default, string? email = default, string? role = default, string? firstName = default, string? lastName = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetAll> localVarResponse = V1MgmtUserGetWithHttpInfo(pageSize, startKey, sort, email, role, firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All CPaaS Users Retrieve a list of all CPaaS users in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">number of records to return, range 1 to 100 (optional)</param>
        /// <param name="startKey">unique to fetch next records (optional)</param>
        /// <param name="sort">sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="role">User Role (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetAll> V1MgmtUserGetWithHttpInfo(int? pageSize = default, string? startKey = default, string? sort = default, string? email = default, string? role = default, string? firstName = default, string? lastName = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }
            if (firstName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first_name", firstName));
            }
            if (lastName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "last_name", lastName));
            }

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsAdminUserGetAll>("/v1/mgmt/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All CPaaS Users Retrieve a list of all CPaaS users in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">number of records to return, range 1 to 100 (optional)</param>
        /// <param name="startKey">unique to fetch next records (optional)</param>
        /// <param name="sort">sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="role">User Role (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAdminUserGetAll> V1MgmtUserGetAsync(int? pageSize = default, string? startKey = default, string? sort = default, string? email = default, string? role = default, string? firstName = default, string? lastName = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetAll> localVarResponse = await V1MgmtUserGetWithHttpInfoAsync(pageSize, startKey, sort, email, role, firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All CPaaS Users Retrieve a list of all CPaaS users in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">number of records to return, range 1 to 100 (optional)</param>
        /// <param name="startKey">unique to fetch next records (optional)</param>
        /// <param name="sort">sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="role">User Role (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetAll>> V1MgmtUserGetWithHttpInfoAsync(int? pageSize = default, string? startKey = default, string? sort = default, string? email = default, string? role = default, string? firstName = default, string? lastName = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }
            if (firstName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first_name", firstName));
            }
            if (lastName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "last_name", lastName));
            }

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsAdminUserGetAll>("/v1/mgmt/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite CPaaS User Link a new CPaaS user to an existing client account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserGetSingle</returns>
        public ServiceDocsAdminUserGetSingle V1MgmtUserPost(ServiceAdminUserAddData reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle> localVarResponse = V1MgmtUserPostWithHttpInfo(reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite CPaaS User Link a new CPaaS user to an existing client account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle> V1MgmtUserPostWithHttpInfo(ServiceAdminUserAddData reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CPaaSManagementApi->V1MgmtUserPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsAdminUserGetSingle>("/v1/mgmt/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite CPaaS User Link a new CPaaS user to an existing client account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAdminUserGetSingle> V1MgmtUserPostAsync(ServiceAdminUserAddData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle> localVarResponse = await V1MgmtUserPostWithHttpInfoAsync(reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite CPaaS User Link a new CPaaS user to an existing client account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle>> V1MgmtUserPostWithHttpInfoAsync(ServiceAdminUserAddData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CPaaSManagementApi->V1MgmtUserPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsAdminUserGetSingle>("/v1/mgmt/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete CPaaS User Delete a CPaaS user from the associated account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserDelete</returns>
        public ServiceDocsAdminUserDelete V1MgmtUserUserIDDelete(string userID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserDelete> localVarResponse = V1MgmtUserUserIDDeleteWithHttpInfo(userID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete CPaaS User Delete a CPaaS user from the associated account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserDelete</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserDelete> V1MgmtUserUserIDDeleteWithHttpInfo(string userID, int operationIndex = 0)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling CPaaSManagementApi->V1MgmtUserUserIDDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserUserIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsAdminUserDelete>("/v1/mgmt/user/{userID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserUserIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete CPaaS User Delete a CPaaS user from the associated account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserDelete</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAdminUserDelete> V1MgmtUserUserIDDeleteAsync(string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserDelete> localVarResponse = await V1MgmtUserUserIDDeleteWithHttpInfoAsync(userID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete CPaaS User Delete a CPaaS user from the associated account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserDelete)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserDelete>> V1MgmtUserUserIDDeleteWithHttpInfoAsync(string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling CPaaSManagementApi->V1MgmtUserUserIDDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserUserIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsAdminUserDelete>("/v1/mgmt/user/{userID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserUserIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get CPaaS User Details View details about each CPaaS user in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserGetSingle</returns>
        public ServiceDocsAdminUserGetSingle V1MgmtUserUserIDGet(string userID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle> localVarResponse = V1MgmtUserUserIDGetWithHttpInfo(userID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CPaaS User Details View details about each CPaaS user in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle> V1MgmtUserUserIDGetWithHttpInfo(string userID, int operationIndex = 0)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling CPaaSManagementApi->V1MgmtUserUserIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserUserIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsAdminUserGetSingle>("/v1/mgmt/user/{userID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserUserIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get CPaaS User Details View details about each CPaaS user in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAdminUserGetSingle> V1MgmtUserUserIDGetAsync(string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle> localVarResponse = await V1MgmtUserUserIDGetWithHttpInfoAsync(userID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CPaaS User Details View details about each CPaaS user in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle>> V1MgmtUserUserIDGetWithHttpInfoAsync(string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling CPaaSManagementApi->V1MgmtUserUserIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserUserIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsAdminUserGetSingle>("/v1/mgmt/user/{userID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserUserIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update CPaaS User Role Update a CPaaS user&#39;s role within a client&#39;s account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAdminUserGetSingle</returns>
        public ServiceDocsAdminUserGetSingle V1MgmtUserUserIDPut(string userID, ServiceAdminUserEditData reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle> localVarResponse = V1MgmtUserUserIDPutWithHttpInfo(userID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update CPaaS User Role Update a CPaaS user&#39;s role within a client&#39;s account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAdminUserGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle> V1MgmtUserUserIDPutWithHttpInfo(string userID, ServiceAdminUserEditData reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling CPaaSManagementApi->V1MgmtUserUserIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CPaaSManagementApi->V1MgmtUserUserIDPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserUserIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsAdminUserGetSingle>("/v1/mgmt/user/{userID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserUserIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update CPaaS User Role Update a CPaaS user&#39;s role within a client&#39;s account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAdminUserGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAdminUserGetSingle> V1MgmtUserUserIDPutAsync(string userID, ServiceAdminUserEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle> localVarResponse = await V1MgmtUserUserIDPutWithHttpInfoAsync(userID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update CPaaS User Role Update a CPaaS user&#39;s role within a client&#39;s account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">User ID, numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAdminUserGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAdminUserGetSingle>> V1MgmtUserUserIDPutWithHttpInfoAsync(string userID, ServiceAdminUserEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling CPaaSManagementApi->V1MgmtUserUserIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CPaaSManagementApi->V1MgmtUserUserIDPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CPaaSManagementApi.V1MgmtUserUserIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsAdminUserGetSingle>("/v1/mgmt/user/{userID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1MgmtUserUserIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
