/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a single imported campaign in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignImportOutput</returns>
        ServiceDocsCampaignImportOutput V1SmsAccountAccountIDCampaignCampaignIDImportGet(string accountID, string campaignID, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a single imported campaign in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignImportOutput</returns>
        ApiResponse<ServiceDocsCampaignImportOutput> V1SmsAccountAccountIDCampaignCampaignIDImportGetWithHttpInfo(string accountID, string campaignID, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import campaign
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignImportOutput</returns>
        ServiceDocsCampaignImportOutput V1SmsAccountAccountIDCampaignCampaignIDImportPost(string accountID, string campaignID, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import campaign
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignImportOutput</returns>
        ApiResponse<ServiceDocsCampaignImportOutput> V1SmsAccountAccountIDCampaignCampaignIDImportPostWithHttpInfo(string accountID, string campaignID, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get telephone numbers associated with a campaign.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignPhoneNumberOutput</returns>
        ServiceDocsCampaignPhoneNumberOutput V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet(string accountID, string campaignID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get telephone numbers associated with a campaign.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignPhoneNumberOutput</returns>
        ApiResponse<ServiceDocsCampaignPhoneNumberOutput> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithHttpInfo(string accountID, string campaignID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Associate or dissociate telephone numbers with a campaign.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignTagDetagPhonenumbersOutput</returns>
        ServiceDocsCampaignTagDetagPhonenumbersOutput V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut(string accountID, string campaignID, ServiceCampaignTagDetagPhonenumbers reqBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Associate or dissociate telephone numbers with a campaign.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignTagDetagPhonenumbersOutput</returns>
        ApiResponse<ServiceDocsCampaignTagDetagPhonenumbersOutput> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithHttpInfo(string accountID, string campaignID, ServiceCampaignTagDetagPhonenumbers reqBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of all imported campaigns in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignImportedGetAllOutput</returns>
        ServiceDocsCampaignImportedGetAllOutput V1SmsAccountAccountIDCampaignImportGet(string accountID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of all imported campaigns in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignImportedGetAllOutput</returns>
        ApiResponse<ServiceDocsCampaignImportedGetAllOutput> V1SmsAccountAccountIDCampaignImportGetWithHttpInfo(string accountID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a single imported campaign in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignImportOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsCampaignImportOutput> V1SmsAccountAccountIDCampaignCampaignIDImportGetAsync(string accountID, string campaignID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a single imported campaign in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignImportOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCampaignImportOutput>> V1SmsAccountAccountIDCampaignCampaignIDImportGetWithHttpInfoAsync(string accountID, string campaignID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import campaign
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignImportOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsCampaignImportOutput> V1SmsAccountAccountIDCampaignCampaignIDImportPostAsync(string accountID, string campaignID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import campaign
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignImportOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCampaignImportOutput>> V1SmsAccountAccountIDCampaignCampaignIDImportPostWithHttpInfoAsync(string accountID, string campaignID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get telephone numbers associated with a campaign.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignPhoneNumberOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsCampaignPhoneNumberOutput> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetAsync(string accountID, string campaignID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get telephone numbers associated with a campaign.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignPhoneNumberOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCampaignPhoneNumberOutput>> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithHttpInfoAsync(string accountID, string campaignID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Associate or dissociate telephone numbers with a campaign.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignTagDetagPhonenumbersOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsCampaignTagDetagPhonenumbersOutput> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutAsync(string accountID, string campaignID, ServiceCampaignTagDetagPhonenumbers reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Associate or dissociate telephone numbers with a campaign.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignTagDetagPhonenumbersOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCampaignTagDetagPhonenumbersOutput>> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithHttpInfoAsync(string accountID, string campaignID, ServiceCampaignTagDetagPhonenumbers reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of all imported campaigns in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignImportedGetAllOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsCampaignImportedGetAllOutput> V1SmsAccountAccountIDCampaignImportGetAsync(string accountID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of all imported campaigns in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignImportedGetAllOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCampaignImportedGetAllOutput>> V1SmsAccountAccountIDCampaignImportGetWithHttpInfoAsync(string accountID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSApi : ISMSApiSync, ISMSApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SMSApi : ISMSApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SMSApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SMSApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SMSApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SMSApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get details about a single imported campaign in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignImportOutput</returns>
        public ServiceDocsCampaignImportOutput V1SmsAccountAccountIDCampaignCampaignIDImportGet(string accountID, string campaignID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportOutput> localVarResponse = V1SmsAccountAccountIDCampaignCampaignIDImportGetWithHttpInfo(accountID, campaignID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a single imported campaign in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignImportOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportOutput> V1SmsAccountAccountIDCampaignCampaignIDImportGetWithHttpInfo(string accountID, string campaignID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDImportGet");
            }

            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'campaignID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDImportGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(campaignID)); // path parameter

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignCampaignIDImportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCampaignImportOutput>("/v1/sms/account/{accountID}/campaign/{campaignID}/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignCampaignIDImportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a single imported campaign in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignImportOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCampaignImportOutput> V1SmsAccountAccountIDCampaignCampaignIDImportGetAsync(string accountID, string campaignID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportOutput> localVarResponse = await V1SmsAccountAccountIDCampaignCampaignIDImportGetWithHttpInfoAsync(accountID, campaignID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a single imported campaign in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignImportOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportOutput>> V1SmsAccountAccountIDCampaignCampaignIDImportGetWithHttpInfoAsync(string accountID, string campaignID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDImportGet");
            }

            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'campaignID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDImportGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(campaignID)); // path parameter

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignCampaignIDImportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCampaignImportOutput>("/v1/sms/account/{accountID}/campaign/{campaignID}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignCampaignIDImportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Import campaign
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignImportOutput</returns>
        public ServiceDocsCampaignImportOutput V1SmsAccountAccountIDCampaignCampaignIDImportPost(string accountID, string campaignID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportOutput> localVarResponse = V1SmsAccountAccountIDCampaignCampaignIDImportPostWithHttpInfo(accountID, campaignID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Import campaign
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignImportOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportOutput> V1SmsAccountAccountIDCampaignCampaignIDImportPostWithHttpInfo(string accountID, string campaignID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDImportPost");
            }

            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'campaignID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDImportPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(campaignID)); // path parameter

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignCampaignIDImportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsCampaignImportOutput>("/v1/sms/account/{accountID}/campaign/{campaignID}/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignCampaignIDImportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Import campaign
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignImportOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCampaignImportOutput> V1SmsAccountAccountIDCampaignCampaignIDImportPostAsync(string accountID, string campaignID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportOutput> localVarResponse = await V1SmsAccountAccountIDCampaignCampaignIDImportPostWithHttpInfoAsync(accountID, campaignID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Import campaign
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignImportOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportOutput>> V1SmsAccountAccountIDCampaignCampaignIDImportPostWithHttpInfoAsync(string accountID, string campaignID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDImportPost");
            }

            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'campaignID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDImportPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(campaignID)); // path parameter

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignCampaignIDImportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsCampaignImportOutput>("/v1/sms/account/{accountID}/campaign/{campaignID}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignCampaignIDImportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get telephone numbers associated with a campaign.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignPhoneNumberOutput</returns>
        public ServiceDocsCampaignPhoneNumberOutput V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet(string accountID, string campaignID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignPhoneNumberOutput> localVarResponse = V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithHttpInfo(accountID, campaignID, pageNum, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get telephone numbers associated with a campaign.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignPhoneNumberOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignPhoneNumberOutput> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithHttpInfo(string accountID, string campaignID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet");
            }

            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'campaignID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(campaignID)); // path parameter
            if (pageNum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_num", pageNum));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCampaignPhoneNumberOutput>("/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get telephone numbers associated with a campaign.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignPhoneNumberOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCampaignPhoneNumberOutput> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetAsync(string accountID, string campaignID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignPhoneNumberOutput> localVarResponse = await V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithHttpInfoAsync(accountID, campaignID, pageNum, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get telephone numbers associated with a campaign.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignPhoneNumberOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignPhoneNumberOutput>> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithHttpInfoAsync(string accountID, string campaignID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet");
            }

            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'campaignID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(campaignID)); // path parameter
            if (pageNum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_num", pageNum));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCampaignPhoneNumberOutput>("/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Associate or dissociate telephone numbers with a campaign.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignTagDetagPhonenumbersOutput</returns>
        public ServiceDocsCampaignTagDetagPhonenumbersOutput V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut(string accountID, string campaignID, ServiceCampaignTagDetagPhonenumbers reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignTagDetagPhonenumbersOutput> localVarResponse = V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithHttpInfo(accountID, campaignID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Associate or dissociate telephone numbers with a campaign.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignTagDetagPhonenumbersOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignTagDetagPhonenumbersOutput> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithHttpInfo(string accountID, string campaignID, ServiceCampaignTagDetagPhonenumbers reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut");
            }

            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'campaignID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(campaignID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsCampaignTagDetagPhonenumbersOutput>("/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Associate or dissociate telephone numbers with a campaign.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignTagDetagPhonenumbersOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCampaignTagDetagPhonenumbersOutput> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutAsync(string accountID, string campaignID, ServiceCampaignTagDetagPhonenumbers reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignTagDetagPhonenumbersOutput> localVarResponse = await V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithHttpInfoAsync(accountID, campaignID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Associate or dissociate telephone numbers with a campaign.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="campaignID">Campaign ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignTagDetagPhonenumbersOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignTagDetagPhonenumbersOutput>> V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithHttpInfoAsync(string accountID, string campaignID, ServiceCampaignTagDetagPhonenumbers reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut");
            }

            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'campaignID' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling SMSApi->V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(campaignID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsCampaignTagDetagPhonenumbersOutput>("/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of all imported campaigns in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCampaignImportedGetAllOutput</returns>
        public ServiceDocsCampaignImportedGetAllOutput V1SmsAccountAccountIDCampaignImportGet(string accountID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportedGetAllOutput> localVarResponse = V1SmsAccountAccountIDCampaignImportGetWithHttpInfo(accountID, pageNum, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of all imported campaigns in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCampaignImportedGetAllOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportedGetAllOutput> V1SmsAccountAccountIDCampaignImportGetWithHttpInfo(string accountID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignImportGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (pageNum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_num", pageNum));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignImportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCampaignImportedGetAllOutput>("/v1/sms/account/{accountID}/campaign/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignImportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of all imported campaigns in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCampaignImportedGetAllOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCampaignImportedGetAllOutput> V1SmsAccountAccountIDCampaignImportGetAsync(string accountID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportedGetAllOutput> localVarResponse = await V1SmsAccountAccountIDCampaignImportGetWithHttpInfoAsync(accountID, pageNum, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of all imported campaigns in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageNum">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCampaignImportedGetAllOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCampaignImportedGetAllOutput>> V1SmsAccountAccountIDCampaignImportGetWithHttpInfoAsync(string accountID, decimal? pageNum = default, decimal? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling SMSApi->V1SmsAccountAccountIDCampaignImportGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (pageNum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_num", pageNum));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "SMSApi.V1SmsAccountAccountIDCampaignImportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCampaignImportedGetAllOutput>("/v1/sms/account/{accountID}/campaign/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1SmsAccountAccountIDCampaignImportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
