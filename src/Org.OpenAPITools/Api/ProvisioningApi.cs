/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProvisioningApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Config File Details
        /// </summary>
        /// <remarks>
        /// Retrieve the configuration details (e.g., settings and parameters) for a device.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="filename">Name of config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream V1AccountAccountIDProvisionFilenameGet(string accountID, string filename, int operationIndex = 0);

        /// <summary>
        /// Get Config File Details
        /// </summary>
        /// <remarks>
        /// Retrieve the configuration details (e.g., settings and parameters) for a device.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="filename">Name of config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> V1AccountAccountIDProvisionFilenameGetWithHttpInfo(string accountID, string filename, int operationIndex = 0);
        /// <summary>
        /// Get Family Details
        /// </summary>
        /// <remarks>
        /// Retrieve a family&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsFamilyOutputSingle</returns>
        ProvisioningDocsDocsFamilyOutputSingle V1ApBrandBrandFamilyFamilyGet(string brand, string family, int operationIndex = 0);

        /// <summary>
        /// Get Family Details
        /// </summary>
        /// <remarks>
        /// Retrieve a family&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsFamilyOutputSingle</returns>
        ApiResponse<ProvisioningDocsDocsFamilyOutputSingle> V1ApBrandBrandFamilyFamilyGetWithHttpInfo(string brand, string family, int operationIndex = 0);
        /// <summary>
        /// Get Model List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="modelName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsModelOutput</returns>
        ProvisioningDocsDocsModelOutput V1ApBrandBrandFamilyFamilyModelGet(string brand, string family, string? modelName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0);

        /// <summary>
        /// Get Model List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="modelName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsModelOutput</returns>
        ApiResponse<ProvisioningDocsDocsModelOutput> V1ApBrandBrandFamilyFamilyModelGetWithHttpInfo(string brand, string family, string? modelName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0);
        /// <summary>
        /// Get Model Details
        /// </summary>
        /// <remarks>
        /// Retrieve a model&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsModelOutputSingle</returns>
        ProvisioningDocsDocsModelOutputSingle V1ApBrandBrandFamilyFamilyModelModelGet(string brand, string family, string model, int operationIndex = 0);

        /// <summary>
        /// Get Model Details
        /// </summary>
        /// <remarks>
        /// Retrieve a model&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsModelOutputSingle</returns>
        ApiResponse<ProvisioningDocsDocsModelOutputSingle> V1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfo(string brand, string family, string model, int operationIndex = 0);
        /// <summary>
        /// Get Template List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="firmware"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsTemplatesOutput</returns>
        ProvisioningDocsDocsTemplatesOutput V1ApBrandBrandFamilyFamilyModelModelTemplateGet(string brand, string family, string model, string? firmware = default, int? pageSize = default, string? startKey = default, string? status = default, string? templateName = default, int operationIndex = 0);

        /// <summary>
        /// Get Template List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="firmware"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsTemplatesOutput</returns>
        ApiResponse<ProvisioningDocsDocsTemplatesOutput> V1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfo(string brand, string family, string model, string? firmware = default, int? pageSize = default, string? startKey = default, string? status = default, string? templateName = default, int operationIndex = 0);
        /// <summary>
        /// Get Template Details
        /// </summary>
        /// <remarks>
        /// Retrieve details about a template for a model by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="template">template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsTemplateOutputSingle</returns>
        ProvisioningDocsDocsTemplateOutputSingle V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(string brand, string family, string model, string template, int operationIndex = 0);

        /// <summary>
        /// Get Template Details
        /// </summary>
        /// <remarks>
        /// Retrieve details about a template for a model by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="template">template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsTemplateOutputSingle</returns>
        ApiResponse<ProvisioningDocsDocsTemplateOutputSingle> V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfo(string brand, string family, string model, string template, int operationIndex = 0);
        /// <summary>
        /// Get Family List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="familyName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsFamilyOutput</returns>
        ProvisioningDocsDocsFamilyOutput V1ApBrandBrandFamilyGet(string brand, string? familyName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0);

        /// <summary>
        /// Get Family List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="familyName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsFamilyOutput</returns>
        ApiResponse<ProvisioningDocsDocsFamilyOutput> V1ApBrandBrandFamilyGetWithHttpInfo(string brand, string? familyName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0);
        /// <summary>
        /// Get Brand Details
        /// </summary>
        /// <remarks>
        /// Retrieve a brand&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand id to retrieve a brand</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsBrandOutputSingle</returns>
        ProvisioningDocsDocsBrandOutputSingle V1ApBrandBrandGet(string brand, int operationIndex = 0);

        /// <summary>
        /// Get Brand Details
        /// </summary>
        /// <remarks>
        /// Retrieve a brand&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand id to retrieve a brand</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsBrandOutputSingle</returns>
        ApiResponse<ProvisioningDocsDocsBrandOutputSingle> V1ApBrandBrandGetWithHttpInfo(string brand, int operationIndex = 0);
        /// <summary>
        /// Get Brand List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsBrandsOutput</returns>
        ProvisioningDocsDocsBrandsOutput V1ApBrandGet(string? brandName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0);

        /// <summary>
        /// Get Brand List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsBrandsOutput</returns>
        ApiResponse<ProvisioningDocsDocsBrandsOutput> V1ApBrandGetWithHttpInfo(string? brandName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0);
        /// <summary>
        /// Generate Config File
        /// </summary>
        /// <remarks>
        /// Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParams">body params to generate config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsConfigFileOutput</returns>
        ProvisioningDocsDocsConfigFileOutput V1ApConfigfileGeneratePost(ModelsGenerateConfigFileRequest varParams, int operationIndex = 0);

        /// <summary>
        /// Generate Config File
        /// </summary>
        /// <remarks>
        /// Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParams">body params to generate config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsConfigFileOutput</returns>
        ApiResponse<ProvisioningDocsDocsConfigFileOutput> V1ApConfigfileGeneratePostWithHttpInfo(ModelsGenerateConfigFileRequest varParams, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProvisioningApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Config File Details
        /// </summary>
        /// <remarks>
        /// Retrieve the configuration details (e.g., settings and parameters) for a device.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="filename">Name of config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> V1AccountAccountIDProvisionFilenameGetAsync(string accountID, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Config File Details
        /// </summary>
        /// <remarks>
        /// Retrieve the configuration details (e.g., settings and parameters) for a device.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="filename">Name of config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> V1AccountAccountIDProvisionFilenameGetWithHttpInfoAsync(string accountID, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Family Details
        /// </summary>
        /// <remarks>
        /// Retrieve a family&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsFamilyOutputSingle</returns>
        System.Threading.Tasks.Task<ProvisioningDocsDocsFamilyOutputSingle> V1ApBrandBrandFamilyFamilyGetAsync(string brand, string family, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Family Details
        /// </summary>
        /// <remarks>
        /// Retrieve a family&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsFamilyOutputSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisioningDocsDocsFamilyOutputSingle>> V1ApBrandBrandFamilyFamilyGetWithHttpInfoAsync(string brand, string family, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Model List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="modelName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsModelOutput</returns>
        System.Threading.Tasks.Task<ProvisioningDocsDocsModelOutput> V1ApBrandBrandFamilyFamilyModelGetAsync(string brand, string family, string? modelName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Model List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="modelName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsModelOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisioningDocsDocsModelOutput>> V1ApBrandBrandFamilyFamilyModelGetWithHttpInfoAsync(string brand, string family, string? modelName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Model Details
        /// </summary>
        /// <remarks>
        /// Retrieve a model&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsModelOutputSingle</returns>
        System.Threading.Tasks.Task<ProvisioningDocsDocsModelOutputSingle> V1ApBrandBrandFamilyFamilyModelModelGetAsync(string brand, string family, string model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Model Details
        /// </summary>
        /// <remarks>
        /// Retrieve a model&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsModelOutputSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisioningDocsDocsModelOutputSingle>> V1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfoAsync(string brand, string family, string model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Template List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="firmware"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsTemplatesOutput</returns>
        System.Threading.Tasks.Task<ProvisioningDocsDocsTemplatesOutput> V1ApBrandBrandFamilyFamilyModelModelTemplateGetAsync(string brand, string family, string model, string? firmware = default, int? pageSize = default, string? startKey = default, string? status = default, string? templateName = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Template List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="firmware"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsTemplatesOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisioningDocsDocsTemplatesOutput>> V1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfoAsync(string brand, string family, string model, string? firmware = default, int? pageSize = default, string? startKey = default, string? status = default, string? templateName = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Template Details
        /// </summary>
        /// <remarks>
        /// Retrieve details about a template for a model by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="template">template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsTemplateOutputSingle</returns>
        System.Threading.Tasks.Task<ProvisioningDocsDocsTemplateOutputSingle> V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetAsync(string brand, string family, string model, string template, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Template Details
        /// </summary>
        /// <remarks>
        /// Retrieve details about a template for a model by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="template">template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsTemplateOutputSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisioningDocsDocsTemplateOutputSingle>> V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfoAsync(string brand, string family, string model, string template, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Family List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="familyName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsFamilyOutput</returns>
        System.Threading.Tasks.Task<ProvisioningDocsDocsFamilyOutput> V1ApBrandBrandFamilyGetAsync(string brand, string? familyName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Family List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="familyName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsFamilyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisioningDocsDocsFamilyOutput>> V1ApBrandBrandFamilyGetWithHttpInfoAsync(string brand, string? familyName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Brand Details
        /// </summary>
        /// <remarks>
        /// Retrieve a brand&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand id to retrieve a brand</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsBrandOutputSingle</returns>
        System.Threading.Tasks.Task<ProvisioningDocsDocsBrandOutputSingle> V1ApBrandBrandGetAsync(string brand, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Brand Details
        /// </summary>
        /// <remarks>
        /// Retrieve a brand&#39;s details by the randomly generated ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand id to retrieve a brand</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsBrandOutputSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisioningDocsDocsBrandOutputSingle>> V1ApBrandBrandGetWithHttpInfoAsync(string brand, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Brand List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsBrandsOutput</returns>
        System.Threading.Tasks.Task<ProvisioningDocsDocsBrandsOutput> V1ApBrandGetAsync(string? brandName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Brand List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsBrandsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisioningDocsDocsBrandsOutput>> V1ApBrandGetWithHttpInfoAsync(string? brandName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Generate Config File
        /// </summary>
        /// <remarks>
        /// Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParams">body params to generate config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsConfigFileOutput</returns>
        System.Threading.Tasks.Task<ProvisioningDocsDocsConfigFileOutput> V1ApConfigfileGeneratePostAsync(ModelsGenerateConfigFileRequest varParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Config File
        /// </summary>
        /// <remarks>
        /// Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParams">body params to generate config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsConfigFileOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisioningDocsDocsConfigFileOutput>> V1ApConfigfileGeneratePostWithHttpInfoAsync(ModelsGenerateConfigFileRequest varParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProvisioningApi : IProvisioningApiSync, IProvisioningApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProvisioningApi : IProvisioningApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProvisioningApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProvisioningApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProvisioningApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProvisioningApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Config File Details Retrieve the configuration details (e.g., settings and parameters) for a device.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="filename">Name of config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream V1AccountAccountIDProvisionFilenameGet(string accountID, string filename, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = V1AccountAccountIDProvisionFilenameGetWithHttpInfo(accountID, filename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Config File Details Retrieve the configuration details (e.g., settings and parameters) for a device.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="filename">Name of config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> V1AccountAccountIDProvisionFilenameGetWithHttpInfo(string accountID, string filename, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ProvisioningApi->V1AccountAccountIDProvisionFilenameGet");
            }

            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filename' when calling ProvisioningApi->V1AccountAccountIDProvisionFilenameGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("filename", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filename)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1AccountAccountIDProvisionFilenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v1/account/{accountID}/provision/{filename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDProvisionFilenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Config File Details Retrieve the configuration details (e.g., settings and parameters) for a device.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="filename">Name of config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> V1AccountAccountIDProvisionFilenameGetAsync(string accountID, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await V1AccountAccountIDProvisionFilenameGetWithHttpInfoAsync(accountID, filename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Config File Details Retrieve the configuration details (e.g., settings and parameters) for a device.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="filename">Name of config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> V1AccountAccountIDProvisionFilenameGetWithHttpInfoAsync(string accountID, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling ProvisioningApi->V1AccountAccountIDProvisionFilenameGet");
            }

            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filename' when calling ProvisioningApi->V1AccountAccountIDProvisionFilenameGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("filename", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filename)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1AccountAccountIDProvisionFilenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v1/account/{accountID}/provision/{filename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDProvisionFilenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Family Details Retrieve a family&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsFamilyOutputSingle</returns>
        public ProvisioningDocsDocsFamilyOutputSingle V1ApBrandBrandFamilyFamilyGet(string brand, string family, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsFamilyOutputSingle> localVarResponse = V1ApBrandBrandFamilyFamilyGetWithHttpInfo(brand, family);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Family Details Retrieve a family&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsFamilyOutputSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsFamilyOutputSingle> V1ApBrandBrandFamilyFamilyGetWithHttpInfo(string brand, string family, int operationIndex = 0)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisioningDocsDocsFamilyOutputSingle>("/v1/ap/brand/{brand}/family/{family}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Family Details Retrieve a family&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsFamilyOutputSingle</returns>
        public async System.Threading.Tasks.Task<ProvisioningDocsDocsFamilyOutputSingle> V1ApBrandBrandFamilyFamilyGetAsync(string brand, string family, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsFamilyOutputSingle> localVarResponse = await V1ApBrandBrandFamilyFamilyGetWithHttpInfoAsync(brand, family, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Family Details Retrieve a family&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsFamilyOutputSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsFamilyOutputSingle>> V1ApBrandBrandFamilyFamilyGetWithHttpInfoAsync(string brand, string family, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisioningDocsDocsFamilyOutputSingle>("/v1/ap/brand/{brand}/family/{family}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Model List Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="modelName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsModelOutput</returns>
        public ProvisioningDocsDocsModelOutput V1ApBrandBrandFamilyFamilyModelGet(string brand, string family, string? modelName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsModelOutput> localVarResponse = V1ApBrandBrandFamilyFamilyModelGetWithHttpInfo(brand, family, modelName, pageSize, startKey, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Model List Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="modelName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsModelOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsModelOutput> V1ApBrandBrandFamilyFamilyModelGetWithHttpInfo(string brand, string family, string? modelName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "model_name", modelName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyModelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisioningDocsDocsModelOutput>("/v1/ap/brand/{brand}/family/{family}/model", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyModelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Model List Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="modelName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsModelOutput</returns>
        public async System.Threading.Tasks.Task<ProvisioningDocsDocsModelOutput> V1ApBrandBrandFamilyFamilyModelGetAsync(string brand, string family, string? modelName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsModelOutput> localVarResponse = await V1ApBrandBrandFamilyFamilyModelGetWithHttpInfoAsync(brand, family, modelName, pageSize, startKey, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Model List Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="modelName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsModelOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsModelOutput>> V1ApBrandBrandFamilyFamilyModelGetWithHttpInfoAsync(string brand, string family, string? modelName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "model_name", modelName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyModelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisioningDocsDocsModelOutput>("/v1/ap/brand/{brand}/family/{family}/model", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyModelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Model Details Retrieve a model&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsModelOutputSingle</returns>
        public ProvisioningDocsDocsModelOutputSingle V1ApBrandBrandFamilyFamilyModelModelGet(string brand, string family, string model, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsModelOutputSingle> localVarResponse = V1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfo(brand, family, model);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Model Details Retrieve a model&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsModelOutputSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsModelOutputSingle> V1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfo(string brand, string family, string model, int operationIndex = 0)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelGet");
            }

            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter
            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyModelModelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisioningDocsDocsModelOutputSingle>("/v1/ap/brand/{brand}/family/{family}/model/{model}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyModelModelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Model Details Retrieve a model&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsModelOutputSingle</returns>
        public async System.Threading.Tasks.Task<ProvisioningDocsDocsModelOutputSingle> V1ApBrandBrandFamilyFamilyModelModelGetAsync(string brand, string family, string model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsModelOutputSingle> localVarResponse = await V1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfoAsync(brand, family, model, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Model Details Retrieve a model&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsModelOutputSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsModelOutputSingle>> V1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfoAsync(string brand, string family, string model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelGet");
            }

            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter
            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyModelModelGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisioningDocsDocsModelOutputSingle>("/v1/ap/brand/{brand}/family/{family}/model/{model}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyModelModelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template List Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="firmware"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsTemplatesOutput</returns>
        public ProvisioningDocsDocsTemplatesOutput V1ApBrandBrandFamilyFamilyModelModelTemplateGet(string brand, string family, string model, string? firmware = default, int? pageSize = default, string? startKey = default, string? status = default, string? templateName = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsTemplatesOutput> localVarResponse = V1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfo(brand, family, model, firmware, pageSize, startKey, status, templateName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template List Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="firmware"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsTemplatesOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsTemplatesOutput> V1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfo(string brand, string family, string model, string? firmware = default, int? pageSize = default, string? startKey = default, string? status = default, string? templateName = default, int operationIndex = 0)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateGet");
            }

            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter
            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            if (firmware != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "firmware", firmware));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (templateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "template_name", templateName));
            }

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyModelModelTemplateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisioningDocsDocsTemplatesOutput>("/v1/ap/brand/{brand}/family/{family}/model/{model}/template", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyModelModelTemplateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template List Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="firmware"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsTemplatesOutput</returns>
        public async System.Threading.Tasks.Task<ProvisioningDocsDocsTemplatesOutput> V1ApBrandBrandFamilyFamilyModelModelTemplateGetAsync(string brand, string family, string model, string? firmware = default, int? pageSize = default, string? startKey = default, string? status = default, string? templateName = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsTemplatesOutput> localVarResponse = await V1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfoAsync(brand, family, model, firmware, pageSize, startKey, status, templateName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template List Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="firmware"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsTemplatesOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsTemplatesOutput>> V1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfoAsync(string brand, string family, string model, string? firmware = default, int? pageSize = default, string? startKey = default, string? status = default, string? templateName = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateGet");
            }

            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter
            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            if (firmware != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "firmware", firmware));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (templateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "template_name", templateName));
            }

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyModelModelTemplateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisioningDocsDocsTemplatesOutput>("/v1/ap/brand/{brand}/family/{family}/model/{model}/template", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyModelModelTemplateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template Details Retrieve details about a template for a model by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="template">template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsTemplateOutputSingle</returns>
        public ProvisioningDocsDocsTemplateOutputSingle V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(string brand, string family, string model, string template, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsTemplateOutputSingle> localVarResponse = V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfo(brand, family, model, template);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template Details Retrieve details about a template for a model by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="template">template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsTemplateOutputSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsTemplateOutputSingle> V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfo(string brand, string family, string model, string template, int operationIndex = 0)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet");
            }

            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet");
            }

            // verify the required parameter 'template' is set
            if (template == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'template' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter
            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.PathParameters.Add("template", Org.OpenAPITools.Client.ClientUtils.ParameterToString(template)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisioningDocsDocsTemplateOutputSingle>("/v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template Details Retrieve details about a template for a model by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="template">template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsTemplateOutputSingle</returns>
        public async System.Threading.Tasks.Task<ProvisioningDocsDocsTemplateOutputSingle> V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetAsync(string brand, string family, string model, string template, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsTemplateOutputSingle> localVarResponse = await V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfoAsync(brand, family, model, template, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template Details Retrieve details about a template for a model by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="family">family</param>
        /// <param name="model">model</param>
        /// <param name="template">template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsTemplateOutputSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsTemplateOutputSingle>> V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfoAsync(string brand, string family, string model, string template, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet");
            }

            // verify the required parameter 'family' is set
            if (family == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'family' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet");
            }

            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet");
            }

            // verify the required parameter 'template' is set
            if (template == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'template' when calling ProvisioningApi->V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            localVarRequestOptions.PathParameters.Add("family", Org.OpenAPITools.Client.ClientUtils.ParameterToString(family)); // path parameter
            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.PathParameters.Add("template", Org.OpenAPITools.Client.ClientUtils.ParameterToString(template)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisioningDocsDocsTemplateOutputSingle>("/v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Family List Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="familyName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsFamilyOutput</returns>
        public ProvisioningDocsDocsFamilyOutput V1ApBrandBrandFamilyGet(string brand, string? familyName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsFamilyOutput> localVarResponse = V1ApBrandBrandFamilyGetWithHttpInfo(brand, familyName, pageSize, startKey, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Family List Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="familyName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsFamilyOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsFamilyOutput> V1ApBrandBrandFamilyGetWithHttpInfo(string brand, string? familyName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            if (familyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "family_name", familyName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisioningDocsDocsFamilyOutput>("/v1/ap/brand/{brand}/family", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Family List Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="familyName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsFamilyOutput</returns>
        public async System.Threading.Tasks.Task<ProvisioningDocsDocsFamilyOutput> V1ApBrandBrandFamilyGetAsync(string brand, string? familyName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsFamilyOutput> localVarResponse = await V1ApBrandBrandFamilyGetWithHttpInfoAsync(brand, familyName, pageSize, startKey, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Family List Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand</param>
        /// <param name="familyName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsFamilyOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsFamilyOutput>> V1ApBrandBrandFamilyGetWithHttpInfoAsync(string brand, string? familyName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandFamilyGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter
            if (familyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "family_name", familyName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandFamilyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisioningDocsDocsFamilyOutput>("/v1/ap/brand/{brand}/family", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandFamilyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Details Retrieve a brand&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand id to retrieve a brand</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsBrandOutputSingle</returns>
        public ProvisioningDocsDocsBrandOutputSingle V1ApBrandBrandGet(string brand, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsBrandOutputSingle> localVarResponse = V1ApBrandBrandGetWithHttpInfo(brand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Details Retrieve a brand&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand id to retrieve a brand</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsBrandOutputSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsBrandOutputSingle> V1ApBrandBrandGetWithHttpInfo(string brand, int operationIndex = 0)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisioningDocsDocsBrandOutputSingle>("/v1/ap/brand/{brand}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Details Retrieve a brand&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand id to retrieve a brand</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsBrandOutputSingle</returns>
        public async System.Threading.Tasks.Task<ProvisioningDocsDocsBrandOutputSingle> V1ApBrandBrandGetAsync(string brand, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsBrandOutputSingle> localVarResponse = await V1ApBrandBrandGetWithHttpInfoAsync(brand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Details Retrieve a brand&#39;s details by the randomly generated ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brand">brand id to retrieve a brand</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsBrandOutputSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsBrandOutputSingle>> V1ApBrandBrandGetWithHttpInfoAsync(string brand, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling ProvisioningApi->V1ApBrandBrandGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brand", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brand)); // path parameter

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandBrandGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisioningDocsDocsBrandOutputSingle>("/v1/ap/brand/{brand}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandBrandGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand List Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsBrandsOutput</returns>
        public ProvisioningDocsDocsBrandsOutput V1ApBrandGet(string? brandName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsBrandsOutput> localVarResponse = V1ApBrandGetWithHttpInfo(brandName, pageSize, startKey, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand List Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsBrandsOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsBrandsOutput> V1ApBrandGetWithHttpInfo(string? brandName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (brandName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "brand_name", brandName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisioningDocsDocsBrandsOutput>("/v1/ap/brand", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand List Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsBrandsOutput</returns>
        public async System.Threading.Tasks.Task<ProvisioningDocsDocsBrandsOutput> V1ApBrandGetAsync(string? brandName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsBrandsOutput> localVarResponse = await V1ApBrandGetWithHttpInfoAsync(brandName, pageSize, startKey, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand List Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsBrandsOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsBrandsOutput>> V1ApBrandGetWithHttpInfoAsync(string? brandName = default, int? pageSize = default, string? startKey = default, string? status = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (brandName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "brand_name", brandName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApBrandGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisioningDocsDocsBrandsOutput>("/v1/ap/brand", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApBrandGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Config File Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParams">body params to generate config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisioningDocsDocsConfigFileOutput</returns>
        public ProvisioningDocsDocsConfigFileOutput V1ApConfigfileGeneratePost(ModelsGenerateConfigFileRequest varParams, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsConfigFileOutput> localVarResponse = V1ApConfigfileGeneratePostWithHttpInfo(varParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Config File Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParams">body params to generate config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisioningDocsDocsConfigFileOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsConfigFileOutput> V1ApConfigfileGeneratePostWithHttpInfo(ModelsGenerateConfigFileRequest varParams, int operationIndex = 0)
        {
            // verify the required parameter 'varParams' is set
            if (varParams == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'varParams' when calling ProvisioningApi->V1ApConfigfileGeneratePost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = varParams;

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApConfigfileGeneratePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProvisioningDocsDocsConfigFileOutput>("/v1/ap/configfile/generate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApConfigfileGeneratePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Config File Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParams">body params to generate config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisioningDocsDocsConfigFileOutput</returns>
        public async System.Threading.Tasks.Task<ProvisioningDocsDocsConfigFileOutput> V1ApConfigfileGeneratePostAsync(ModelsGenerateConfigFileRequest varParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsConfigFileOutput> localVarResponse = await V1ApConfigfileGeneratePostWithHttpInfoAsync(varParams, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Config File Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParams">body params to generate config file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisioningDocsDocsConfigFileOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProvisioningDocsDocsConfigFileOutput>> V1ApConfigfileGeneratePostWithHttpInfoAsync(ModelsGenerateConfigFileRequest varParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'varParams' is set
            if (varParams == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'varParams' when calling ProvisioningApi->V1ApConfigfileGeneratePost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = varParams;

            localVarRequestOptions.Operation = "ProvisioningApi.V1ApConfigfileGeneratePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProvisioningDocsDocsConfigFileOutput>("/v1/ap/configfile/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApConfigfileGeneratePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
