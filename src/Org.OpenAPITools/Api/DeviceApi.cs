/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Device
        /// </summary>
        /// <remarks>
        /// Remove one device from a CPaaS account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetSingle</returns>
        ServiceDocsDeviceGetSingle V1AccountAccountidDeviceDeviceidDelete(string accountid, string deviceid, int operationIndex = 0);

        /// <summary>
        /// Delete Device
        /// </summary>
        /// <remarks>
        /// Remove one device from a CPaaS account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetSingle</returns>
        ApiResponse<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidDeleteWithHttpInfo(string accountid, string deviceid, int operationIndex = 0);
        /// <summary>
        /// Get Device Details
        /// </summary>
        /// <remarks>
        /// Permit a user to view specific device details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetSingle</returns>
        ServiceDocsDeviceGetSingle V1AccountAccountidDeviceDeviceidGet(string accountid, string deviceid, int operationIndex = 0);

        /// <summary>
        /// Get Device Details
        /// </summary>
        /// <remarks>
        /// Permit a user to view specific device details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetSingle</returns>
        ApiResponse<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidGetWithHttpInfo(string accountid, string deviceid, int operationIndex = 0);
        /// <summary>
        /// Update Device
        /// </summary>
        /// <remarks>
        /// Edit specifics about the device, such as the device type, name, and owner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetSingle</returns>
        ServiceDocsDeviceGetSingle V1AccountAccountidDeviceDeviceidPut(string accountid, string deviceid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0);

        /// <summary>
        /// Update Device
        /// </summary>
        /// <remarks>
        /// Edit specifics about the device, such as the device type, name, and owner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetSingle</returns>
        ApiResponse<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidPutWithHttpInfo(string accountid, string deviceid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0);
        /// <summary>
        /// Reboot Device
        /// </summary>
        /// <remarks>
        /// Reboot a device in an account to mitigate malware and improve device performance.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceReboot</returns>
        ServiceDocsDeviceReboot V1AccountAccountidDeviceDeviceidRebootPost(string accountid, string deviceid, int operationIndex = 0);

        /// <summary>
        /// Reboot Device
        /// </summary>
        /// <remarks>
        /// Reboot a device in an account to mitigate malware and improve device performance.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceReboot</returns>
        ApiResponse<ServiceDocsDeviceReboot> V1AccountAccountidDeviceDeviceidRebootPostWithHttpInfo(string accountid, string deviceid, int operationIndex = 0);
        /// <summary>
        /// Get Device List
        /// </summary>
        /// <remarks>
        /// Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetAll</returns>
        ServiceDocsDeviceGetAll V1AccountAccountidDeviceGet(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// Get Device List
        /// </summary>
        /// <remarks>
        /// Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetAll</returns>
        ApiResponse<ServiceDocsDeviceGetAll> V1AccountAccountidDeviceGetWithHttpInfo(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0);
        /// <summary>
        /// Create Device
        /// </summary>
        /// <remarks>
        /// Connect a new device to an account to enhance communication methods.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetSingle</returns>
        ServiceDocsDeviceGetSingle V1AccountAccountidDevicePost(string accountid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0);

        /// <summary>
        /// Create Device
        /// </summary>
        /// <remarks>
        /// Connect a new device to an account to enhance communication methods.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetSingle</returns>
        ApiResponse<ServiceDocsDeviceGetSingle> V1AccountAccountidDevicePostWithHttpInfo(string accountid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0);
        /// <summary>
        /// Get Device Status
        /// </summary>
        /// <remarks>
        /// Retrieve a device’s status (e.g., registered or not registered) in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceStatus</returns>
        ServiceDocsDeviceStatus V1AccountAccountidDeviceStatusGet(string accountid, int operationIndex = 0);

        /// <summary>
        /// Get Device Status
        /// </summary>
        /// <remarks>
        /// Retrieve a device’s status (e.g., registered or not registered) in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceStatus</returns>
        ApiResponse<ServiceDocsDeviceStatus> V1AccountAccountidDeviceStatusGetWithHttpInfo(string accountid, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Device
        /// </summary>
        /// <remarks>
        /// Remove one device from a CPaaS account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidDeleteAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Device
        /// </summary>
        /// <remarks>
        /// Remove one device from a CPaaS account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsDeviceGetSingle>> V1AccountAccountidDeviceDeviceidDeleteWithHttpInfoAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Device Details
        /// </summary>
        /// <remarks>
        /// Permit a user to view specific device details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidGetAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Device Details
        /// </summary>
        /// <remarks>
        /// Permit a user to view specific device details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsDeviceGetSingle>> V1AccountAccountidDeviceDeviceidGetWithHttpInfoAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Device
        /// </summary>
        /// <remarks>
        /// Edit specifics about the device, such as the device type, name, and owner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidPutAsync(string accountid, string deviceid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Device
        /// </summary>
        /// <remarks>
        /// Edit specifics about the device, such as the device type, name, and owner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsDeviceGetSingle>> V1AccountAccountidDeviceDeviceidPutWithHttpInfoAsync(string accountid, string deviceid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Reboot Device
        /// </summary>
        /// <remarks>
        /// Reboot a device in an account to mitigate malware and improve device performance.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceReboot</returns>
        System.Threading.Tasks.Task<ServiceDocsDeviceReboot> V1AccountAccountidDeviceDeviceidRebootPostAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reboot Device
        /// </summary>
        /// <remarks>
        /// Reboot a device in an account to mitigate malware and improve device performance.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceReboot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsDeviceReboot>> V1AccountAccountidDeviceDeviceidRebootPostWithHttpInfoAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Device List
        /// </summary>
        /// <remarks>
        /// Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsDeviceGetAll> V1AccountAccountidDeviceGetAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Device List
        /// </summary>
        /// <remarks>
        /// Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsDeviceGetAll>> V1AccountAccountidDeviceGetWithHttpInfoAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Device
        /// </summary>
        /// <remarks>
        /// Connect a new device to an account to enhance communication methods.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsDeviceGetSingle> V1AccountAccountidDevicePostAsync(string accountid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Device
        /// </summary>
        /// <remarks>
        /// Connect a new device to an account to enhance communication methods.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsDeviceGetSingle>> V1AccountAccountidDevicePostWithHttpInfoAsync(string accountid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Device Status
        /// </summary>
        /// <remarks>
        /// Retrieve a device’s status (e.g., registered or not registered) in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceStatus</returns>
        System.Threading.Tasks.Task<ServiceDocsDeviceStatus> V1AccountAccountidDeviceStatusGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Device Status
        /// </summary>
        /// <remarks>
        /// Retrieve a device’s status (e.g., registered or not registered) in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsDeviceStatus>> V1AccountAccountidDeviceStatusGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApi : IDeviceApiSync, IDeviceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceApi : IDeviceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeviceApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Device Remove one device from a CPaaS account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetSingle</returns>
        public ServiceDocsDeviceGetSingle V1AccountAccountidDeviceDeviceidDelete(string accountid, string deviceid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> localVarResponse = V1AccountAccountidDeviceDeviceidDeleteWithHttpInfo(accountid, deviceid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Device Remove one device from a CPaaS account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidDeleteWithHttpInfo(string accountid, string deviceid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidDelete");
            }

            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceid)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceDeviceidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsDeviceGetSingle>("/v1/account/{accountid}/device/{deviceid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceDeviceidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Device Remove one device from a CPaaS account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidDeleteAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> localVarResponse = await V1AccountAccountidDeviceDeviceidDeleteWithHttpInfoAsync(accountid, deviceid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Device Remove one device from a CPaaS account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle>> V1AccountAccountidDeviceDeviceidDeleteWithHttpInfoAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidDelete");
            }

            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceid)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceDeviceidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsDeviceGetSingle>("/v1/account/{accountid}/device/{deviceid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceDeviceidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Device Details Permit a user to view specific device details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetSingle</returns>
        public ServiceDocsDeviceGetSingle V1AccountAccountidDeviceDeviceidGet(string accountid, string deviceid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> localVarResponse = V1AccountAccountidDeviceDeviceidGetWithHttpInfo(accountid, deviceid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device Details Permit a user to view specific device details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidGetWithHttpInfo(string accountid, string deviceid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidGet");
            }

            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceid)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceDeviceidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsDeviceGetSingle>("/v1/account/{accountid}/device/{deviceid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceDeviceidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Device Details Permit a user to view specific device details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidGetAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> localVarResponse = await V1AccountAccountidDeviceDeviceidGetWithHttpInfoAsync(accountid, deviceid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device Details Permit a user to view specific device details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle>> V1AccountAccountidDeviceDeviceidGetWithHttpInfoAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidGet");
            }

            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceid)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceDeviceidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsDeviceGetSingle>("/v1/account/{accountid}/device/{deviceid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceDeviceidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Device Edit specifics about the device, such as the device type, name, and owner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetSingle</returns>
        public ServiceDocsDeviceGetSingle V1AccountAccountidDeviceDeviceidPut(string accountid, string deviceid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> localVarResponse = V1AccountAccountidDeviceDeviceidPutWithHttpInfo(accountid, deviceid, device);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Device Edit specifics about the device, such as the device type, name, and owner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidPutWithHttpInfo(string accountid, string deviceid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidPut");
            }

            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidPut");
            }

            // verify the required parameter 'device' is set
            if (device == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'device' when calling DeviceApi->V1AccountAccountidDeviceDeviceidPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceid)); // path parameter
            localVarRequestOptions.Data = device;

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceDeviceidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsDeviceGetSingle>("/v1/account/{accountid}/device/{deviceid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceDeviceidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Device Edit specifics about the device, such as the device type, name, and owner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsDeviceGetSingle> V1AccountAccountidDeviceDeviceidPutAsync(string accountid, string deviceid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> localVarResponse = await V1AccountAccountidDeviceDeviceidPutWithHttpInfoAsync(accountid, deviceid, device, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Device Edit specifics about the device, such as the device type, name, and owner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle>> V1AccountAccountidDeviceDeviceidPutWithHttpInfoAsync(string accountid, string deviceid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidPut");
            }

            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidPut");
            }

            // verify the required parameter 'device' is set
            if (device == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'device' when calling DeviceApi->V1AccountAccountidDeviceDeviceidPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceid)); // path parameter
            localVarRequestOptions.Data = device;

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceDeviceidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsDeviceGetSingle>("/v1/account/{accountid}/device/{deviceid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceDeviceidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reboot Device Reboot a device in an account to mitigate malware and improve device performance.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceReboot</returns>
        public ServiceDocsDeviceReboot V1AccountAccountidDeviceDeviceidRebootPost(string accountid, string deviceid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceReboot> localVarResponse = V1AccountAccountidDeviceDeviceidRebootPostWithHttpInfo(accountid, deviceid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reboot Device Reboot a device in an account to mitigate malware and improve device performance.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceReboot</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceReboot> V1AccountAccountidDeviceDeviceidRebootPostWithHttpInfo(string accountid, string deviceid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidRebootPost");
            }

            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidRebootPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceid)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceDeviceidRebootPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsDeviceReboot>("/v1/account/{accountid}/device/{deviceid}/reboot", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceDeviceidRebootPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reboot Device Reboot a device in an account to mitigate malware and improve device performance.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceReboot</returns>
        public async System.Threading.Tasks.Task<ServiceDocsDeviceReboot> V1AccountAccountidDeviceDeviceidRebootPostAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceReboot> localVarResponse = await V1AccountAccountidDeviceDeviceidRebootPostWithHttpInfoAsync(accountid, deviceid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reboot Device Reboot a device in an account to mitigate malware and improve device performance.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="deviceid">Device ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceReboot)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceReboot>> V1AccountAccountidDeviceDeviceidRebootPostWithHttpInfoAsync(string accountid, string deviceid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidRebootPost");
            }

            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deviceid' when calling DeviceApi->V1AccountAccountidDeviceDeviceidRebootPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceid)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceDeviceidRebootPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsDeviceReboot>("/v1/account/{accountid}/device/{deviceid}/reboot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceDeviceidRebootPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Device List Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetAll</returns>
        public ServiceDocsDeviceGetAll V1AccountAccountidDeviceGet(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetAll> localVarResponse = V1AccountAccountidDeviceGetWithHttpInfo(accountid, startKey, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device List Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetAll> V1AccountAccountidDeviceGetWithHttpInfo(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsDeviceGetAll>("/v1/account/{accountid}/device", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Device List Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsDeviceGetAll> V1AccountAccountidDeviceGetAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetAll> localVarResponse = await V1AccountAccountidDeviceGetWithHttpInfoAsync(accountid, startKey, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device List Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetAll>> V1AccountAccountidDeviceGetWithHttpInfoAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsDeviceGetAll>("/v1/account/{accountid}/device", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Device Connect a new device to an account to enhance communication methods.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceGetSingle</returns>
        public ServiceDocsDeviceGetSingle V1AccountAccountidDevicePost(string accountid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> localVarResponse = V1AccountAccountidDevicePostWithHttpInfo(accountid, device);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Device Connect a new device to an account to enhance communication methods.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> V1AccountAccountidDevicePostWithHttpInfo(string accountid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDevicePost");
            }

            // verify the required parameter 'device' is set
            if (device == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'device' when calling DeviceApi->V1AccountAccountidDevicePost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = device;

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDevicePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsDeviceGetSingle>("/v1/account/{accountid}/device", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDevicePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Device Connect a new device to an account to enhance communication methods.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsDeviceGetSingle> V1AccountAccountidDevicePostAsync(string accountid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle> localVarResponse = await V1AccountAccountidDevicePostWithHttpInfoAsync(accountid, device, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Device Connect a new device to an account to enhance communication methods.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="device">device fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceGetSingle>> V1AccountAccountidDevicePostWithHttpInfoAsync(string accountid, ServiceVOIPDeviceAddEdit2 device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDevicePost");
            }

            // verify the required parameter 'device' is set
            if (device == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'device' when calling DeviceApi->V1AccountAccountidDevicePost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = device;

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDevicePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsDeviceGetSingle>("/v1/account/{accountid}/device", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDevicePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Device Status Retrieve a device’s status (e.g., registered or not registered) in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsDeviceStatus</returns>
        public ServiceDocsDeviceStatus V1AccountAccountidDeviceStatusGet(string accountid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceStatus> localVarResponse = V1AccountAccountidDeviceStatusGetWithHttpInfo(accountid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device Status Retrieve a device’s status (e.g., registered or not registered) in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsDeviceStatus</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceStatus> V1AccountAccountidDeviceStatusGetWithHttpInfo(string accountid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceStatusGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsDeviceStatus>("/v1/account/{accountid}/device/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Device Status Retrieve a device’s status (e.g., registered or not registered) in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsDeviceStatus</returns>
        public async System.Threading.Tasks.Task<ServiceDocsDeviceStatus> V1AccountAccountidDeviceStatusGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceStatus> localVarResponse = await V1AccountAccountidDeviceStatusGetWithHttpInfoAsync(accountid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device Status Retrieve a device’s status (e.g., registered or not registered) in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsDeviceStatus)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsDeviceStatus>> V1AccountAccountidDeviceStatusGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling DeviceApi->V1AccountAccountidDeviceStatusGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.V1AccountAccountidDeviceStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsDeviceStatus>("/v1/account/{accountid}/device/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDeviceStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
