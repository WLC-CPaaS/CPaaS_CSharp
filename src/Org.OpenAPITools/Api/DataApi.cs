/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get CDR Details
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a single CDR record from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="cdrID">CDR ID, string</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCdrGetSingle</returns>
        ServiceDocsCdrGetSingle V1AccountAccountIDCdrCdrIDGet(string accountID, string cdrID, int operationIndex = 0);

        /// <summary>
        /// Get CDR Details
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a single CDR record from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="cdrID">CDR ID, string</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCdrGetSingle</returns>
        ApiResponse<ServiceDocsCdrGetSingle> V1AccountAccountIDCdrCdrIDGetWithHttpInfo(string accountID, string cdrID, int operationIndex = 0);
        /// <summary>
        /// Get CDR List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of CDRs in a specific account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageSize">Page size (Maximum number of results to display per page) (optional)</param>
        /// <param name="startKey">Start key (Starting offset for displaying results) (optional)</param>
        /// <param name="createdFrom">For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="createdTo">For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCdrGetAll</returns>
        ServiceDocsCdrGetAll V1AccountAccountIDCdrGet(string accountID, string? pageSize = default, string? startKey = default, string? createdFrom = default, string? createdTo = default, int operationIndex = 0);

        /// <summary>
        /// Get CDR List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of CDRs in a specific account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageSize">Page size (Maximum number of results to display per page) (optional)</param>
        /// <param name="startKey">Start key (Starting offset for displaying results) (optional)</param>
        /// <param name="createdFrom">For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="createdTo">For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCdrGetAll</returns>
        ApiResponse<ServiceDocsCdrGetAll> V1AccountAccountIDCdrGetWithHttpInfo(string accountID, string? pageSize = default, string? startKey = default, string? createdFrom = default, string? createdTo = default, int operationIndex = 0);
        /// <summary>
        /// Get Call Daily Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallDailySummary</returns>
        ServiceDocsCallDailySummary V1DataCallDailySummaryGet(string? accountId = default, string? callType = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0);

        /// <summary>
        /// Get Call Daily Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallDailySummary</returns>
        ApiResponse<ServiceDocsCallDailySummary> V1DataCallDailySummaryGetWithHttpInfo(string? accountId = default, string? callType = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0);
        /// <summary>
        /// Get Call Detail List
        /// </summary>
        /// <remarks>
        /// Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="calleeName"> (optional)</param>
        /// <param name="calleeNumber"> (optional)</param>
        /// <param name="callerName"> (optional)</param>
        /// <param name="callerNumber"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallDetail</returns>
        ServiceDocsCallDetail V1DataCallDetailGet(string? account = default, string? callType = default, string? calleeName = default, string? calleeNumber = default, string? callerName = default, string? callerNumber = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0);

        /// <summary>
        /// Get Call Detail List
        /// </summary>
        /// <remarks>
        /// Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="calleeName"> (optional)</param>
        /// <param name="calleeNumber"> (optional)</param>
        /// <param name="callerName"> (optional)</param>
        /// <param name="callerNumber"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallDetail</returns>
        ApiResponse<ServiceDocsCallDetail> V1DataCallDetailGetWithHttpInfo(string? account = default, string? callType = default, string? calleeName = default, string? calleeNumber = default, string? callerName = default, string? callerNumber = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0);
        /// <summary>
        /// Get Call Detail List
        /// </summary>
        /// <remarks>
        /// Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallMonthlySummary</returns>
        ServiceDocsCallMonthlySummary V1DataCallMonthlySummaryGet(string? account = default, string? callType = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0);

        /// <summary>
        /// Get Call Detail List
        /// </summary>
        /// <remarks>
        /// Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallMonthlySummary</returns>
        ApiResponse<ServiceDocsCallMonthlySummary> V1DataCallMonthlySummaryGetWithHttpInfo(string? account = default, string? callType = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0);
        /// <summary>
        /// Get Endpoint List
        /// </summary>
        /// <remarks>
        /// Access the endpoint list for each CPaaS API.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="transactionType"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsEndpointList</returns>
        ServiceDocsEndpointList V1DataEndpointListGet(string? endpointName = default, string? featureName = default, int? pageSize = default, string? startKey = default, string? transactionType = default, string? version = default, int operationIndex = 0);

        /// <summary>
        /// Get Endpoint List
        /// </summary>
        /// <remarks>
        /// Access the endpoint list for each CPaaS API.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="transactionType"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsEndpointList</returns>
        ApiResponse<ServiceDocsEndpointList> V1DataEndpointListGetWithHttpInfo(string? endpointName = default, string? featureName = default, int? pageSize = default, string? startKey = default, string? transactionType = default, string? version = default, int operationIndex = 0);
        /// <summary>
        /// Get Event Daily Summary List
        /// </summary>
        /// <remarks>
        /// Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsEventDailySummary</returns>
        ServiceDocsEventDailySummary V1DataEventDailySummaryGet(string? accountId = default, string? component = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0);

        /// <summary>
        /// Get Event Daily Summary List
        /// </summary>
        /// <remarks>
        /// Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsEventDailySummary</returns>
        ApiResponse<ServiceDocsEventDailySummary> V1DataEventDailySummaryGetWithHttpInfo(string? accountId = default, string? component = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0);
        /// <summary>
        /// Get Event Details
        /// </summary>
        /// <remarks>
        /// Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDateTime"> (optional)</param>
        /// <param name="eventName"> (optional)</param>
        /// <param name="execStatus"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDateTime"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsEventDetail</returns>
        ServiceDocsEventDetail V1DataEventDetailGet(string? accountId = default, string? component = default, string? endDateTime = default, string? eventName = default, string? execStatus = default, int? pageSize = default, string? startDateTime = default, string? startKey = default, string? username = default, int operationIndex = 0);

        /// <summary>
        /// Get Event Details
        /// </summary>
        /// <remarks>
        /// Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDateTime"> (optional)</param>
        /// <param name="eventName"> (optional)</param>
        /// <param name="execStatus"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDateTime"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsEventDetail</returns>
        ApiResponse<ServiceDocsEventDetail> V1DataEventDetailGetWithHttpInfo(string? accountId = default, string? component = default, string? endDateTime = default, string? eventName = default, string? execStatus = default, int? pageSize = default, string? startDateTime = default, string? startKey = default, string? username = default, int operationIndex = 0);
        /// <summary>
        /// Get Event Monthly Summary List
        /// </summary>
        /// <remarks>
        /// Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsEventMonthlySummary</returns>
        ServiceDocsEventMonthlySummary V1DataEventMonthlySummaryGet(string? accountId = default, string? component = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0);

        /// <summary>
        /// Get Event Monthly Summary List
        /// </summary>
        /// <remarks>
        /// Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsEventMonthlySummary</returns>
        ApiResponse<ServiceDocsEventMonthlySummary> V1DataEventMonthlySummaryGetWithHttpInfo(string? accountId = default, string? component = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0);
        /// <summary>
        /// Get Feature Daily Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsFeatureDailySummary</returns>
        ServiceDocsFeatureDailySummary V1DataFeatureDailySummaryGet(string? endDate = default, string? featureName = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0);

        /// <summary>
        /// Get Feature Daily Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsFeatureDailySummary</returns>
        ApiResponse<ServiceDocsFeatureDailySummary> V1DataFeatureDailySummaryGetWithHttpInfo(string? endDate = default, string? featureName = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0);
        /// <summary>
        /// Get Feature Monthly Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsFeatureMonthlySummary</returns>
        ServiceDocsFeatureMonthlySummary V1DataFeatureMonthlySummaryGet(int? endMonth = default, int? endYear = default, string? featureName = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0);

        /// <summary>
        /// Get Feature Monthly Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsFeatureMonthlySummary</returns>
        ApiResponse<ServiceDocsFeatureMonthlySummary> V1DataFeatureMonthlySummaryGetWithHttpInfo(int? endMonth = default, int? endYear = default, string? featureName = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get CDR Details
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a single CDR record from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="cdrID">CDR ID, string</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCdrGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCdrGetSingle> V1AccountAccountIDCdrCdrIDGetAsync(string accountID, string cdrID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get CDR Details
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a single CDR record from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="cdrID">CDR ID, string</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCdrGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCdrGetSingle>> V1AccountAccountIDCdrCdrIDGetWithHttpInfoAsync(string accountID, string cdrID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get CDR List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of CDRs in a specific account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageSize">Page size (Maximum number of results to display per page) (optional)</param>
        /// <param name="startKey">Start key (Starting offset for displaying results) (optional)</param>
        /// <param name="createdFrom">For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="createdTo">For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCdrGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsCdrGetAll> V1AccountAccountIDCdrGetAsync(string accountID, string? pageSize = default, string? startKey = default, string? createdFrom = default, string? createdTo = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get CDR List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of CDRs in a specific account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageSize">Page size (Maximum number of results to display per page) (optional)</param>
        /// <param name="startKey">Start key (Starting offset for displaying results) (optional)</param>
        /// <param name="createdFrom">For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="createdTo">For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCdrGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCdrGetAll>> V1AccountAccountIDCdrGetWithHttpInfoAsync(string accountID, string? pageSize = default, string? startKey = default, string? createdFrom = default, string? createdTo = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Call Daily Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallDailySummary</returns>
        System.Threading.Tasks.Task<ServiceDocsCallDailySummary> V1DataCallDailySummaryGetAsync(string? accountId = default, string? callType = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Call Daily Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallDailySummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallDailySummary>> V1DataCallDailySummaryGetWithHttpInfoAsync(string? accountId = default, string? callType = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Call Detail List
        /// </summary>
        /// <remarks>
        /// Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="calleeName"> (optional)</param>
        /// <param name="calleeNumber"> (optional)</param>
        /// <param name="callerName"> (optional)</param>
        /// <param name="callerNumber"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallDetail</returns>
        System.Threading.Tasks.Task<ServiceDocsCallDetail> V1DataCallDetailGetAsync(string? account = default, string? callType = default, string? calleeName = default, string? calleeNumber = default, string? callerName = default, string? callerNumber = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Call Detail List
        /// </summary>
        /// <remarks>
        /// Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="calleeName"> (optional)</param>
        /// <param name="calleeNumber"> (optional)</param>
        /// <param name="callerName"> (optional)</param>
        /// <param name="callerNumber"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallDetail>> V1DataCallDetailGetWithHttpInfoAsync(string? account = default, string? callType = default, string? calleeName = default, string? calleeNumber = default, string? callerName = default, string? callerNumber = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Call Detail List
        /// </summary>
        /// <remarks>
        /// Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallMonthlySummary</returns>
        System.Threading.Tasks.Task<ServiceDocsCallMonthlySummary> V1DataCallMonthlySummaryGetAsync(string? account = default, string? callType = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Call Detail List
        /// </summary>
        /// <remarks>
        /// Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallMonthlySummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallMonthlySummary>> V1DataCallMonthlySummaryGetWithHttpInfoAsync(string? account = default, string? callType = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Endpoint List
        /// </summary>
        /// <remarks>
        /// Access the endpoint list for each CPaaS API.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="transactionType"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsEndpointList</returns>
        System.Threading.Tasks.Task<ServiceDocsEndpointList> V1DataEndpointListGetAsync(string? endpointName = default, string? featureName = default, int? pageSize = default, string? startKey = default, string? transactionType = default, string? version = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Endpoint List
        /// </summary>
        /// <remarks>
        /// Access the endpoint list for each CPaaS API.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="transactionType"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsEndpointList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsEndpointList>> V1DataEndpointListGetWithHttpInfoAsync(string? endpointName = default, string? featureName = default, int? pageSize = default, string? startKey = default, string? transactionType = default, string? version = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Event Daily Summary List
        /// </summary>
        /// <remarks>
        /// Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsEventDailySummary</returns>
        System.Threading.Tasks.Task<ServiceDocsEventDailySummary> V1DataEventDailySummaryGetAsync(string? accountId = default, string? component = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Event Daily Summary List
        /// </summary>
        /// <remarks>
        /// Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsEventDailySummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsEventDailySummary>> V1DataEventDailySummaryGetWithHttpInfoAsync(string? accountId = default, string? component = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Event Details
        /// </summary>
        /// <remarks>
        /// Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDateTime"> (optional)</param>
        /// <param name="eventName"> (optional)</param>
        /// <param name="execStatus"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDateTime"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsEventDetail</returns>
        System.Threading.Tasks.Task<ServiceDocsEventDetail> V1DataEventDetailGetAsync(string? accountId = default, string? component = default, string? endDateTime = default, string? eventName = default, string? execStatus = default, int? pageSize = default, string? startDateTime = default, string? startKey = default, string? username = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Event Details
        /// </summary>
        /// <remarks>
        /// Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDateTime"> (optional)</param>
        /// <param name="eventName"> (optional)</param>
        /// <param name="execStatus"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDateTime"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsEventDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsEventDetail>> V1DataEventDetailGetWithHttpInfoAsync(string? accountId = default, string? component = default, string? endDateTime = default, string? eventName = default, string? execStatus = default, int? pageSize = default, string? startDateTime = default, string? startKey = default, string? username = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Event Monthly Summary List
        /// </summary>
        /// <remarks>
        /// Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsEventMonthlySummary</returns>
        System.Threading.Tasks.Task<ServiceDocsEventMonthlySummary> V1DataEventMonthlySummaryGetAsync(string? accountId = default, string? component = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Event Monthly Summary List
        /// </summary>
        /// <remarks>
        /// Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsEventMonthlySummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsEventMonthlySummary>> V1DataEventMonthlySummaryGetWithHttpInfoAsync(string? accountId = default, string? component = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Feature Daily Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsFeatureDailySummary</returns>
        System.Threading.Tasks.Task<ServiceDocsFeatureDailySummary> V1DataFeatureDailySummaryGetAsync(string? endDate = default, string? featureName = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Feature Daily Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsFeatureDailySummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsFeatureDailySummary>> V1DataFeatureDailySummaryGetWithHttpInfoAsync(string? endDate = default, string? featureName = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Feature Monthly Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsFeatureMonthlySummary</returns>
        System.Threading.Tasks.Task<ServiceDocsFeatureMonthlySummary> V1DataFeatureMonthlySummaryGetAsync(int? endMonth = default, int? endYear = default, string? featureName = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Feature Monthly Summary List
        /// </summary>
        /// <remarks>
        /// Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsFeatureMonthlySummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsFeatureMonthlySummary>> V1DataFeatureMonthlySummaryGetWithHttpInfoAsync(int? endMonth = default, int? endYear = default, string? featureName = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApi : IDataApiSync, IDataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataApi : IDataApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get CDR Details Retrieve the details of a single CDR record from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="cdrID">CDR ID, string</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCdrGetSingle</returns>
        public ServiceDocsCdrGetSingle V1AccountAccountIDCdrCdrIDGet(string accountID, string cdrID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCdrGetSingle> localVarResponse = V1AccountAccountIDCdrCdrIDGetWithHttpInfo(accountID, cdrID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CDR Details Retrieve the details of a single CDR record from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="cdrID">CDR ID, string</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCdrGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCdrGetSingle> V1AccountAccountIDCdrCdrIDGetWithHttpInfo(string accountID, string cdrID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling DataApi->V1AccountAccountIDCdrCdrIDGet");
            }

            // verify the required parameter 'cdrID' is set
            if (cdrID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cdrID' when calling DataApi->V1AccountAccountIDCdrCdrIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cdrID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(cdrID)); // path parameter

            localVarRequestOptions.Operation = "DataApi.V1AccountAccountIDCdrCdrIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCdrGetSingle>("/v1/account/{accountID}/cdr/{cdrID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCdrCdrIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get CDR Details Retrieve the details of a single CDR record from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="cdrID">CDR ID, string</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCdrGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCdrGetSingle> V1AccountAccountIDCdrCdrIDGetAsync(string accountID, string cdrID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCdrGetSingle> localVarResponse = await V1AccountAccountIDCdrCdrIDGetWithHttpInfoAsync(accountID, cdrID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CDR Details Retrieve the details of a single CDR record from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="cdrID">CDR ID, string</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCdrGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCdrGetSingle>> V1AccountAccountIDCdrCdrIDGetWithHttpInfoAsync(string accountID, string cdrID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling DataApi->V1AccountAccountIDCdrCdrIDGet");
            }

            // verify the required parameter 'cdrID' is set
            if (cdrID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cdrID' when calling DataApi->V1AccountAccountIDCdrCdrIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cdrID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(cdrID)); // path parameter

            localVarRequestOptions.Operation = "DataApi.V1AccountAccountIDCdrCdrIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCdrGetSingle>("/v1/account/{accountID}/cdr/{cdrID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCdrCdrIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get CDR List Retrieve a list of CDRs in a specific account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageSize">Page size (Maximum number of results to display per page) (optional)</param>
        /// <param name="startKey">Start key (Starting offset for displaying results) (optional)</param>
        /// <param name="createdFrom">For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="createdTo">For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCdrGetAll</returns>
        public ServiceDocsCdrGetAll V1AccountAccountIDCdrGet(string accountID, string? pageSize = default, string? startKey = default, string? createdFrom = default, string? createdTo = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCdrGetAll> localVarResponse = V1AccountAccountIDCdrGetWithHttpInfo(accountID, pageSize, startKey, createdFrom, createdTo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CDR List Retrieve a list of CDRs in a specific account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageSize">Page size (Maximum number of results to display per page) (optional)</param>
        /// <param name="startKey">Start key (Starting offset for displaying results) (optional)</param>
        /// <param name="createdFrom">For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="createdTo">For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCdrGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCdrGetAll> V1AccountAccountIDCdrGetWithHttpInfo(string accountID, string? pageSize = default, string? startKey = default, string? createdFrom = default, string? createdTo = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling DataApi->V1AccountAccountIDCdrGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }

            localVarRequestOptions.Operation = "DataApi.V1AccountAccountIDCdrGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCdrGetAll>("/v1/account/{accountID}/cdr", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCdrGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get CDR List Retrieve a list of CDRs in a specific account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageSize">Page size (Maximum number of results to display per page) (optional)</param>
        /// <param name="startKey">Start key (Starting offset for displaying results) (optional)</param>
        /// <param name="createdFrom">For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="createdTo">For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCdrGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCdrGetAll> V1AccountAccountIDCdrGetAsync(string accountID, string? pageSize = default, string? startKey = default, string? createdFrom = default, string? createdTo = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCdrGetAll> localVarResponse = await V1AccountAccountIDCdrGetWithHttpInfoAsync(accountID, pageSize, startKey, createdFrom, createdTo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CDR List Retrieve a list of CDRs in a specific account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="pageSize">Page size (Maximum number of results to display per page) (optional)</param>
        /// <param name="startKey">Start key (Starting offset for displaying results) (optional)</param>
        /// <param name="createdFrom">For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="createdTo">For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCdrGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCdrGetAll>> V1AccountAccountIDCdrGetWithHttpInfoAsync(string accountID, string? pageSize = default, string? startKey = default, string? createdFrom = default, string? createdTo = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling DataApi->V1AccountAccountIDCdrGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }

            localVarRequestOptions.Operation = "DataApi.V1AccountAccountIDCdrGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCdrGetAll>("/v1/account/{accountID}/cdr", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCdrGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Daily Summary List Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallDailySummary</returns>
        public ServiceDocsCallDailySummary V1DataCallDailySummaryGet(string? accountId = default, string? callType = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallDailySummary> localVarResponse = V1DataCallDailySummaryGetWithHttpInfo(accountId, callType, endDate, pageSize, startDate, startKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Daily Summary List Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallDailySummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallDailySummary> V1DataCallDailySummaryGetWithHttpInfo(string? accountId = default, string? callType = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (callType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "call_type", callType));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataCallDailySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallDailySummary>("/v1/data/call_daily_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataCallDailySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Daily Summary List Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallDailySummary</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallDailySummary> V1DataCallDailySummaryGetAsync(string? accountId = default, string? callType = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallDailySummary> localVarResponse = await V1DataCallDailySummaryGetWithHttpInfoAsync(accountId, callType, endDate, pageSize, startDate, startKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Daily Summary List Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallDailySummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallDailySummary>> V1DataCallDailySummaryGetWithHttpInfoAsync(string? accountId = default, string? callType = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (callType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "call_type", callType));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataCallDailySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallDailySummary>("/v1/data/call_daily_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataCallDailySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Detail List Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="calleeName"> (optional)</param>
        /// <param name="calleeNumber"> (optional)</param>
        /// <param name="callerName"> (optional)</param>
        /// <param name="callerNumber"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallDetail</returns>
        public ServiceDocsCallDetail V1DataCallDetailGet(string? account = default, string? callType = default, string? calleeName = default, string? calleeNumber = default, string? callerName = default, string? callerNumber = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallDetail> localVarResponse = V1DataCallDetailGetWithHttpInfo(account, callType, calleeName, calleeNumber, callerName, callerNumber, endDate, pageSize, startDate, startKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Detail List Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="calleeName"> (optional)</param>
        /// <param name="calleeNumber"> (optional)</param>
        /// <param name="callerName"> (optional)</param>
        /// <param name="callerNumber"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallDetail</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallDetail> V1DataCallDetailGetWithHttpInfo(string? account = default, string? callType = default, string? calleeName = default, string? calleeNumber = default, string? callerName = default, string? callerNumber = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (callType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "call_type", callType));
            }
            if (calleeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callee_name", calleeName));
            }
            if (calleeNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callee_number", calleeNumber));
            }
            if (callerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "caller_name", callerName));
            }
            if (callerNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "caller_number", callerNumber));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataCallDetailGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallDetail>("/v1/data/call_detail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataCallDetailGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Detail List Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="calleeName"> (optional)</param>
        /// <param name="calleeNumber"> (optional)</param>
        /// <param name="callerName"> (optional)</param>
        /// <param name="callerNumber"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallDetail</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallDetail> V1DataCallDetailGetAsync(string? account = default, string? callType = default, string? calleeName = default, string? calleeNumber = default, string? callerName = default, string? callerNumber = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallDetail> localVarResponse = await V1DataCallDetailGetWithHttpInfoAsync(account, callType, calleeName, calleeNumber, callerName, callerNumber, endDate, pageSize, startDate, startKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Detail List Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="calleeName"> (optional)</param>
        /// <param name="calleeNumber"> (optional)</param>
        /// <param name="callerName"> (optional)</param>
        /// <param name="callerNumber"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallDetail)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallDetail>> V1DataCallDetailGetWithHttpInfoAsync(string? account = default, string? callType = default, string? calleeName = default, string? calleeNumber = default, string? callerName = default, string? callerNumber = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (callType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "call_type", callType));
            }
            if (calleeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callee_name", calleeName));
            }
            if (calleeNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callee_number", calleeNumber));
            }
            if (callerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "caller_name", callerName));
            }
            if (callerNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "caller_number", callerNumber));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataCallDetailGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallDetail>("/v1/data/call_detail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataCallDetailGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Detail List Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallMonthlySummary</returns>
        public ServiceDocsCallMonthlySummary V1DataCallMonthlySummaryGet(string? account = default, string? callType = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallMonthlySummary> localVarResponse = V1DataCallMonthlySummaryGetWithHttpInfo(account, callType, endMonth, endYear, pageSize, startKey, startMonth, startYear);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Detail List Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallMonthlySummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallMonthlySummary> V1DataCallMonthlySummaryGetWithHttpInfo(string? account = default, string? callType = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (callType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "call_type", callType));
            }
            if (endMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_month", endMonth));
            }
            if (endYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_year", endYear));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (startMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_month", startMonth));
            }
            if (startYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_year", startYear));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataCallMonthlySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallMonthlySummary>("/v1/data/call_monthly_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataCallMonthlySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Detail List Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallMonthlySummary</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallMonthlySummary> V1DataCallMonthlySummaryGetAsync(string? account = default, string? callType = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallMonthlySummary> localVarResponse = await V1DataCallMonthlySummaryGetWithHttpInfoAsync(account, callType, endMonth, endYear, pageSize, startKey, startMonth, startYear, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Detail List Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"> (optional)</param>
        /// <param name="callType"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallMonthlySummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallMonthlySummary>> V1DataCallMonthlySummaryGetWithHttpInfoAsync(string? account = default, string? callType = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (callType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "call_type", callType));
            }
            if (endMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_month", endMonth));
            }
            if (endYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_year", endYear));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (startMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_month", startMonth));
            }
            if (startYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_year", startYear));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataCallMonthlySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallMonthlySummary>("/v1/data/call_monthly_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataCallMonthlySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Endpoint List Access the endpoint list for each CPaaS API.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="transactionType"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsEndpointList</returns>
        public ServiceDocsEndpointList V1DataEndpointListGet(string? endpointName = default, string? featureName = default, int? pageSize = default, string? startKey = default, string? transactionType = default, string? version = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsEndpointList> localVarResponse = V1DataEndpointListGetWithHttpInfo(endpointName, featureName, pageSize, startKey, transactionType, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Endpoint List Access the endpoint list for each CPaaS API.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="transactionType"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsEndpointList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsEndpointList> V1DataEndpointListGetWithHttpInfo(string? endpointName = default, string? featureName = default, int? pageSize = default, string? startKey = default, string? transactionType = default, string? version = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endpointName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endpoint_name", endpointName));
            }
            if (featureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "feature_name", featureName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "transaction_type", transactionType));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataEndpointListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsEndpointList>("/v1/data/endpoint_list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataEndpointListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Endpoint List Access the endpoint list for each CPaaS API.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="transactionType"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsEndpointList</returns>
        public async System.Threading.Tasks.Task<ServiceDocsEndpointList> V1DataEndpointListGetAsync(string? endpointName = default, string? featureName = default, int? pageSize = default, string? startKey = default, string? transactionType = default, string? version = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsEndpointList> localVarResponse = await V1DataEndpointListGetWithHttpInfoAsync(endpointName, featureName, pageSize, startKey, transactionType, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Endpoint List Access the endpoint list for each CPaaS API.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="transactionType"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsEndpointList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsEndpointList>> V1DataEndpointListGetWithHttpInfoAsync(string? endpointName = default, string? featureName = default, int? pageSize = default, string? startKey = default, string? transactionType = default, string? version = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endpointName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endpoint_name", endpointName));
            }
            if (featureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "feature_name", featureName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "transaction_type", transactionType));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataEndpointListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsEndpointList>("/v1/data/endpoint_list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataEndpointListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Event Daily Summary List Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsEventDailySummary</returns>
        public ServiceDocsEventDailySummary V1DataEventDailySummaryGet(string? accountId = default, string? component = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventDailySummary> localVarResponse = V1DataEventDailySummaryGetWithHttpInfo(accountId, component, endDate, pageSize, startDate, startKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Daily Summary List Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsEventDailySummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventDailySummary> V1DataEventDailySummaryGetWithHttpInfo(string? accountId = default, string? component = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (component != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "component", component));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataEventDailySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsEventDailySummary>("/v1/data/event_daily_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataEventDailySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Event Daily Summary List Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsEventDailySummary</returns>
        public async System.Threading.Tasks.Task<ServiceDocsEventDailySummary> V1DataEventDailySummaryGetAsync(string? accountId = default, string? component = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventDailySummary> localVarResponse = await V1DataEventDailySummaryGetWithHttpInfoAsync(accountId, component, endDate, pageSize, startDate, startKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Daily Summary List Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsEventDailySummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventDailySummary>> V1DataEventDailySummaryGetWithHttpInfoAsync(string? accountId = default, string? component = default, string? endDate = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (component != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "component", component));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataEventDailySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsEventDailySummary>("/v1/data/event_daily_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataEventDailySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Event Details Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDateTime"> (optional)</param>
        /// <param name="eventName"> (optional)</param>
        /// <param name="execStatus"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDateTime"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsEventDetail</returns>
        public ServiceDocsEventDetail V1DataEventDetailGet(string? accountId = default, string? component = default, string? endDateTime = default, string? eventName = default, string? execStatus = default, int? pageSize = default, string? startDateTime = default, string? startKey = default, string? username = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventDetail> localVarResponse = V1DataEventDetailGetWithHttpInfo(accountId, component, endDateTime, eventName, execStatus, pageSize, startDateTime, startKey, username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Details Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDateTime"> (optional)</param>
        /// <param name="eventName"> (optional)</param>
        /// <param name="execStatus"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDateTime"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsEventDetail</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventDetail> V1DataEventDetailGetWithHttpInfo(string? accountId = default, string? component = default, string? endDateTime = default, string? eventName = default, string? execStatus = default, int? pageSize = default, string? startDateTime = default, string? startKey = default, string? username = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (component != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "component", component));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date_time", endDateTime));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "event_name", eventName));
            }
            if (execStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exec_status", execStatus));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date_time", startDateTime));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataEventDetailGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsEventDetail>("/v1/data/event_detail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataEventDetailGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Event Details Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDateTime"> (optional)</param>
        /// <param name="eventName"> (optional)</param>
        /// <param name="execStatus"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDateTime"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsEventDetail</returns>
        public async System.Threading.Tasks.Task<ServiceDocsEventDetail> V1DataEventDetailGetAsync(string? accountId = default, string? component = default, string? endDateTime = default, string? eventName = default, string? execStatus = default, int? pageSize = default, string? startDateTime = default, string? startKey = default, string? username = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventDetail> localVarResponse = await V1DataEventDetailGetWithHttpInfoAsync(accountId, component, endDateTime, eventName, execStatus, pageSize, startDateTime, startKey, username, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Details Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endDateTime"> (optional)</param>
        /// <param name="eventName"> (optional)</param>
        /// <param name="execStatus"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDateTime"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsEventDetail)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventDetail>> V1DataEventDetailGetWithHttpInfoAsync(string? accountId = default, string? component = default, string? endDateTime = default, string? eventName = default, string? execStatus = default, int? pageSize = default, string? startDateTime = default, string? startKey = default, string? username = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (component != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "component", component));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date_time", endDateTime));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "event_name", eventName));
            }
            if (execStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exec_status", execStatus));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date_time", startDateTime));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataEventDetailGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsEventDetail>("/v1/data/event_detail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataEventDetailGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Event Monthly Summary List Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsEventMonthlySummary</returns>
        public ServiceDocsEventMonthlySummary V1DataEventMonthlySummaryGet(string? accountId = default, string? component = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventMonthlySummary> localVarResponse = V1DataEventMonthlySummaryGetWithHttpInfo(accountId, component, endMonth, endYear, pageSize, startKey, startMonth, startYear);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Monthly Summary List Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsEventMonthlySummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventMonthlySummary> V1DataEventMonthlySummaryGetWithHttpInfo(string? accountId = default, string? component = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (component != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "component", component));
            }
            if (endMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_month", endMonth));
            }
            if (endYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_year", endYear));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (startMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_month", startMonth));
            }
            if (startYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_year", startYear));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataEventMonthlySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsEventMonthlySummary>("/v1/data/event_monthly_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataEventMonthlySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Event Monthly Summary List Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsEventMonthlySummary</returns>
        public async System.Threading.Tasks.Task<ServiceDocsEventMonthlySummary> V1DataEventMonthlySummaryGetAsync(string? accountId = default, string? component = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventMonthlySummary> localVarResponse = await V1DataEventMonthlySummaryGetWithHttpInfoAsync(accountId, component, endMonth, endYear, pageSize, startKey, startMonth, startYear, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Monthly Summary List Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <param name="component"> (optional)</param>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsEventMonthlySummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsEventMonthlySummary>> V1DataEventMonthlySummaryGetWithHttpInfoAsync(string? accountId = default, string? component = default, int? endMonth = default, int? endYear = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (component != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "component", component));
            }
            if (endMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_month", endMonth));
            }
            if (endYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_year", endYear));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (startMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_month", startMonth));
            }
            if (startYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_year", startYear));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataEventMonthlySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsEventMonthlySummary>("/v1/data/event_monthly_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataEventMonthlySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feature Daily Summary List Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsFeatureDailySummary</returns>
        public ServiceDocsFeatureDailySummary V1DataFeatureDailySummaryGet(string? endDate = default, string? featureName = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsFeatureDailySummary> localVarResponse = V1DataFeatureDailySummaryGetWithHttpInfo(endDate, featureName, pageSize, startDate, startKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feature Daily Summary List Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsFeatureDailySummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsFeatureDailySummary> V1DataFeatureDailySummaryGetWithHttpInfo(string? endDate = default, string? featureName = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (featureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "feature_name", featureName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataFeatureDailySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsFeatureDailySummary>("/v1/data/feature_daily_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataFeatureDailySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feature Daily Summary List Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsFeatureDailySummary</returns>
        public async System.Threading.Tasks.Task<ServiceDocsFeatureDailySummary> V1DataFeatureDailySummaryGetAsync(string? endDate = default, string? featureName = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsFeatureDailySummary> localVarResponse = await V1DataFeatureDailySummaryGetWithHttpInfoAsync(endDate, featureName, pageSize, startDate, startKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feature Daily Summary List Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsFeatureDailySummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsFeatureDailySummary>> V1DataFeatureDailySummaryGetWithHttpInfoAsync(string? endDate = default, string? featureName = default, int? pageSize = default, string? startDate = default, string? startKey = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (featureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "feature_name", featureName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataFeatureDailySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsFeatureDailySummary>("/v1/data/feature_daily_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataFeatureDailySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feature Monthly Summary List Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsFeatureMonthlySummary</returns>
        public ServiceDocsFeatureMonthlySummary V1DataFeatureMonthlySummaryGet(int? endMonth = default, int? endYear = default, string? featureName = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsFeatureMonthlySummary> localVarResponse = V1DataFeatureMonthlySummaryGetWithHttpInfo(endMonth, endYear, featureName, pageSize, startKey, startMonth, startYear);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feature Monthly Summary List Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsFeatureMonthlySummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsFeatureMonthlySummary> V1DataFeatureMonthlySummaryGetWithHttpInfo(int? endMonth = default, int? endYear = default, string? featureName = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_month", endMonth));
            }
            if (endYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_year", endYear));
            }
            if (featureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "feature_name", featureName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (startMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_month", startMonth));
            }
            if (startYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_year", startYear));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataFeatureMonthlySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsFeatureMonthlySummary>("/v1/data/feature_monthly_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataFeatureMonthlySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feature Monthly Summary List Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsFeatureMonthlySummary</returns>
        public async System.Threading.Tasks.Task<ServiceDocsFeatureMonthlySummary> V1DataFeatureMonthlySummaryGetAsync(int? endMonth = default, int? endYear = default, string? featureName = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsFeatureMonthlySummary> localVarResponse = await V1DataFeatureMonthlySummaryGetWithHttpInfoAsync(endMonth, endYear, featureName, pageSize, startKey, startMonth, startYear, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feature Monthly Summary List Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endMonth"> (optional)</param>
        /// <param name="endYear"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="startMonth"> (optional)</param>
        /// <param name="startYear"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsFeatureMonthlySummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsFeatureMonthlySummary>> V1DataFeatureMonthlySummaryGetWithHttpInfoAsync(int? endMonth = default, int? endYear = default, string? featureName = default, int? pageSize = default, string? startKey = default, int? startMonth = default, int? startYear = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_month", endMonth));
            }
            if (endYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_year", endYear));
            }
            if (featureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "feature_name", featureName));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (startMonth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_month", startMonth));
            }
            if (startYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_year", startYear));
            }

            localVarRequestOptions.Operation = "DataApi.V1DataFeatureMonthlySummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsFeatureMonthlySummary>("/v1/data/feature_monthly_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataFeatureMonthlySummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
