/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Sub Account List
        /// </summary>
        /// <remarks>
        /// Conveniently access the list of children accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetAll</returns>
        ServiceDocsAccountGetAll V1AccountAccountidChildrenGet(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// Get Sub Account List
        /// </summary>
        /// <remarks>
        /// Conveniently access the list of children accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetAll</returns>
        ApiResponse<ServiceDocsAccountGetAll> V1AccountAccountidChildrenGetWithHttpInfo(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0);
        /// <summary>
        /// Delete Account
        /// </summary>
        /// <remarks>
        /// Delete an account within your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        ServiceDocsAccountGetSingle V1AccountAccountidDelete(string accountid, int operationIndex = 0);

        /// <summary>
        /// Delete Account
        /// </summary>
        /// <remarks>
        /// Delete an account within your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidDeleteWithHttpInfo(string accountid, int operationIndex = 0);
        /// <summary>
        /// Get Account DNS Record
        /// </summary>
        /// <remarks>
        /// Get the DNS record of an account from the Route 53 entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        ServiceDocsAccountGetSingle V1AccountAccountidDnsrecordGet(string accountid, int operationIndex = 0);

        /// <summary>
        /// Get Account DNS Record
        /// </summary>
        /// <remarks>
        /// Get the DNS record of an account from the Route 53 entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordGetWithHttpInfo(string accountid, int operationIndex = 0);
        /// <summary>
        /// Create Account DNS Record
        /// </summary>
        /// <remarks>
        /// Create the DNS record of an account with the help realm in the Route 53 entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        ServiceDocsAccountGetSingle V1AccountAccountidDnsrecordPost(string accountid, int operationIndex = 0);

        /// <summary>
        /// Create Account DNS Record
        /// </summary>
        /// <remarks>
        /// Create the DNS record of an account with the help realm in the Route 53 entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordPostWithHttpInfo(string accountid, int operationIndex = 0);
        /// <summary>
        /// Convert Account DNS Record
        /// </summary>
        /// <remarks>
        /// Toggle the realm DNS record between srv and cname.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="dnsrecord">record type fields with value SRV, CNAME</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        ServiceDocsAccountGetSingle V1AccountAccountidDnsrecordPut(string accountid, ServiceUpdateRecordTypeForAccount dnsrecord, int operationIndex = 0);

        /// <summary>
        /// Convert Account DNS Record
        /// </summary>
        /// <remarks>
        /// Toggle the realm DNS record between srv and cname.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="dnsrecord">record type fields with value SRV, CNAME</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordPutWithHttpInfo(string accountid, ServiceUpdateRecordTypeForAccount dnsrecord, int operationIndex = 0);
        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        ServiceDocsAccountGetSingle V1AccountAccountidGet(string accountid, int operationIndex = 0);

        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidGetWithHttpInfo(string accountid, int operationIndex = 0);
        /// <summary>
        /// Get Account Limits
        /// </summary>
        /// <remarks>
        /// Check the maximum number of inbound, outbound, and two-way trunks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountLimit</returns>
        ServiceDocsAccountLimit V1AccountAccountidLimitGet(string accountid, int operationIndex = 0);

        /// <summary>
        /// Get Account Limits
        /// </summary>
        /// <remarks>
        /// Check the maximum number of inbound, outbound, and two-way trunks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountLimit</returns>
        ApiResponse<ServiceDocsAccountLimit> V1AccountAccountidLimitGetWithHttpInfo(string accountid, int operationIndex = 0);
        /// <summary>
        /// Set Account Limits
        /// </summary>
        /// <remarks>
        /// Apply parameters to restrict access to inbound, outbound, and two-way trunks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="limit">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountLimit</returns>
        ServiceDocsAccountLimit V1AccountAccountidLimitPut(string accountid, ServiceVOIPAccountLimit2 limit, int operationIndex = 0);

        /// <summary>
        /// Set Account Limits
        /// </summary>
        /// <remarks>
        /// Apply parameters to restrict access to inbound, outbound, and two-way trunks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="limit">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountLimit</returns>
        ApiResponse<ServiceDocsAccountLimit> V1AccountAccountidLimitPutWithHttpInfo(string accountid, ServiceVOIPAccountLimit2 limit, int operationIndex = 0);
        /// <summary>
        /// Create Sub Account
        /// </summary>
        /// <remarks>
        /// Establish a sub account to enable an administrator within your organization to create accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        ServiceDocsAccountGetSingle V1AccountAccountidPost(string accountid, ServiceVOIPAccountAddData account, int operationIndex = 0);

        /// <summary>
        /// Create Sub Account
        /// </summary>
        /// <remarks>
        /// Establish a sub account to enable an administrator within your organization to create accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidPostWithHttpInfo(string accountid, ServiceVOIPAccountAddData account, int operationIndex = 0);
        /// <summary>
        /// Get Account Provisioning Details
        /// </summary>
        /// <remarks>
        /// Get the provisioning details of an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountProvisioning</returns>
        ServiceDocsAccountProvisioning V1AccountAccountidProvisioningdetailsGet(string accountid, int operationIndex = 0);

        /// <summary>
        /// Get Account Provisioning Details
        /// </summary>
        /// <remarks>
        /// Get the provisioning details of an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountProvisioning</returns>
        ApiResponse<ServiceDocsAccountProvisioning> V1AccountAccountidProvisioningdetailsGetWithHttpInfo(string accountid, int operationIndex = 0);
        /// <summary>
        /// Reset the provisioning details password.
        /// </summary>
        /// <remarks>
        /// Reset the existing provisioning details password and set it to a new one.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountProvisioning</returns>
        ServiceDocsAccountProvisioning V1AccountAccountidProvisioningdetailsResetpwPut(string accountid, int operationIndex = 0);

        /// <summary>
        /// Reset the provisioning details password.
        /// </summary>
        /// <remarks>
        /// Reset the existing provisioning details password and set it to a new one.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountProvisioning</returns>
        ApiResponse<ServiceDocsAccountProvisioning> V1AccountAccountidProvisioningdetailsResetpwPutWithHttpInfo(string accountid, int operationIndex = 0);
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Modify pertinent account data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        ServiceDocsAccountGetSingle V1AccountAccountidPut(string accountid, ServiceVOIPAccountEditData account, int operationIndex = 0);

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Modify pertinent account data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidPutWithHttpInfo(string accountid, ServiceVOIPAccountEditData account, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountAPIKey</returns>
        ServiceDocsAccountAPIKey V1AccountApikeyGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountAPIKey</returns>
        ApiResponse<ServiceDocsAccountAPIKey> V1AccountApikeyGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Account List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all CPaaS accounts that exist within your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetAll</returns>
        ServiceDocsAccountGetAll V1AccountGet(string? startKey = default, int? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// Get Account List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all CPaaS accounts that exist within your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetAll</returns>
        ApiResponse<ServiceDocsAccountGetAll> V1AccountGetWithHttpInfo(string? startKey = default, int? pageSize = default, int operationIndex = 0);
        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Create an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        ServiceDocsAccountGetSingle V1AccountPost(ServiceVOIPAccountAddData account, int operationIndex = 0);

        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Create an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        ApiResponse<ServiceDocsAccountGetSingle> V1AccountPostWithHttpInfo(ServiceVOIPAccountAddData account, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Sub Account List
        /// </summary>
        /// <remarks>
        /// Conveniently access the list of children accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetAll> V1AccountAccountidChildrenGetAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Sub Account List
        /// </summary>
        /// <remarks>
        /// Conveniently access the list of children accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetAll>> V1AccountAccountidChildrenGetWithHttpInfoAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Account
        /// </summary>
        /// <remarks>
        /// Delete an account within your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidDeleteAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Account
        /// </summary>
        /// <remarks>
        /// Delete an account within your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidDeleteWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Account DNS Record
        /// </summary>
        /// <remarks>
        /// Get the DNS record of an account from the Route 53 entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account DNS Record
        /// </summary>
        /// <remarks>
        /// Get the DNS record of an account from the Route 53 entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidDnsrecordGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Account DNS Record
        /// </summary>
        /// <remarks>
        /// Create the DNS record of an account with the help realm in the Route 53 entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordPostAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Account DNS Record
        /// </summary>
        /// <remarks>
        /// Create the DNS record of an account with the help realm in the Route 53 entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidDnsrecordPostWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Convert Account DNS Record
        /// </summary>
        /// <remarks>
        /// Toggle the realm DNS record between srv and cname.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="dnsrecord">record type fields with value SRV, CNAME</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordPutAsync(string accountid, ServiceUpdateRecordTypeForAccount dnsrecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Convert Account DNS Record
        /// </summary>
        /// <remarks>
        /// Toggle the realm DNS record between srv and cname.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="dnsrecord">record type fields with value SRV, CNAME</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidDnsrecordPutWithHttpInfoAsync(string accountid, ServiceUpdateRecordTypeForAccount dnsrecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Account Limits
        /// </summary>
        /// <remarks>
        /// Check the maximum number of inbound, outbound, and two-way trunks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountLimit</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountLimit> V1AccountAccountidLimitGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Limits
        /// </summary>
        /// <remarks>
        /// Check the maximum number of inbound, outbound, and two-way trunks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountLimit)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountLimit>> V1AccountAccountidLimitGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Set Account Limits
        /// </summary>
        /// <remarks>
        /// Apply parameters to restrict access to inbound, outbound, and two-way trunks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="limit">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountLimit</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountLimit> V1AccountAccountidLimitPutAsync(string accountid, ServiceVOIPAccountLimit2 limit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Account Limits
        /// </summary>
        /// <remarks>
        /// Apply parameters to restrict access to inbound, outbound, and two-way trunks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="limit">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountLimit)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountLimit>> V1AccountAccountidLimitPutWithHttpInfoAsync(string accountid, ServiceVOIPAccountLimit2 limit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Sub Account
        /// </summary>
        /// <remarks>
        /// Establish a sub account to enable an administrator within your organization to create accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidPostAsync(string accountid, ServiceVOIPAccountAddData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Sub Account
        /// </summary>
        /// <remarks>
        /// Establish a sub account to enable an administrator within your organization to create accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidPostWithHttpInfoAsync(string accountid, ServiceVOIPAccountAddData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Account Provisioning Details
        /// </summary>
        /// <remarks>
        /// Get the provisioning details of an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountProvisioning</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountProvisioning> V1AccountAccountidProvisioningdetailsGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Provisioning Details
        /// </summary>
        /// <remarks>
        /// Get the provisioning details of an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountProvisioning)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountProvisioning>> V1AccountAccountidProvisioningdetailsGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Reset the provisioning details password.
        /// </summary>
        /// <remarks>
        /// Reset the existing provisioning details password and set it to a new one.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountProvisioning</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountProvisioning> V1AccountAccountidProvisioningdetailsResetpwPutAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset the provisioning details password.
        /// </summary>
        /// <remarks>
        /// Reset the existing provisioning details password and set it to a new one.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountProvisioning)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountProvisioning>> V1AccountAccountidProvisioningdetailsResetpwPutWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Modify pertinent account data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidPutAsync(string accountid, ServiceVOIPAccountEditData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Modify pertinent account data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidPutWithHttpInfoAsync(string accountid, ServiceVOIPAccountEditData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountAPIKey</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountAPIKey> V1AccountApikeyGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountAPIKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountAPIKey>> V1AccountApikeyGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Account List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all CPaaS accounts that exist within your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetAll> V1AccountGetAsync(string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account List
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all CPaaS accounts that exist within your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetAll>> V1AccountGetWithHttpInfoAsync(string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Create an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountPostAsync(ServiceVOIPAccountAddData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Create an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsAccountGetSingle>> V1AccountPostWithHttpInfoAsync(ServiceVOIPAccountAddData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IAccountApiSync, IAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Sub Account List Conveniently access the list of children accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetAll</returns>
        public ServiceDocsAccountGetAll V1AccountAccountidChildrenGet(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetAll> localVarResponse = V1AccountAccountidChildrenGetWithHttpInfo(accountid, startKey, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sub Account List Conveniently access the list of children accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetAll> V1AccountAccountidChildrenGetWithHttpInfo(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidChildrenGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidChildrenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsAccountGetAll>("/v1/account/{accountid}/children", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidChildrenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Sub Account List Conveniently access the list of children accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetAll> V1AccountAccountidChildrenGetAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetAll> localVarResponse = await V1AccountAccountidChildrenGetWithHttpInfoAsync(accountid, startKey, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sub Account List Conveniently access the list of children accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetAll>> V1AccountAccountidChildrenGetWithHttpInfoAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidChildrenGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidChildrenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsAccountGetAll>("/v1/account/{accountid}/children", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidChildrenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Account Delete an account within your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        public ServiceDocsAccountGetSingle V1AccountAccountidDelete(string accountid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = V1AccountAccountidDeleteWithHttpInfo(accountid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Account Delete an account within your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidDeleteWithHttpInfo(string accountid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsAccountGetSingle>("/v1/account/{accountid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Account Delete an account within your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidDeleteAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = await V1AccountAccountidDeleteWithHttpInfoAsync(accountid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Account Delete an account within your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidDeleteWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsAccountGetSingle>("/v1/account/{accountid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account DNS Record Get the DNS record of an account from the Route 53 entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        public ServiceDocsAccountGetSingle V1AccountAccountidDnsrecordGet(string accountid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = V1AccountAccountidDnsrecordGetWithHttpInfo(accountid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account DNS Record Get the DNS record of an account from the Route 53 entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordGetWithHttpInfo(string accountid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidDnsrecordGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidDnsrecordGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsAccountGetSingle>("/v1/account/{accountid}/dnsrecord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDnsrecordGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account DNS Record Get the DNS record of an account from the Route 53 entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = await V1AccountAccountidDnsrecordGetWithHttpInfoAsync(accountid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account DNS Record Get the DNS record of an account from the Route 53 entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidDnsrecordGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidDnsrecordGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidDnsrecordGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsAccountGetSingle>("/v1/account/{accountid}/dnsrecord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDnsrecordGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Account DNS Record Create the DNS record of an account with the help realm in the Route 53 entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        public ServiceDocsAccountGetSingle V1AccountAccountidDnsrecordPost(string accountid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = V1AccountAccountidDnsrecordPostWithHttpInfo(accountid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Account DNS Record Create the DNS record of an account with the help realm in the Route 53 entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordPostWithHttpInfo(string accountid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidDnsrecordPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidDnsrecordPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsAccountGetSingle>("/v1/account/{accountid}/dnsrecord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDnsrecordPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Account DNS Record Create the DNS record of an account with the help realm in the Route 53 entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordPostAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = await V1AccountAccountidDnsrecordPostWithHttpInfoAsync(accountid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Account DNS Record Create the DNS record of an account with the help realm in the Route 53 entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidDnsrecordPostWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidDnsrecordPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidDnsrecordPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsAccountGetSingle>("/v1/account/{accountid}/dnsrecord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDnsrecordPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Account DNS Record Toggle the realm DNS record between srv and cname.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="dnsrecord">record type fields with value SRV, CNAME</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        public ServiceDocsAccountGetSingle V1AccountAccountidDnsrecordPut(string accountid, ServiceUpdateRecordTypeForAccount dnsrecord, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = V1AccountAccountidDnsrecordPutWithHttpInfo(accountid, dnsrecord);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Account DNS Record Toggle the realm DNS record between srv and cname.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="dnsrecord">record type fields with value SRV, CNAME</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordPutWithHttpInfo(string accountid, ServiceUpdateRecordTypeForAccount dnsrecord, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidDnsrecordPut");
            }

            // verify the required parameter 'dnsrecord' is set
            if (dnsrecord == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dnsrecord' when calling AccountApi->V1AccountAccountidDnsrecordPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = dnsrecord;

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidDnsrecordPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsAccountGetSingle>("/v1/account/{accountid}/dnsrecord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDnsrecordPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Account DNS Record Toggle the realm DNS record between srv and cname.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="dnsrecord">record type fields with value SRV, CNAME</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidDnsrecordPutAsync(string accountid, ServiceUpdateRecordTypeForAccount dnsrecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = await V1AccountAccountidDnsrecordPutWithHttpInfoAsync(accountid, dnsrecord, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Account DNS Record Toggle the realm DNS record between srv and cname.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="dnsrecord">record type fields with value SRV, CNAME</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidDnsrecordPutWithHttpInfoAsync(string accountid, ServiceUpdateRecordTypeForAccount dnsrecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidDnsrecordPut");
            }

            // verify the required parameter 'dnsrecord' is set
            if (dnsrecord == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dnsrecord' when calling AccountApi->V1AccountAccountidDnsrecordPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = dnsrecord;

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidDnsrecordPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsAccountGetSingle>("/v1/account/{accountid}/dnsrecord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidDnsrecordPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Details This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        public ServiceDocsAccountGetSingle V1AccountAccountidGet(string accountid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = V1AccountAccountidGetWithHttpInfo(accountid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Details This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidGetWithHttpInfo(string accountid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsAccountGetSingle>("/v1/account/{accountid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Details This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = await V1AccountAccountidGetWithHttpInfoAsync(accountid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Details This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsAccountGetSingle>("/v1/account/{accountid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Limits Check the maximum number of inbound, outbound, and two-way trunks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountLimit</returns>
        public ServiceDocsAccountLimit V1AccountAccountidLimitGet(string accountid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountLimit> localVarResponse = V1AccountAccountidLimitGetWithHttpInfo(accountid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Limits Check the maximum number of inbound, outbound, and two-way trunks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountLimit</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountLimit> V1AccountAccountidLimitGetWithHttpInfo(string accountid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidLimitGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidLimitGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsAccountLimit>("/v1/account/{accountid}/limit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidLimitGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Limits Check the maximum number of inbound, outbound, and two-way trunks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountLimit</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountLimit> V1AccountAccountidLimitGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountLimit> localVarResponse = await V1AccountAccountidLimitGetWithHttpInfoAsync(accountid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Limits Check the maximum number of inbound, outbound, and two-way trunks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountLimit)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountLimit>> V1AccountAccountidLimitGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidLimitGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidLimitGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsAccountLimit>("/v1/account/{accountid}/limit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidLimitGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Account Limits Apply parameters to restrict access to inbound, outbound, and two-way trunks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="limit">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountLimit</returns>
        public ServiceDocsAccountLimit V1AccountAccountidLimitPut(string accountid, ServiceVOIPAccountLimit2 limit, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountLimit> localVarResponse = V1AccountAccountidLimitPutWithHttpInfo(accountid, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Account Limits Apply parameters to restrict access to inbound, outbound, and two-way trunks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="limit">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountLimit</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountLimit> V1AccountAccountidLimitPutWithHttpInfo(string accountid, ServiceVOIPAccountLimit2 limit, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidLimitPut");
            }

            // verify the required parameter 'limit' is set
            if (limit == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'limit' when calling AccountApi->V1AccountAccountidLimitPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = limit;

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidLimitPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsAccountLimit>("/v1/account/{accountid}/limit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidLimitPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Account Limits Apply parameters to restrict access to inbound, outbound, and two-way trunks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="limit">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountLimit</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountLimit> V1AccountAccountidLimitPutAsync(string accountid, ServiceVOIPAccountLimit2 limit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountLimit> localVarResponse = await V1AccountAccountidLimitPutWithHttpInfoAsync(accountid, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Account Limits Apply parameters to restrict access to inbound, outbound, and two-way trunks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="limit">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountLimit)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountLimit>> V1AccountAccountidLimitPutWithHttpInfoAsync(string accountid, ServiceVOIPAccountLimit2 limit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidLimitPut");
            }

            // verify the required parameter 'limit' is set
            if (limit == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'limit' when calling AccountApi->V1AccountAccountidLimitPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = limit;

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidLimitPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsAccountLimit>("/v1/account/{accountid}/limit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidLimitPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Sub Account Establish a sub account to enable an administrator within your organization to create accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        public ServiceDocsAccountGetSingle V1AccountAccountidPost(string accountid, ServiceVOIPAccountAddData account, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = V1AccountAccountidPostWithHttpInfo(accountid, account);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Sub Account Establish a sub account to enable an administrator within your organization to create accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidPostWithHttpInfo(string accountid, ServiceVOIPAccountAddData account, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidPost");
            }

            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'account' when calling AccountApi->V1AccountAccountidPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = account;

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsAccountGetSingle>("/v1/account/{accountid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Sub Account Establish a sub account to enable an administrator within your organization to create accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidPostAsync(string accountid, ServiceVOIPAccountAddData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = await V1AccountAccountidPostWithHttpInfoAsync(accountid, account, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Sub Account Establish a sub account to enable an administrator within your organization to create accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidPostWithHttpInfoAsync(string accountid, ServiceVOIPAccountAddData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidPost");
            }

            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'account' when calling AccountApi->V1AccountAccountidPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = account;

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsAccountGetSingle>("/v1/account/{accountid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Provisioning Details Get the provisioning details of an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountProvisioning</returns>
        public ServiceDocsAccountProvisioning V1AccountAccountidProvisioningdetailsGet(string accountid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountProvisioning> localVarResponse = V1AccountAccountidProvisioningdetailsGetWithHttpInfo(accountid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Provisioning Details Get the provisioning details of an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountProvisioning</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountProvisioning> V1AccountAccountidProvisioningdetailsGetWithHttpInfo(string accountid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidProvisioningdetailsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidProvisioningdetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsAccountProvisioning>("/v1/account/{accountid}/provisioningdetails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidProvisioningdetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Provisioning Details Get the provisioning details of an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountProvisioning</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountProvisioning> V1AccountAccountidProvisioningdetailsGetAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountProvisioning> localVarResponse = await V1AccountAccountidProvisioningdetailsGetWithHttpInfoAsync(accountid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Provisioning Details Get the provisioning details of an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountProvisioning)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountProvisioning>> V1AccountAccountidProvisioningdetailsGetWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidProvisioningdetailsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidProvisioningdetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsAccountProvisioning>("/v1/account/{accountid}/provisioningdetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidProvisioningdetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the provisioning details password. Reset the existing provisioning details password and set it to a new one.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountProvisioning</returns>
        public ServiceDocsAccountProvisioning V1AccountAccountidProvisioningdetailsResetpwPut(string accountid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountProvisioning> localVarResponse = V1AccountAccountidProvisioningdetailsResetpwPutWithHttpInfo(accountid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the provisioning details password. Reset the existing provisioning details password and set it to a new one.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountProvisioning</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountProvisioning> V1AccountAccountidProvisioningdetailsResetpwPutWithHttpInfo(string accountid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidProvisioningdetailsResetpwPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidProvisioningdetailsResetpwPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsAccountProvisioning>("/v1/account/{accountid}/provisioningdetails/resetpw", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidProvisioningdetailsResetpwPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the provisioning details password. Reset the existing provisioning details password and set it to a new one.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountProvisioning</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountProvisioning> V1AccountAccountidProvisioningdetailsResetpwPutAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountProvisioning> localVarResponse = await V1AccountAccountidProvisioningdetailsResetpwPutWithHttpInfoAsync(accountid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the provisioning details password. Reset the existing provisioning details password and set it to a new one.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountProvisioning)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountProvisioning>> V1AccountAccountidProvisioningdetailsResetpwPutWithHttpInfoAsync(string accountid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidProvisioningdetailsResetpwPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidProvisioningdetailsResetpwPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsAccountProvisioning>("/v1/account/{accountid}/provisioningdetails/resetpw", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidProvisioningdetailsResetpwPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Account Modify pertinent account data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        public ServiceDocsAccountGetSingle V1AccountAccountidPut(string accountid, ServiceVOIPAccountEditData account, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = V1AccountAccountidPutWithHttpInfo(accountid, account);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Account Modify pertinent account data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> V1AccountAccountidPutWithHttpInfo(string accountid, ServiceVOIPAccountEditData account, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidPut");
            }

            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'account' when calling AccountApi->V1AccountAccountidPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = account;

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsAccountGetSingle>("/v1/account/{accountid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Account Modify pertinent account data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountAccountidPutAsync(string accountid, ServiceVOIPAccountEditData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = await V1AccountAccountidPutWithHttpInfoAsync(accountid, account, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Account Modify pertinent account data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle>> V1AccountAccountidPutWithHttpInfoAsync(string accountid, ServiceVOIPAccountEditData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling AccountApi->V1AccountAccountidPut");
            }

            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'account' when calling AccountApi->V1AccountAccountidPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = account;

            localVarRequestOptions.Operation = "AccountApi.V1AccountAccountidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsAccountGetSingle>("/v1/account/{accountid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountAPIKey</returns>
        public ServiceDocsAccountAPIKey V1AccountApikeyGet(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountAPIKey> localVarResponse = V1AccountApikeyGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountAPIKey</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountAPIKey> V1AccountApikeyGetWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.V1AccountApikeyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsAccountAPIKey>("/v1/account/apikey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountApikeyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountAPIKey</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountAPIKey> V1AccountApikeyGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountAPIKey> localVarResponse = await V1AccountApikeyGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountAPIKey)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountAPIKey>> V1AccountApikeyGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.V1AccountApikeyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsAccountAPIKey>("/v1/account/apikey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountApikeyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account List Retrieve a list of all CPaaS accounts that exist within your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetAll</returns>
        public ServiceDocsAccountGetAll V1AccountGet(string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetAll> localVarResponse = V1AccountGetWithHttpInfo(startKey, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account List Retrieve a list of all CPaaS accounts that exist within your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetAll> V1AccountGetWithHttpInfo(string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "AccountApi.V1AccountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsAccountGetAll>("/v1/account", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account List Retrieve a list of all CPaaS accounts that exist within your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetAll> V1AccountGetAsync(string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetAll> localVarResponse = await V1AccountGetWithHttpInfoAsync(startKey, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account List Retrieve a list of all CPaaS accounts that exist within your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetAll>> V1AccountGetWithHttpInfoAsync(string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "AccountApi.V1AccountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsAccountGetAll>("/v1/account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Account Create an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsAccountGetSingle</returns>
        public ServiceDocsAccountGetSingle V1AccountPost(ServiceVOIPAccountAddData account, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = V1AccountPostWithHttpInfo(account);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Account Create an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsAccountGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> V1AccountPostWithHttpInfo(ServiceVOIPAccountAddData account, int operationIndex = 0)
        {
            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'account' when calling AccountApi->V1AccountPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = account;

            localVarRequestOptions.Operation = "AccountApi.V1AccountPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsAccountGetSingle>("/v1/account", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Account Create an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsAccountGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsAccountGetSingle> V1AccountPostAsync(ServiceVOIPAccountAddData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle> localVarResponse = await V1AccountPostWithHttpInfoAsync(account, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Account Create an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsAccountGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsAccountGetSingle>> V1AccountPostWithHttpInfoAsync(ServiceVOIPAccountAddData account, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'account' when calling AccountApi->V1AccountPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = account;

            localVarRequestOptions.Operation = "AccountApi.V1AccountPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsAccountGetSingle>("/v1/account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
