/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallflowApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Call Group
        /// </summary>
        /// <remarks>
        /// Delete a callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetSingle</returns>
        ServiceDocsCallflowGetSingle V1AccountAccountIDCallflowCallflowIDDelete(string accountID, string callflowID, int operationIndex = 0);

        /// <summary>
        /// Delete Call Group
        /// </summary>
        /// <remarks>
        /// Delete a callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetSingle</returns>
        ApiResponse<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDDeleteWithHttpInfo(string accountID, string callflowID, int operationIndex = 0);
        /// <summary>
        /// Get Call Group Details
        /// </summary>
        /// <remarks>
        /// Get the details for a single callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetSingle</returns>
        ServiceDocsCallflowGetSingle V1AccountAccountIDCallflowCallflowIDGet(string accountID, string callflowID, int operationIndex = 0);

        /// <summary>
        /// Get Call Group Details
        /// </summary>
        /// <remarks>
        /// Get the details for a single callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetSingle</returns>
        ApiResponse<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDGetWithHttpInfo(string accountID, string callflowID, int operationIndex = 0);
        /// <summary>
        /// Update Call Group
        /// </summary>
        /// <remarks>
        /// Update the details for a single callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetSingle</returns>
        ServiceDocsCallflowGetSingle V1AccountAccountIDCallflowCallflowIDPut(string accountID, string callflowID, ServiceCallflowAddEditData reqBody, int operationIndex = 0);

        /// <summary>
        /// Update Call Group
        /// </summary>
        /// <remarks>
        /// Update the details for a single callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetSingle</returns>
        ApiResponse<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDPutWithHttpInfo(string accountID, string callflowID, ServiceCallflowAddEditData reqBody, int operationIndex = 0);
        /// <summary>
        /// Get Callflow List
        /// </summary>
        /// <remarks>
        /// Permit a user to view the callflow details in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetAll</returns>
        ServiceDocsCallflowGetAll V1AccountAccountIDCallflowGet(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// Get Callflow List
        /// </summary>
        /// <remarks>
        /// Permit a user to view the callflow details in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetAll</returns>
        ApiResponse<ServiceDocsCallflowGetAll> V1AccountAccountIDCallflowGetWithHttpInfo(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0);
        /// <summary>
        /// Create Call Group
        /// </summary>
        /// <remarks>
        /// Create instructions for routing a call to a user or system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha-numeric</param>
        /// <param name="request">Call flow configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetSingle</returns>
        ServiceDocsCallflowGetSingle V1AccountAccountIDCallflowPost(string accountID, ServiceCallflowAddEditData request, int operationIndex = 0);

        /// <summary>
        /// Create Call Group
        /// </summary>
        /// <remarks>
        /// Create instructions for routing a call to a user or system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha-numeric</param>
        /// <param name="request">Call flow configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetSingle</returns>
        ApiResponse<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowPostWithHttpInfo(string accountID, ServiceCallflowAddEditData request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallflowApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Call Group
        /// </summary>
        /// <remarks>
        /// Delete a callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDDeleteAsync(string accountID, string callflowID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Call Group
        /// </summary>
        /// <remarks>
        /// Delete a callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallflowGetSingle>> V1AccountAccountIDCallflowCallflowIDDeleteWithHttpInfoAsync(string accountID, string callflowID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Call Group Details
        /// </summary>
        /// <remarks>
        /// Get the details for a single callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDGetAsync(string accountID, string callflowID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Call Group Details
        /// </summary>
        /// <remarks>
        /// Get the details for a single callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallflowGetSingle>> V1AccountAccountIDCallflowCallflowIDGetWithHttpInfoAsync(string accountID, string callflowID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Call Group
        /// </summary>
        /// <remarks>
        /// Update the details for a single callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDPutAsync(string accountID, string callflowID, ServiceCallflowAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Call Group
        /// </summary>
        /// <remarks>
        /// Update the details for a single callflow in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallflowGetSingle>> V1AccountAccountIDCallflowCallflowIDPutWithHttpInfoAsync(string accountID, string callflowID, ServiceCallflowAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Callflow List
        /// </summary>
        /// <remarks>
        /// Permit a user to view the callflow details in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsCallflowGetAll> V1AccountAccountIDCallflowGetAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Callflow List
        /// </summary>
        /// <remarks>
        /// Permit a user to view the callflow details in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallflowGetAll>> V1AccountAccountIDCallflowGetWithHttpInfoAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Call Group
        /// </summary>
        /// <remarks>
        /// Create instructions for routing a call to a user or system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha-numeric</param>
        /// <param name="request">Call flow configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowPostAsync(string accountID, ServiceCallflowAddEditData request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Call Group
        /// </summary>
        /// <remarks>
        /// Create instructions for routing a call to a user or system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha-numeric</param>
        /// <param name="request">Call flow configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallflowGetSingle>> V1AccountAccountIDCallflowPostWithHttpInfoAsync(string accountID, ServiceCallflowAddEditData request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallflowApi : ICallflowApiSync, ICallflowApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallflowApi : ICallflowApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallflowApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallflowApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallflowApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CallflowApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Call Group Delete a callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetSingle</returns>
        public ServiceDocsCallflowGetSingle V1AccountAccountIDCallflowCallflowIDDelete(string accountID, string callflowID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> localVarResponse = V1AccountAccountIDCallflowCallflowIDDeleteWithHttpInfo(accountID, callflowID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Call Group Delete a callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDDeleteWithHttpInfo(string accountID, string callflowID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDDelete");
            }

            // verify the required parameter 'callflowID' is set
            if (callflowID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'callflowID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("callflowID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(callflowID)); // path parameter

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowCallflowIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsCallflowGetSingle>("/v1/account/{accountID}/callflow/{callflowID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowCallflowIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Call Group Delete a callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDDeleteAsync(string accountID, string callflowID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> localVarResponse = await V1AccountAccountIDCallflowCallflowIDDeleteWithHttpInfoAsync(accountID, callflowID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Call Group Delete a callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle>> V1AccountAccountIDCallflowCallflowIDDeleteWithHttpInfoAsync(string accountID, string callflowID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDDelete");
            }

            // verify the required parameter 'callflowID' is set
            if (callflowID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'callflowID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("callflowID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(callflowID)); // path parameter

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowCallflowIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsCallflowGetSingle>("/v1/account/{accountID}/callflow/{callflowID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowCallflowIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Group Details Get the details for a single callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetSingle</returns>
        public ServiceDocsCallflowGetSingle V1AccountAccountIDCallflowCallflowIDGet(string accountID, string callflowID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> localVarResponse = V1AccountAccountIDCallflowCallflowIDGetWithHttpInfo(accountID, callflowID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Group Details Get the details for a single callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDGetWithHttpInfo(string accountID, string callflowID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDGet");
            }

            // verify the required parameter 'callflowID' is set
            if (callflowID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'callflowID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("callflowID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(callflowID)); // path parameter

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowCallflowIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallflowGetSingle>("/v1/account/{accountID}/callflow/{callflowID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowCallflowIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Group Details Get the details for a single callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDGetAsync(string accountID, string callflowID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> localVarResponse = await V1AccountAccountIDCallflowCallflowIDGetWithHttpInfoAsync(accountID, callflowID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Group Details Get the details for a single callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle>> V1AccountAccountIDCallflowCallflowIDGetWithHttpInfoAsync(string accountID, string callflowID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDGet");
            }

            // verify the required parameter 'callflowID' is set
            if (callflowID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'callflowID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("callflowID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(callflowID)); // path parameter

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowCallflowIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallflowGetSingle>("/v1/account/{accountID}/callflow/{callflowID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowCallflowIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Call Group Update the details for a single callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetSingle</returns>
        public ServiceDocsCallflowGetSingle V1AccountAccountIDCallflowCallflowIDPut(string accountID, string callflowID, ServiceCallflowAddEditData reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> localVarResponse = V1AccountAccountIDCallflowCallflowIDPutWithHttpInfo(accountID, callflowID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Group Update the details for a single callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDPutWithHttpInfo(string accountID, string callflowID, ServiceCallflowAddEditData reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDPut");
            }

            // verify the required parameter 'callflowID' is set
            if (callflowID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'callflowID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("callflowID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(callflowID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowCallflowIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsCallflowGetSingle>("/v1/account/{accountID}/callflow/{callflowID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowCallflowIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Call Group Update the details for a single callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowCallflowIDPutAsync(string accountID, string callflowID, ServiceCallflowAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> localVarResponse = await V1AccountAccountIDCallflowCallflowIDPutWithHttpInfoAsync(accountID, callflowID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Group Update the details for a single callflow in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="callflowID">Callflow ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle>> V1AccountAccountIDCallflowCallflowIDPutWithHttpInfoAsync(string accountID, string callflowID, ServiceCallflowAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDPut");
            }

            // verify the required parameter 'callflowID' is set
            if (callflowID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'callflowID' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CallflowApi->V1AccountAccountIDCallflowCallflowIDPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("callflowID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(callflowID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowCallflowIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsCallflowGetSingle>("/v1/account/{accountID}/callflow/{callflowID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowCallflowIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Callflow List Permit a user to view the callflow details in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetAll</returns>
        public ServiceDocsCallflowGetAll V1AccountAccountIDCallflowGet(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetAll> localVarResponse = V1AccountAccountIDCallflowGetWithHttpInfo(accountID, startKey, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Callflow List Permit a user to view the callflow details in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetAll> V1AccountAccountIDCallflowGetWithHttpInfo(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallflowGetAll>("/v1/account/{accountID}/callflow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Callflow List Permit a user to view the callflow details in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallflowGetAll> V1AccountAccountIDCallflowGetAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetAll> localVarResponse = await V1AccountAccountIDCallflowGetWithHttpInfoAsync(accountID, startKey, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Callflow List Permit a user to view the callflow details in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetAll>> V1AccountAccountIDCallflowGetWithHttpInfoAsync(string accountID, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallflowGetAll>("/v1/account/{accountID}/callflow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Call Group Create instructions for routing a call to a user or system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha-numeric</param>
        /// <param name="request">Call flow configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallflowGetSingle</returns>
        public ServiceDocsCallflowGetSingle V1AccountAccountIDCallflowPost(string accountID, ServiceCallflowAddEditData request, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> localVarResponse = V1AccountAccountIDCallflowPostWithHttpInfo(accountID, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Group Create instructions for routing a call to a user or system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha-numeric</param>
        /// <param name="request">Call flow configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallflowGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowPostWithHttpInfo(string accountID, ServiceCallflowAddEditData request, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowPost");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'request' when calling CallflowApi->V1AccountAccountIDCallflowPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsCallflowGetSingle>("/v1/account/{accountID}/callflow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Call Group Create instructions for routing a call to a user or system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha-numeric</param>
        /// <param name="request">Call flow configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallflowGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallflowGetSingle> V1AccountAccountIDCallflowPostAsync(string accountID, ServiceCallflowAddEditData request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle> localVarResponse = await V1AccountAccountIDCallflowPostWithHttpInfoAsync(accountID, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Group Create instructions for routing a call to a user or system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha-numeric</param>
        /// <param name="request">Call flow configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallflowGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallflowGetSingle>> V1AccountAccountIDCallflowPostWithHttpInfoAsync(string accountID, ServiceCallflowAddEditData request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallflowApi->V1AccountAccountIDCallflowPost");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'request' when calling CallflowApi->V1AccountAccountIDCallflowPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "CallflowApi.V1AccountAccountIDCallflowPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsCallflowGetSingle>("/v1/account/{accountID}/callflow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallflowPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
