/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallRecordingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Account Call Recording
        /// </summary>
        /// <remarks>
        /// Obtain a list of the call recordings within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallRecordingGetAll</returns>
        ServiceDocsCallRecordingGetAll V1AccountAccountIDRecordingGet(string accountID, int operationIndex = 0);

        /// <summary>
        /// Get Account Call Recording
        /// </summary>
        /// <remarks>
        /// Obtain a list of the call recordings within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallRecordingGetAll</returns>
        ApiResponse<ServiceDocsCallRecordingGetAll> V1AccountAccountIDRecordingGetWithHttpInfo(string accountID, int operationIndex = 0);
        /// <summary>
        /// Delete Call Recording
        /// </summary>
        /// <remarks>
        /// Delete a single call recording from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallRecordingGetSingle</returns>
        ServiceDocsCallRecordingGetSingle V1AccountAccountIDRecordingRecordingIDDelete(string accountID, string recordingID, int operationIndex = 0);

        /// <summary>
        /// Delete Call Recording
        /// </summary>
        /// <remarks>
        /// Delete a single call recording from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallRecordingGetSingle</returns>
        ApiResponse<ServiceDocsCallRecordingGetSingle> V1AccountAccountIDRecordingRecordingIDDeleteWithHttpInfo(string accountID, string recordingID, int operationIndex = 0);
        /// <summary>
        /// Get Call Recording Details
        /// </summary>
        /// <remarks>
        /// Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallRecordingGetSingle</returns>
        ServiceDocsCallRecordingGetSingle V1AccountAccountIDRecordingRecordingIDGet(string accountID, string recordingID, int operationIndex = 0);

        /// <summary>
        /// Get Call Recording Details
        /// </summary>
        /// <remarks>
        /// Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallRecordingGetSingle</returns>
        ApiResponse<ServiceDocsCallRecordingGetSingle> V1AccountAccountIDRecordingRecordingIDGetWithHttpInfo(string accountID, string recordingID, int operationIndex = 0);
        /// <summary>
        /// Get User Call Recording
        /// </summary>
        /// <remarks>
        /// Retrieve a list of call recordings for a user within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallRecordingGetAll</returns>
        ServiceDocsCallRecordingGetAll V1AccountAccountIDUserUserIDRecordingGet(string accountID, string userID, int operationIndex = 0);

        /// <summary>
        /// Get User Call Recording
        /// </summary>
        /// <remarks>
        /// Retrieve a list of call recordings for a user within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallRecordingGetAll</returns>
        ApiResponse<ServiceDocsCallRecordingGetAll> V1AccountAccountIDUserUserIDRecordingGetWithHttpInfo(string accountID, string userID, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallRecordingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Account Call Recording
        /// </summary>
        /// <remarks>
        /// Obtain a list of the call recordings within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallRecordingGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsCallRecordingGetAll> V1AccountAccountIDRecordingGetAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Call Recording
        /// </summary>
        /// <remarks>
        /// Obtain a list of the call recordings within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallRecordingGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallRecordingGetAll>> V1AccountAccountIDRecordingGetWithHttpInfoAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Call Recording
        /// </summary>
        /// <remarks>
        /// Delete a single call recording from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallRecordingGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallRecordingGetSingle> V1AccountAccountIDRecordingRecordingIDDeleteAsync(string accountID, string recordingID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Call Recording
        /// </summary>
        /// <remarks>
        /// Delete a single call recording from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallRecordingGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallRecordingGetSingle>> V1AccountAccountIDRecordingRecordingIDDeleteWithHttpInfoAsync(string accountID, string recordingID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Call Recording Details
        /// </summary>
        /// <remarks>
        /// Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallRecordingGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallRecordingGetSingle> V1AccountAccountIDRecordingRecordingIDGetAsync(string accountID, string recordingID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Call Recording Details
        /// </summary>
        /// <remarks>
        /// Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallRecordingGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallRecordingGetSingle>> V1AccountAccountIDRecordingRecordingIDGetWithHttpInfoAsync(string accountID, string recordingID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get User Call Recording
        /// </summary>
        /// <remarks>
        /// Retrieve a list of call recordings for a user within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallRecordingGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsCallRecordingGetAll> V1AccountAccountIDUserUserIDRecordingGetAsync(string accountID, string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Call Recording
        /// </summary>
        /// <remarks>
        /// Retrieve a list of call recordings for a user within an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallRecordingGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallRecordingGetAll>> V1AccountAccountIDUserUserIDRecordingGetWithHttpInfoAsync(string accountID, string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallRecordingApi : ICallRecordingApiSync, ICallRecordingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallRecordingApi : ICallRecordingApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecordingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallRecordingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecordingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallRecordingApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecordingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallRecordingApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecordingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CallRecordingApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Account Call Recording Obtain a list of the call recordings within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallRecordingGetAll</returns>
        public ServiceDocsCallRecordingGetAll V1AccountAccountIDRecordingGet(string accountID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetAll> localVarResponse = V1AccountAccountIDRecordingGetWithHttpInfo(accountID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Call Recording Obtain a list of the call recordings within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallRecordingGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetAll> V1AccountAccountIDRecordingGetWithHttpInfo(string accountID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallRecordingApi->V1AccountAccountIDRecordingGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            localVarRequestOptions.Operation = "CallRecordingApi.V1AccountAccountIDRecordingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallRecordingGetAll>("/v1/account/{accountID}/recording", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDRecordingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Call Recording Obtain a list of the call recordings within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallRecordingGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallRecordingGetAll> V1AccountAccountIDRecordingGetAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetAll> localVarResponse = await V1AccountAccountIDRecordingGetWithHttpInfoAsync(accountID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Call Recording Obtain a list of the call recordings within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallRecordingGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetAll>> V1AccountAccountIDRecordingGetWithHttpInfoAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallRecordingApi->V1AccountAccountIDRecordingGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            localVarRequestOptions.Operation = "CallRecordingApi.V1AccountAccountIDRecordingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallRecordingGetAll>("/v1/account/{accountID}/recording", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDRecordingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Call Recording Delete a single call recording from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallRecordingGetSingle</returns>
        public ServiceDocsCallRecordingGetSingle V1AccountAccountIDRecordingRecordingIDDelete(string accountID, string recordingID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetSingle> localVarResponse = V1AccountAccountIDRecordingRecordingIDDeleteWithHttpInfo(accountID, recordingID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Call Recording Delete a single call recording from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallRecordingGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetSingle> V1AccountAccountIDRecordingRecordingIDDeleteWithHttpInfo(string accountID, string recordingID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallRecordingApi->V1AccountAccountIDRecordingRecordingIDDelete");
            }

            // verify the required parameter 'recordingID' is set
            if (recordingID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'recordingID' when calling CallRecordingApi->V1AccountAccountIDRecordingRecordingIDDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(recordingID)); // path parameter

            localVarRequestOptions.Operation = "CallRecordingApi.V1AccountAccountIDRecordingRecordingIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsCallRecordingGetSingle>("/v1/account/{accountID}/recording/{recordingID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDRecordingRecordingIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Call Recording Delete a single call recording from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallRecordingGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallRecordingGetSingle> V1AccountAccountIDRecordingRecordingIDDeleteAsync(string accountID, string recordingID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetSingle> localVarResponse = await V1AccountAccountIDRecordingRecordingIDDeleteWithHttpInfoAsync(accountID, recordingID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Call Recording Delete a single call recording from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallRecordingGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetSingle>> V1AccountAccountIDRecordingRecordingIDDeleteWithHttpInfoAsync(string accountID, string recordingID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallRecordingApi->V1AccountAccountIDRecordingRecordingIDDelete");
            }

            // verify the required parameter 'recordingID' is set
            if (recordingID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'recordingID' when calling CallRecordingApi->V1AccountAccountIDRecordingRecordingIDDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(recordingID)); // path parameter

            localVarRequestOptions.Operation = "CallRecordingApi.V1AccountAccountIDRecordingRecordingIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsCallRecordingGetSingle>("/v1/account/{accountID}/recording/{recordingID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDRecordingRecordingIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Recording Details Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallRecordingGetSingle</returns>
        public ServiceDocsCallRecordingGetSingle V1AccountAccountIDRecordingRecordingIDGet(string accountID, string recordingID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetSingle> localVarResponse = V1AccountAccountIDRecordingRecordingIDGetWithHttpInfo(accountID, recordingID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recording Details Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallRecordingGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetSingle> V1AccountAccountIDRecordingRecordingIDGetWithHttpInfo(string accountID, string recordingID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallRecordingApi->V1AccountAccountIDRecordingRecordingIDGet");
            }

            // verify the required parameter 'recordingID' is set
            if (recordingID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'recordingID' when calling CallRecordingApi->V1AccountAccountIDRecordingRecordingIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "audio/mp3",
                "audio/mpeg",
                "audio/mpeg3",
                "audio/x-wav",
                "audio/wav"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(recordingID)); // path parameter

            localVarRequestOptions.Operation = "CallRecordingApi.V1AccountAccountIDRecordingRecordingIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallRecordingGetSingle>("/v1/account/{accountID}/recording/{recordingID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDRecordingRecordingIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Recording Details Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallRecordingGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallRecordingGetSingle> V1AccountAccountIDRecordingRecordingIDGetAsync(string accountID, string recordingID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetSingle> localVarResponse = await V1AccountAccountIDRecordingRecordingIDGetWithHttpInfoAsync(accountID, recordingID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recording Details Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="recordingID">Recording ID, 39 (yyyymm-&lt;32 id&gt;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallRecordingGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetSingle>> V1AccountAccountIDRecordingRecordingIDGetWithHttpInfoAsync(string accountID, string recordingID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallRecordingApi->V1AccountAccountIDRecordingRecordingIDGet");
            }

            // verify the required parameter 'recordingID' is set
            if (recordingID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'recordingID' when calling CallRecordingApi->V1AccountAccountIDRecordingRecordingIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "audio/mp3",
                "audio/mpeg",
                "audio/mpeg3",
                "audio/x-wav",
                "audio/wav"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(recordingID)); // path parameter

            localVarRequestOptions.Operation = "CallRecordingApi.V1AccountAccountIDRecordingRecordingIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallRecordingGetSingle>("/v1/account/{accountID}/recording/{recordingID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDRecordingRecordingIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Call Recording Retrieve a list of call recordings for a user within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallRecordingGetAll</returns>
        public ServiceDocsCallRecordingGetAll V1AccountAccountIDUserUserIDRecordingGet(string accountID, string userID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetAll> localVarResponse = V1AccountAccountIDUserUserIDRecordingGetWithHttpInfo(accountID, userID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Call Recording Retrieve a list of call recordings for a user within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallRecordingGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetAll> V1AccountAccountIDUserUserIDRecordingGetWithHttpInfo(string accountID, string userID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallRecordingApi->V1AccountAccountIDUserUserIDRecordingGet");
            }

            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling CallRecordingApi->V1AccountAccountIDUserUserIDRecordingGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter

            localVarRequestOptions.Operation = "CallRecordingApi.V1AccountAccountIDUserUserIDRecordingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallRecordingGetAll>("/v1/account/{accountID}/user/{userID}/recording", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDUserUserIDRecordingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Call Recording Retrieve a list of call recordings for a user within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallRecordingGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallRecordingGetAll> V1AccountAccountIDUserUserIDRecordingGetAsync(string accountID, string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetAll> localVarResponse = await V1AccountAccountIDUserUserIDRecordingGetWithHttpInfoAsync(accountID, userID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Call Recording Retrieve a list of call recordings for a user within an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="userID">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallRecordingGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallRecordingGetAll>> V1AccountAccountIDUserUserIDRecordingGetWithHttpInfoAsync(string accountID, string userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallRecordingApi->V1AccountAccountIDUserUserIDRecordingGet");
            }

            // verify the required parameter 'userID' is set
            if (userID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userID' when calling CallRecordingApi->V1AccountAccountIDUserUserIDRecordingGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("userID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter

            localVarRequestOptions.Operation = "CallRecordingApi.V1AccountAccountIDUserUserIDRecordingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallRecordingGetAll>("/v1/account/{accountID}/user/{userID}/recording", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDUserUserIDRecordingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
