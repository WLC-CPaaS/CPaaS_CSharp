/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVoIPUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get User List
        /// </summary>
        /// <remarks>
        /// Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetAll</returns>
        ServiceDocsUserGetAll V1AccountAccountidUserGet(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0);

        /// <summary>
        /// Get User List
        /// </summary>
        /// <remarks>
        /// Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetAll</returns>
        ApiResponse<ServiceDocsUserGetAll> V1AccountAccountidUserGetWithHttpInfo(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0);
        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetSingle</returns>
        ServiceDocsUserGetSingle V1AccountAccountidUserPost(string accountid, ServiceVOIPUserAdd2 user, int operationIndex = 0);

        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetSingle</returns>
        ApiResponse<ServiceDocsUserGetSingle> V1AccountAccountidUserPostWithHttpInfo(string accountid, ServiceVOIPUserAdd2 user, int operationIndex = 0);
        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Delete VoIP user access to maintain the security of your accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetSingle</returns>
        ServiceDocsUserGetSingle V1AccountAccountidUserUseridDelete(string accountid, string userid, int operationIndex = 0);

        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Delete VoIP user access to maintain the security of your accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetSingle</returns>
        ApiResponse<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridDeleteWithHttpInfo(string accountid, string userid, int operationIndex = 0);
        /// <summary>
        /// Get User Details
        /// </summary>
        /// <remarks>
        /// View specific user details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetSingle</returns>
        ServiceDocsUserGetSingle V1AccountAccountidUserUseridGet(string accountid, string userid, int operationIndex = 0);

        /// <summary>
        /// Get User Details
        /// </summary>
        /// <remarks>
        /// View specific user details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetSingle</returns>
        ApiResponse<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridGetWithHttpInfo(string accountid, string userid, int operationIndex = 0);
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Keep user information current. Modify the first and last name, extension, and other pertinent information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetSingle</returns>
        ServiceDocsUserGetSingle V1AccountAccountidUserUseridPut(string accountid, string userid, ServiceVOIPUserAdd2 user, int operationIndex = 0);

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Keep user information current. Modify the first and last name, extension, and other pertinent information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetSingle</returns>
        ApiResponse<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridPutWithHttpInfo(string accountid, string userid, ServiceVOIPUserAdd2 user, int operationIndex = 0);
        /// <summary>
        /// Impersonate a User
        /// </summary>
        /// <remarks>
        /// Retrieve a token for making presence calls.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">Payload for impersonate a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsImpersonateUserGetSingle</returns>
        ServiceDocsImpersonateUserGetSingle V1AccountAccountidUserUseridUserauthPost(string accountid, string userid, ServiceVOIPImpersonateUser user, int operationIndex = 0);

        /// <summary>
        /// Impersonate a User
        /// </summary>
        /// <remarks>
        /// Retrieve a token for making presence calls.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">Payload for impersonate a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsImpersonateUserGetSingle</returns>
        ApiResponse<ServiceDocsImpersonateUserGetSingle> V1AccountAccountidUserUseridUserauthPostWithHttpInfo(string accountid, string userid, ServiceVOIPImpersonateUser user, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVoIPUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get User List
        /// </summary>
        /// <remarks>
        /// Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsUserGetAll> V1AccountAccountidUserGetAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User List
        /// </summary>
        /// <remarks>
        /// Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsUserGetAll>> V1AccountAccountidUserGetWithHttpInfoAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsUserGetSingle> V1AccountAccountidUserPostAsync(string accountid, ServiceVOIPUserAdd2 user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsUserGetSingle>> V1AccountAccountidUserPostWithHttpInfoAsync(string accountid, ServiceVOIPUserAdd2 user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Delete VoIP user access to maintain the security of your accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridDeleteAsync(string accountid, string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Delete VoIP user access to maintain the security of your accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsUserGetSingle>> V1AccountAccountidUserUseridDeleteWithHttpInfoAsync(string accountid, string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get User Details
        /// </summary>
        /// <remarks>
        /// View specific user details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridGetAsync(string accountid, string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Details
        /// </summary>
        /// <remarks>
        /// View specific user details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsUserGetSingle>> V1AccountAccountidUserUseridGetWithHttpInfoAsync(string accountid, string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Keep user information current. Modify the first and last name, extension, and other pertinent information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridPutAsync(string accountid, string userid, ServiceVOIPUserAdd2 user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Keep user information current. Modify the first and last name, extension, and other pertinent information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsUserGetSingle>> V1AccountAccountidUserUseridPutWithHttpInfoAsync(string accountid, string userid, ServiceVOIPUserAdd2 user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Impersonate a User
        /// </summary>
        /// <remarks>
        /// Retrieve a token for making presence calls.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">Payload for impersonate a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsImpersonateUserGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsImpersonateUserGetSingle> V1AccountAccountidUserUseridUserauthPostAsync(string accountid, string userid, ServiceVOIPImpersonateUser user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Impersonate a User
        /// </summary>
        /// <remarks>
        /// Retrieve a token for making presence calls.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">Payload for impersonate a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsImpersonateUserGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsImpersonateUserGetSingle>> V1AccountAccountidUserUseridUserauthPostWithHttpInfoAsync(string accountid, string userid, ServiceVOIPImpersonateUser user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVoIPUserApi : IVoIPUserApiSync, IVoIPUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VoIPUserApi : IVoIPUserApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VoIPUserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VoIPUserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoIPUserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VoIPUserApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoIPUserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VoIPUserApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoIPUserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VoIPUserApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get User List Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetAll</returns>
        public ServiceDocsUserGetAll V1AccountAccountidUserGet(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetAll> localVarResponse = V1AccountAccountidUserGetWithHttpInfo(accountid, startKey, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User List Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetAll> V1AccountAccountidUserGetWithHttpInfo(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsUserGetAll>("/v1/account/{accountid}/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User List Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsUserGetAll> V1AccountAccountidUserGetAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetAll> localVarResponse = await V1AccountAccountidUserGetWithHttpInfoAsync(accountid, startKey, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User List Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="startKey">start_key for pagination that was returned as next_start_key from your previous call (optional)</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetAll>> V1AccountAccountidUserGetWithHttpInfoAsync(string accountid, string? startKey = default, int? pageSize = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_key", startKey));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsUserGetAll>("/v1/account/{accountid}/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetSingle</returns>
        public ServiceDocsUserGetSingle V1AccountAccountidUserPost(string accountid, ServiceVOIPUserAdd2 user, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> localVarResponse = V1AccountAccountidUserPostWithHttpInfo(accountid, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create User Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> V1AccountAccountidUserPostWithHttpInfo(string accountid, ServiceVOIPUserAdd2 user, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserPost");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling VoIPUserApi->V1AccountAccountidUserPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsUserGetSingle>("/v1/account/{accountid}/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsUserGetSingle> V1AccountAccountidUserPostAsync(string accountid, ServiceVOIPUserAdd2 user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> localVarResponse = await V1AccountAccountidUserPostWithHttpInfoAsync(accountid, user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create User Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle>> V1AccountAccountidUserPostWithHttpInfoAsync(string accountid, ServiceVOIPUserAdd2 user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserPost");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling VoIPUserApi->V1AccountAccountidUserPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsUserGetSingle>("/v1/account/{accountid}/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Delete VoIP user access to maintain the security of your accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetSingle</returns>
        public ServiceDocsUserGetSingle V1AccountAccountidUserUseridDelete(string accountid, string userid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> localVarResponse = V1AccountAccountidUserUseridDeleteWithHttpInfo(accountid, userid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete User Delete VoIP user access to maintain the security of your accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridDeleteWithHttpInfo(string accountid, string userid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserUseridDelete");
            }

            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userid' when calling VoIPUserApi->V1AccountAccountidUserUseridDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("userid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userid)); // path parameter

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserUseridDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsUserGetSingle>("/v1/account/{accountid}/user/{userid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserUseridDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Delete VoIP user access to maintain the security of your accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridDeleteAsync(string accountid, string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> localVarResponse = await V1AccountAccountidUserUseridDeleteWithHttpInfoAsync(accountid, userid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete User Delete VoIP user access to maintain the security of your accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle>> V1AccountAccountidUserUseridDeleteWithHttpInfoAsync(string accountid, string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserUseridDelete");
            }

            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userid' when calling VoIPUserApi->V1AccountAccountidUserUseridDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("userid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userid)); // path parameter

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserUseridDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsUserGetSingle>("/v1/account/{accountid}/user/{userid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserUseridDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Details View specific user details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetSingle</returns>
        public ServiceDocsUserGetSingle V1AccountAccountidUserUseridGet(string accountid, string userid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> localVarResponse = V1AccountAccountidUserUseridGetWithHttpInfo(accountid, userid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Details View specific user details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridGetWithHttpInfo(string accountid, string userid, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserUseridGet");
            }

            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userid' when calling VoIPUserApi->V1AccountAccountidUserUseridGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("userid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userid)); // path parameter

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserUseridGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsUserGetSingle>("/v1/account/{accountid}/user/{userid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserUseridGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Details View specific user details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridGetAsync(string accountid, string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> localVarResponse = await V1AccountAccountidUserUseridGetWithHttpInfoAsync(accountid, userid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Details View specific user details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle>> V1AccountAccountidUserUseridGetWithHttpInfoAsync(string accountid, string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserUseridGet");
            }

            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userid' when calling VoIPUserApi->V1AccountAccountidUserUseridGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("userid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userid)); // path parameter

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserUseridGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsUserGetSingle>("/v1/account/{accountid}/user/{userid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserUseridGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Keep user information current. Modify the first and last name, extension, and other pertinent information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsUserGetSingle</returns>
        public ServiceDocsUserGetSingle V1AccountAccountidUserUseridPut(string accountid, string userid, ServiceVOIPUserAdd2 user, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> localVarResponse = V1AccountAccountidUserUseridPutWithHttpInfo(accountid, userid, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Keep user information current. Modify the first and last name, extension, and other pertinent information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsUserGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridPutWithHttpInfo(string accountid, string userid, ServiceVOIPUserAdd2 user, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserUseridPut");
            }

            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userid' when calling VoIPUserApi->V1AccountAccountidUserUseridPut");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling VoIPUserApi->V1AccountAccountidUserUseridPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("userid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserUseridPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsUserGetSingle>("/v1/account/{accountid}/user/{userid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserUseridPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Keep user information current. Modify the first and last name, extension, and other pertinent information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsUserGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsUserGetSingle> V1AccountAccountidUserUseridPutAsync(string accountid, string userid, ServiceVOIPUserAdd2 user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle> localVarResponse = await V1AccountAccountidUserUseridPutWithHttpInfoAsync(accountid, userid, user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Keep user information current. Modify the first and last name, extension, and other pertinent information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">user fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsUserGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsUserGetSingle>> V1AccountAccountidUserUseridPutWithHttpInfoAsync(string accountid, string userid, ServiceVOIPUserAdd2 user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserUseridPut");
            }

            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userid' when calling VoIPUserApi->V1AccountAccountidUserUseridPut");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling VoIPUserApi->V1AccountAccountidUserUseridPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("userid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserUseridPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsUserGetSingle>("/v1/account/{accountid}/user/{userid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserUseridPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Impersonate a User Retrieve a token for making presence calls.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">Payload for impersonate a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsImpersonateUserGetSingle</returns>
        public ServiceDocsImpersonateUserGetSingle V1AccountAccountidUserUseridUserauthPost(string accountid, string userid, ServiceVOIPImpersonateUser user, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsImpersonateUserGetSingle> localVarResponse = V1AccountAccountidUserUseridUserauthPostWithHttpInfo(accountid, userid, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Impersonate a User Retrieve a token for making presence calls.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">Payload for impersonate a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsImpersonateUserGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsImpersonateUserGetSingle> V1AccountAccountidUserUseridUserauthPostWithHttpInfo(string accountid, string userid, ServiceVOIPImpersonateUser user, int operationIndex = 0)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserUseridUserauthPost");
            }

            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userid' when calling VoIPUserApi->V1AccountAccountidUserUseridUserauthPost");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling VoIPUserApi->V1AccountAccountidUserUseridUserauthPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("userid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserUseridUserauthPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsImpersonateUserGetSingle>("/v1/account/{accountid}/user/{userid}/userauth", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserUseridUserauthPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Impersonate a User Retrieve a token for making presence calls.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">Payload for impersonate a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsImpersonateUserGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsImpersonateUserGetSingle> V1AccountAccountidUserUseridUserauthPostAsync(string accountid, string userid, ServiceVOIPImpersonateUser user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsImpersonateUserGetSingle> localVarResponse = await V1AccountAccountidUserUseridUserauthPostWithHttpInfoAsync(accountid, userid, user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Impersonate a User Retrieve a token for making presence calls.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">Account ID, 32 alpha numeric</param>
        /// <param name="userid">User ID, 32 alpha numeric</param>
        /// <param name="user">Payload for impersonate a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsImpersonateUserGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsImpersonateUserGetSingle>> V1AccountAccountidUserUseridUserauthPostWithHttpInfoAsync(string accountid, string userid, ServiceVOIPImpersonateUser user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountid' when calling VoIPUserApi->V1AccountAccountidUserUseridUserauthPost");
            }

            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userid' when calling VoIPUserApi->V1AccountAccountidUserUseridUserauthPost");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling VoIPUserApi->V1AccountAccountidUserUseridUserauthPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("userid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "VoIPUserApi.V1AccountAccountidUserUseridUserauthPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsImpersonateUserGetSingle>("/v1/account/{accountid}/user/{userid}/userauth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountidUserUseridUserauthPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
