/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Webhook List
        /// </summary>
        /// <remarks>
        /// Retrieve the webhook list in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="currentPage">Current Page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookGetAll</returns>
        ServiceDocsWebhookGetAll V1WebhookAccountAccountIDGet(string accountID, int? pageSize = default, int? currentPage = default, int operationIndex = 0);

        /// <summary>
        /// Get Webhook List
        /// </summary>
        /// <remarks>
        /// Retrieve the webhook list in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="currentPage">Current Page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookGetAll</returns>
        ApiResponse<ServiceDocsWebhookGetAll> V1WebhookAccountAccountIDGetWithHttpInfo(string accountID, int? pageSize = default, int? currentPage = default, int operationIndex = 0);
        /// <summary>
        /// Create Webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook for a specific account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="body">Webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookGetSingle</returns>
        ServiceDocsWebhookGetSingle V1WebhookAccountAccountIDPost(string accountID, ServiceWebhookAdd body, int operationIndex = 0);

        /// <summary>
        /// Create Webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook for a specific account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="body">Webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookGetSingle</returns>
        ApiResponse<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDPostWithHttpInfo(string accountID, ServiceWebhookAdd body, int operationIndex = 0);
        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Remove a webhook identified by its ID for a particular account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookDelete</returns>
        ServiceDocsWebhookDelete V1WebhookAccountAccountIDWebhookIDDelete(string accountID, int webhookID, int operationIndex = 0);

        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Remove a webhook identified by its ID for a particular account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookDelete</returns>
        ApiResponse<ServiceDocsWebhookDelete> V1WebhookAccountAccountIDWebhookIDDeleteWithHttpInfo(string accountID, int webhookID, int operationIndex = 0);
        /// <summary>
        /// Get Webhook Details
        /// </summary>
        /// <remarks>
        /// Access details about a single webhook ID for an individual account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookGetSingle</returns>
        ServiceDocsWebhookGetSingle V1WebhookAccountAccountIDWebhookIDGet(string accountID, int webhookID, int operationIndex = 0);

        /// <summary>
        /// Get Webhook Details
        /// </summary>
        /// <remarks>
        /// Access details about a single webhook ID for an individual account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookGetSingle</returns>
        ApiResponse<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDWebhookIDGetWithHttpInfo(string accountID, int webhookID, int operationIndex = 0);
        /// <summary>
        /// Update Webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook identified by its ID for a distinct account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="body">Updated webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookGetSingle</returns>
        ServiceDocsWebhookGetSingle V1WebhookAccountAccountIDWebhookIDPut(string accountID, string webhookID, ServiceWebhookEdit body, int operationIndex = 0);

        /// <summary>
        /// Update Webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook identified by its ID for a distinct account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="body">Updated webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookGetSingle</returns>
        ApiResponse<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDWebhookIDPutWithHttpInfo(string accountID, string webhookID, ServiceWebhookEdit body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Webhook List
        /// </summary>
        /// <remarks>
        /// Retrieve the webhook list in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="currentPage">Current Page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsWebhookGetAll> V1WebhookAccountAccountIDGetAsync(string accountID, int? pageSize = default, int? currentPage = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Webhook List
        /// </summary>
        /// <remarks>
        /// Retrieve the webhook list in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="currentPage">Current Page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsWebhookGetAll>> V1WebhookAccountAccountIDGetWithHttpInfoAsync(string accountID, int? pageSize = default, int? currentPage = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook for a specific account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="body">Webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDPostAsync(string accountID, ServiceWebhookAdd body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook for a specific account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="body">Webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsWebhookGetSingle>> V1WebhookAccountAccountIDPostWithHttpInfoAsync(string accountID, ServiceWebhookAdd body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Remove a webhook identified by its ID for a particular account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookDelete</returns>
        System.Threading.Tasks.Task<ServiceDocsWebhookDelete> V1WebhookAccountAccountIDWebhookIDDeleteAsync(string accountID, int webhookID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Remove a webhook identified by its ID for a particular account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookDelete)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsWebhookDelete>> V1WebhookAccountAccountIDWebhookIDDeleteWithHttpInfoAsync(string accountID, int webhookID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Webhook Details
        /// </summary>
        /// <remarks>
        /// Access details about a single webhook ID for an individual account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDWebhookIDGetAsync(string accountID, int webhookID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Webhook Details
        /// </summary>
        /// <remarks>
        /// Access details about a single webhook ID for an individual account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsWebhookGetSingle>> V1WebhookAccountAccountIDWebhookIDGetWithHttpInfoAsync(string accountID, int webhookID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook identified by its ID for a distinct account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="body">Updated webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDWebhookIDPutAsync(string accountID, string webhookID, ServiceWebhookEdit body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook identified by its ID for a distinct account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="body">Updated webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsWebhookGetSingle>> V1WebhookAccountAccountIDWebhookIDPutWithHttpInfoAsync(string accountID, string webhookID, ServiceWebhookEdit body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApi : IWebhookApiSync, IWebhookApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhookApi : IWebhookApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhookApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhookApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Webhook List Retrieve the webhook list in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="currentPage">Current Page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookGetAll</returns>
        public ServiceDocsWebhookGetAll V1WebhookAccountAccountIDGet(string accountID, int? pageSize = default, int? currentPage = default, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetAll> localVarResponse = V1WebhookAccountAccountIDGetWithHttpInfo(accountID, pageSize, currentPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhook List Retrieve the webhook list in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="currentPage">Current Page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetAll> V1WebhookAccountAccountIDGetWithHttpInfo(string accountID, int? pageSize = default, int? currentPage = default, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (currentPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "current_page", currentPage));
            }

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsWebhookGetAll>("/v1/webhook/account/{accountID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Webhook List Retrieve the webhook list in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="currentPage">Current Page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsWebhookGetAll> V1WebhookAccountAccountIDGetAsync(string accountID, int? pageSize = default, int? currentPage = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetAll> localVarResponse = await V1WebhookAccountAccountIDGetWithHttpInfoAsync(accountID, pageSize, currentPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhook List Retrieve the webhook list in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="pageSize">number of records to return, range 1 to 50 (optional)</param>
        /// <param name="currentPage">Current Page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetAll>> V1WebhookAccountAccountIDGetWithHttpInfoAsync(string accountID, int? pageSize = default, int? currentPage = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (currentPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "current_page", currentPage));
            }

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsWebhookGetAll>("/v1/webhook/account/{accountID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Webhook Create a webhook for a specific account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="body">Webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookGetSingle</returns>
        public ServiceDocsWebhookGetSingle V1WebhookAccountAccountIDPost(string accountID, ServiceWebhookAdd body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle> localVarResponse = V1WebhookAccountAccountIDPostWithHttpInfo(accountID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Webhook Create a webhook for a specific account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="body">Webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDPostWithHttpInfo(string accountID, ServiceWebhookAdd body, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling WebhookApi->V1WebhookAccountAccountIDPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsWebhookGetSingle>("/v1/webhook/account/{accountID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Webhook Create a webhook for a specific account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="body">Webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDPostAsync(string accountID, ServiceWebhookAdd body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle> localVarResponse = await V1WebhookAccountAccountIDPostWithHttpInfoAsync(accountID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Webhook Create a webhook for a specific account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="body">Webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle>> V1WebhookAccountAccountIDPostWithHttpInfoAsync(string accountID, ServiceWebhookAdd body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling WebhookApi->V1WebhookAccountAccountIDPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsWebhookGetSingle>("/v1/webhook/account/{accountID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhook Remove a webhook identified by its ID for a particular account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookDelete</returns>
        public ServiceDocsWebhookDelete V1WebhookAccountAccountIDWebhookIDDelete(string accountID, int webhookID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookDelete> localVarResponse = V1WebhookAccountAccountIDWebhookIDDeleteWithHttpInfo(accountID, webhookID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Webhook Remove a webhook identified by its ID for a particular account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookDelete</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookDelete> V1WebhookAccountAccountIDWebhookIDDeleteWithHttpInfo(string accountID, int webhookID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookID)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDWebhookIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsWebhookDelete>("/v1/webhook/account/{accountID}/{webhookID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDWebhookIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhook Remove a webhook identified by its ID for a particular account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookDelete</returns>
        public async System.Threading.Tasks.Task<ServiceDocsWebhookDelete> V1WebhookAccountAccountIDWebhookIDDeleteAsync(string accountID, int webhookID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookDelete> localVarResponse = await V1WebhookAccountAccountIDWebhookIDDeleteWithHttpInfoAsync(accountID, webhookID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Webhook Remove a webhook identified by its ID for a particular account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookDelete)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookDelete>> V1WebhookAccountAccountIDWebhookIDDeleteWithHttpInfoAsync(string accountID, int webhookID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookID)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDWebhookIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsWebhookDelete>("/v1/webhook/account/{accountID}/{webhookID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDWebhookIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Webhook Details Access details about a single webhook ID for an individual account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookGetSingle</returns>
        public ServiceDocsWebhookGetSingle V1WebhookAccountAccountIDWebhookIDGet(string accountID, int webhookID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle> localVarResponse = V1WebhookAccountAccountIDWebhookIDGetWithHttpInfo(accountID, webhookID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhook Details Access details about a single webhook ID for an individual account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDWebhookIDGetWithHttpInfo(string accountID, int webhookID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookID)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDWebhookIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsWebhookGetSingle>("/v1/webhook/account/{accountID}/{webhookID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDWebhookIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Webhook Details Access details about a single webhook ID for an individual account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDWebhookIDGetAsync(string accountID, int webhookID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle> localVarResponse = await V1WebhookAccountAccountIDWebhookIDGetWithHttpInfoAsync(accountID, webhookID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhook Details Access details about a single webhook ID for an individual account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle>> V1WebhookAccountAccountIDWebhookIDGetWithHttpInfoAsync(string accountID, int webhookID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookID)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDWebhookIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsWebhookGetSingle>("/v1/webhook/account/{accountID}/{webhookID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDWebhookIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Webhook Update a webhook identified by its ID for a distinct account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="body">Updated webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsWebhookGetSingle</returns>
        public ServiceDocsWebhookGetSingle V1WebhookAccountAccountIDWebhookIDPut(string accountID, string webhookID, ServiceWebhookEdit body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle> localVarResponse = V1WebhookAccountAccountIDWebhookIDPutWithHttpInfo(accountID, webhookID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Webhook Update a webhook identified by its ID for a distinct account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="body">Updated webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsWebhookGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDWebhookIDPutWithHttpInfo(string accountID, string webhookID, ServiceWebhookEdit body, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDPut");
            }

            // verify the required parameter 'webhookID' is set
            if (webhookID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookID' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDPut");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDWebhookIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsWebhookGetSingle>("/v1/webhook/account/{accountID}/{webhookID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDWebhookIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Webhook Update a webhook identified by its ID for a distinct account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="body">Updated webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsWebhookGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsWebhookGetSingle> V1WebhookAccountAccountIDWebhookIDPutAsync(string accountID, string webhookID, ServiceWebhookEdit body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle> localVarResponse = await V1WebhookAccountAccountIDWebhookIDPutWithHttpInfoAsync(accountID, webhookID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Webhook Update a webhook identified by its ID for a distinct account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID</param>
        /// <param name="webhookID">Webhook ID</param>
        /// <param name="body">Updated webhook data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsWebhookGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsWebhookGetSingle>> V1WebhookAccountAccountIDWebhookIDPutWithHttpInfoAsync(string accountID, string webhookID, ServiceWebhookEdit body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDPut");
            }

            // verify the required parameter 'webhookID' is set
            if (webhookID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookID' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDPut");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling WebhookApi->V1WebhookAccountAccountIDWebhookIDPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WebhookApi.V1WebhookAccountAccountIDWebhookIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsWebhookGetSingle>("/v1/webhook/account/{accountID}/{webhookID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1WebhookAccountAccountIDWebhookIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
