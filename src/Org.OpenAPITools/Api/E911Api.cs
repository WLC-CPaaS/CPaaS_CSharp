/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IE911ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get E911 List
        /// </summary>
        /// <remarks>
        /// Obtain e911 URIs associated with the provided account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911URIsApiOutput</returns>
        ServiceDocsE911URIsApiOutput V1E911Get(int operationIndex = 0);

        /// <summary>
        /// Get E911 List
        /// </summary>
        /// <remarks>
        /// Obtain e911 URIs associated with the provided account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911URIsApiOutput</returns>
        ApiResponse<ServiceDocsE911URIsApiOutput> V1E911GetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Activate E911 Location
        /// </summary>
        /// <remarks>
        /// Edit the provision location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911ActiveLocationOutput</returns>
        ServiceDocsE911ActiveLocationOutput V1E911LocationLocationIDActivatePut(string locationID, int operationIndex = 0);

        /// <summary>
        /// Activate E911 Location
        /// </summary>
        /// <remarks>
        /// Edit the provision location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911ActiveLocationOutput</returns>
        ApiResponse<ServiceDocsE911ActiveLocationOutput> V1E911LocationLocationIDActivatePutWithHttpInfo(string locationID, int operationIndex = 0);
        /// <summary>
        /// Delete E911 Location
        /// </summary>
        /// <remarks>
        /// Remove the location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911RemoveLocationOutput</returns>
        ServiceDocsE911RemoveLocationOutput V1E911LocationLocationIDDelete(string locationID, int operationIndex = 0);

        /// <summary>
        /// Delete E911 Location
        /// </summary>
        /// <remarks>
        /// Remove the location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911RemoveLocationOutput</returns>
        ApiResponse<ServiceDocsE911RemoveLocationOutput> V1E911LocationLocationIDDeleteWithHttpInfo(string locationID, int operationIndex = 0);
        /// <summary>
        /// Validate a Location
        /// </summary>
        /// <remarks>
        /// Validate the location details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911ValidateLocationOutput</returns>
        ServiceDocsE911ValidateLocationOutput V1E911LocationValidatePut(ServiceE911ValidateLocationInput reqBody, int operationIndex = 0);

        /// <summary>
        /// Validate a Location
        /// </summary>
        /// <remarks>
        /// Validate the location details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911ValidateLocationOutput</returns>
        ApiResponse<ServiceDocsE911ValidateLocationOutput> V1E911LocationValidatePutWithHttpInfo(ServiceE911ValidateLocationInput reqBody, int operationIndex = 0);
        /// <summary>
        /// Delete E911 Phone Number
        /// </summary>
        /// <remarks>
        /// Delete the e911 URI connected with the account URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911RemoveURIApiOutput</returns>
        ServiceDocsE911RemoveURIApiOutput V1E911PhoneNumberDelete(string phoneNumber, int operationIndex = 0);

        /// <summary>
        /// Delete E911 Phone Number
        /// </summary>
        /// <remarks>
        /// Delete the e911 URI connected with the account URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911RemoveURIApiOutput</returns>
        ApiResponse<ServiceDocsE911RemoveURIApiOutput> V1E911PhoneNumberDeleteWithHttpInfo(string phoneNumber, int operationIndex = 0);
        /// <summary>
        /// Get Actvie Location for a Phone Number
        /// </summary>
        /// <remarks>
        /// Get the e911 location connected with the URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911ActiveLocationURIApiOutput</returns>
        ServiceDocsE911ActiveLocationURIApiOutput V1E911PhoneNumberLocationActiveGet(string phoneNumber, int operationIndex = 0);

        /// <summary>
        /// Get Actvie Location for a Phone Number
        /// </summary>
        /// <remarks>
        /// Get the e911 location connected with the URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911ActiveLocationURIApiOutput</returns>
        ApiResponse<ServiceDocsE911ActiveLocationURIApiOutput> V1E911PhoneNumberLocationActiveGetWithHttpInfo(string phoneNumber, int operationIndex = 0);
        /// <summary>
        /// Get Location List for Phone Number
        /// </summary>
        /// <remarks>
        /// Access a list of the e911 locations associated with the provided URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911LocationsURIApiOutput</returns>
        ServiceDocsE911LocationsURIApiOutput V1E911PhoneNumberLocationGet(string phoneNumber, int operationIndex = 0);

        /// <summary>
        /// Get Location List for Phone Number
        /// </summary>
        /// <remarks>
        /// Access a list of the e911 locations associated with the provided URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911LocationsURIApiOutput</returns>
        ApiResponse<ServiceDocsE911LocationsURIApiOutput> V1E911PhoneNumberLocationGetWithHttpInfo(string phoneNumber, int operationIndex = 0);
        /// <summary>
        /// Create an E911 Location
        /// </summary>
        /// <remarks>
        /// Enter new location details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911AddLocationOutput</returns>
        ServiceDocsE911AddLocationOutput V1E911Post(ServiceE911AddLocationInput reqBody, int operationIndex = 0);

        /// <summary>
        /// Create an E911 Location
        /// </summary>
        /// <remarks>
        /// Enter new location details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911AddLocationOutput</returns>
        ApiResponse<ServiceDocsE911AddLocationOutput> V1E911PostWithHttpInfo(ServiceE911AddLocationInput reqBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IE911ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get E911 List
        /// </summary>
        /// <remarks>
        /// Obtain e911 URIs associated with the provided account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911URIsApiOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsE911URIsApiOutput> V1E911GetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get E911 List
        /// </summary>
        /// <remarks>
        /// Obtain e911 URIs associated with the provided account ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911URIsApiOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsE911URIsApiOutput>> V1E911GetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Activate E911 Location
        /// </summary>
        /// <remarks>
        /// Edit the provision location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911ActiveLocationOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsE911ActiveLocationOutput> V1E911LocationLocationIDActivatePutAsync(string locationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Activate E911 Location
        /// </summary>
        /// <remarks>
        /// Edit the provision location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911ActiveLocationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsE911ActiveLocationOutput>> V1E911LocationLocationIDActivatePutWithHttpInfoAsync(string locationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete E911 Location
        /// </summary>
        /// <remarks>
        /// Remove the location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911RemoveLocationOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsE911RemoveLocationOutput> V1E911LocationLocationIDDeleteAsync(string locationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete E911 Location
        /// </summary>
        /// <remarks>
        /// Remove the location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911RemoveLocationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsE911RemoveLocationOutput>> V1E911LocationLocationIDDeleteWithHttpInfoAsync(string locationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Validate a Location
        /// </summary>
        /// <remarks>
        /// Validate the location details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911ValidateLocationOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsE911ValidateLocationOutput> V1E911LocationValidatePutAsync(ServiceE911ValidateLocationInput reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate a Location
        /// </summary>
        /// <remarks>
        /// Validate the location details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911ValidateLocationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsE911ValidateLocationOutput>> V1E911LocationValidatePutWithHttpInfoAsync(ServiceE911ValidateLocationInput reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete E911 Phone Number
        /// </summary>
        /// <remarks>
        /// Delete the e911 URI connected with the account URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911RemoveURIApiOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsE911RemoveURIApiOutput> V1E911PhoneNumberDeleteAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete E911 Phone Number
        /// </summary>
        /// <remarks>
        /// Delete the e911 URI connected with the account URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911RemoveURIApiOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsE911RemoveURIApiOutput>> V1E911PhoneNumberDeleteWithHttpInfoAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Actvie Location for a Phone Number
        /// </summary>
        /// <remarks>
        /// Get the e911 location connected with the URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911ActiveLocationURIApiOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsE911ActiveLocationURIApiOutput> V1E911PhoneNumberLocationActiveGetAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Actvie Location for a Phone Number
        /// </summary>
        /// <remarks>
        /// Get the e911 location connected with the URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911ActiveLocationURIApiOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsE911ActiveLocationURIApiOutput>> V1E911PhoneNumberLocationActiveGetWithHttpInfoAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Location List for Phone Number
        /// </summary>
        /// <remarks>
        /// Access a list of the e911 locations associated with the provided URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911LocationsURIApiOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsE911LocationsURIApiOutput> V1E911PhoneNumberLocationGetAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Location List for Phone Number
        /// </summary>
        /// <remarks>
        /// Access a list of the e911 locations associated with the provided URI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911LocationsURIApiOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsE911LocationsURIApiOutput>> V1E911PhoneNumberLocationGetWithHttpInfoAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create an E911 Location
        /// </summary>
        /// <remarks>
        /// Enter new location details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911AddLocationOutput</returns>
        System.Threading.Tasks.Task<ServiceDocsE911AddLocationOutput> V1E911PostAsync(ServiceE911AddLocationInput reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an E911 Location
        /// </summary>
        /// <remarks>
        /// Enter new location details.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911AddLocationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsE911AddLocationOutput>> V1E911PostWithHttpInfoAsync(ServiceE911AddLocationInput reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IE911Api : IE911ApiSync, IE911ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class E911Api : IE911Api
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="E911Api"/> class.
        /// </summary>
        /// <returns></returns>
        public E911Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="E911Api"/> class.
        /// </summary>
        /// <returns></returns>
        public E911Api(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="E911Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public E911Api(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="E911Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public E911Api(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get E911 List Obtain e911 URIs associated with the provided account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911URIsApiOutput</returns>
        public ServiceDocsE911URIsApiOutput V1E911Get(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911URIsApiOutput> localVarResponse = V1E911GetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get E911 List Obtain e911 URIs associated with the provided account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911URIsApiOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911URIsApiOutput> V1E911GetWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "E911Api.V1E911Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsE911URIsApiOutput>("/v1/e911", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get E911 List Obtain e911 URIs associated with the provided account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911URIsApiOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsE911URIsApiOutput> V1E911GetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911URIsApiOutput> localVarResponse = await V1E911GetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get E911 List Obtain e911 URIs associated with the provided account ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911URIsApiOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911URIsApiOutput>> V1E911GetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "E911Api.V1E911Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsE911URIsApiOutput>("/v1/e911", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate E911 Location Edit the provision location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911ActiveLocationOutput</returns>
        public ServiceDocsE911ActiveLocationOutput V1E911LocationLocationIDActivatePut(string locationID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ActiveLocationOutput> localVarResponse = V1E911LocationLocationIDActivatePutWithHttpInfo(locationID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate E911 Location Edit the provision location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911ActiveLocationOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ActiveLocationOutput> V1E911LocationLocationIDActivatePutWithHttpInfo(string locationID, int operationIndex = 0)
        {
            // verify the required parameter 'locationID' is set
            if (locationID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locationID' when calling E911Api->V1E911LocationLocationIDActivatePut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locationID)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911LocationLocationIDActivatePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsE911ActiveLocationOutput>("/v1/e911/location/{locationID}/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911LocationLocationIDActivatePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate E911 Location Edit the provision location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911ActiveLocationOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsE911ActiveLocationOutput> V1E911LocationLocationIDActivatePutAsync(string locationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ActiveLocationOutput> localVarResponse = await V1E911LocationLocationIDActivatePutWithHttpInfoAsync(locationID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate E911 Location Edit the provision location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911ActiveLocationOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ActiveLocationOutput>> V1E911LocationLocationIDActivatePutWithHttpInfoAsync(string locationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'locationID' is set
            if (locationID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locationID' when calling E911Api->V1E911LocationLocationIDActivatePut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locationID)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911LocationLocationIDActivatePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsE911ActiveLocationOutput>("/v1/e911/location/{locationID}/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911LocationLocationIDActivatePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete E911 Location Remove the location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911RemoveLocationOutput</returns>
        public ServiceDocsE911RemoveLocationOutput V1E911LocationLocationIDDelete(string locationID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911RemoveLocationOutput> localVarResponse = V1E911LocationLocationIDDeleteWithHttpInfo(locationID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete E911 Location Remove the location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911RemoveLocationOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911RemoveLocationOutput> V1E911LocationLocationIDDeleteWithHttpInfo(string locationID, int operationIndex = 0)
        {
            // verify the required parameter 'locationID' is set
            if (locationID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locationID' when calling E911Api->V1E911LocationLocationIDDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locationID)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911LocationLocationIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsE911RemoveLocationOutput>("/v1/e911/location/{locationID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911LocationLocationIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete E911 Location Remove the location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911RemoveLocationOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsE911RemoveLocationOutput> V1E911LocationLocationIDDeleteAsync(string locationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911RemoveLocationOutput> localVarResponse = await V1E911LocationLocationIDDeleteWithHttpInfoAsync(locationID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete E911 Location Remove the location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationID">Location ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911RemoveLocationOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911RemoveLocationOutput>> V1E911LocationLocationIDDeleteWithHttpInfoAsync(string locationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'locationID' is set
            if (locationID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locationID' when calling E911Api->V1E911LocationLocationIDDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locationID)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911LocationLocationIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsE911RemoveLocationOutput>("/v1/e911/location/{locationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911LocationLocationIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a Location Validate the location details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911ValidateLocationOutput</returns>
        public ServiceDocsE911ValidateLocationOutput V1E911LocationValidatePut(ServiceE911ValidateLocationInput reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ValidateLocationOutput> localVarResponse = V1E911LocationValidatePutWithHttpInfo(reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a Location Validate the location details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911ValidateLocationOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ValidateLocationOutput> V1E911LocationValidatePutWithHttpInfo(ServiceE911ValidateLocationInput reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling E911Api->V1E911LocationValidatePut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "E911Api.V1E911LocationValidatePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsE911ValidateLocationOutput>("/v1/e911/location/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911LocationValidatePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a Location Validate the location details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911ValidateLocationOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsE911ValidateLocationOutput> V1E911LocationValidatePutAsync(ServiceE911ValidateLocationInput reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ValidateLocationOutput> localVarResponse = await V1E911LocationValidatePutWithHttpInfoAsync(reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a Location Validate the location details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911ValidateLocationOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ValidateLocationOutput>> V1E911LocationValidatePutWithHttpInfoAsync(ServiceE911ValidateLocationInput reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling E911Api->V1E911LocationValidatePut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "E911Api.V1E911LocationValidatePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsE911ValidateLocationOutput>("/v1/e911/location/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911LocationValidatePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete E911 Phone Number Delete the e911 URI connected with the account URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911RemoveURIApiOutput</returns>
        public ServiceDocsE911RemoveURIApiOutput V1E911PhoneNumberDelete(string phoneNumber, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911RemoveURIApiOutput> localVarResponse = V1E911PhoneNumberDeleteWithHttpInfo(phoneNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete E911 Phone Number Delete the e911 URI connected with the account URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911RemoveURIApiOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911RemoveURIApiOutput> V1E911PhoneNumberDeleteWithHttpInfo(string phoneNumber, int operationIndex = 0)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling E911Api->V1E911PhoneNumberDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911PhoneNumberDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsE911RemoveURIApiOutput>("/v1/e911/{phoneNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911PhoneNumberDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete E911 Phone Number Delete the e911 URI connected with the account URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911RemoveURIApiOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsE911RemoveURIApiOutput> V1E911PhoneNumberDeleteAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911RemoveURIApiOutput> localVarResponse = await V1E911PhoneNumberDeleteWithHttpInfoAsync(phoneNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete E911 Phone Number Delete the e911 URI connected with the account URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911RemoveURIApiOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911RemoveURIApiOutput>> V1E911PhoneNumberDeleteWithHttpInfoAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling E911Api->V1E911PhoneNumberDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911PhoneNumberDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsE911RemoveURIApiOutput>("/v1/e911/{phoneNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911PhoneNumberDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Actvie Location for a Phone Number Get the e911 location connected with the URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911ActiveLocationURIApiOutput</returns>
        public ServiceDocsE911ActiveLocationURIApiOutput V1E911PhoneNumberLocationActiveGet(string phoneNumber, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ActiveLocationURIApiOutput> localVarResponse = V1E911PhoneNumberLocationActiveGetWithHttpInfo(phoneNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Actvie Location for a Phone Number Get the e911 location connected with the URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911ActiveLocationURIApiOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ActiveLocationURIApiOutput> V1E911PhoneNumberLocationActiveGetWithHttpInfo(string phoneNumber, int operationIndex = 0)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling E911Api->V1E911PhoneNumberLocationActiveGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911PhoneNumberLocationActiveGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsE911ActiveLocationURIApiOutput>("/v1/e911/{phoneNumber}/location/active", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911PhoneNumberLocationActiveGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Actvie Location for a Phone Number Get the e911 location connected with the URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911ActiveLocationURIApiOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsE911ActiveLocationURIApiOutput> V1E911PhoneNumberLocationActiveGetAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ActiveLocationURIApiOutput> localVarResponse = await V1E911PhoneNumberLocationActiveGetWithHttpInfoAsync(phoneNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Actvie Location for a Phone Number Get the e911 location connected with the URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911ActiveLocationURIApiOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911ActiveLocationURIApiOutput>> V1E911PhoneNumberLocationActiveGetWithHttpInfoAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling E911Api->V1E911PhoneNumberLocationActiveGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911PhoneNumberLocationActiveGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsE911ActiveLocationURIApiOutput>("/v1/e911/{phoneNumber}/location/active", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911PhoneNumberLocationActiveGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Location List for Phone Number Access a list of the e911 locations associated with the provided URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911LocationsURIApiOutput</returns>
        public ServiceDocsE911LocationsURIApiOutput V1E911PhoneNumberLocationGet(string phoneNumber, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911LocationsURIApiOutput> localVarResponse = V1E911PhoneNumberLocationGetWithHttpInfo(phoneNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Location List for Phone Number Access a list of the e911 locations associated with the provided URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911LocationsURIApiOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911LocationsURIApiOutput> V1E911PhoneNumberLocationGetWithHttpInfo(string phoneNumber, int operationIndex = 0)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling E911Api->V1E911PhoneNumberLocationGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911PhoneNumberLocationGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsE911LocationsURIApiOutput>("/v1/e911/{phoneNumber}/location", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911PhoneNumberLocationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Location List for Phone Number Access a list of the e911 locations associated with the provided URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911LocationsURIApiOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsE911LocationsURIApiOutput> V1E911PhoneNumberLocationGetAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911LocationsURIApiOutput> localVarResponse = await V1E911PhoneNumberLocationGetWithHttpInfoAsync(phoneNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Location List for Phone Number Access a list of the e911 locations associated with the provided URI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911LocationsURIApiOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911LocationsURIApiOutput>> V1E911PhoneNumberLocationGetWithHttpInfoAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling E911Api->V1E911PhoneNumberLocationGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "E911Api.V1E911PhoneNumberLocationGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsE911LocationsURIApiOutput>("/v1/e911/{phoneNumber}/location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911PhoneNumberLocationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an E911 Location Enter new location details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsE911AddLocationOutput</returns>
        public ServiceDocsE911AddLocationOutput V1E911Post(ServiceE911AddLocationInput reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911AddLocationOutput> localVarResponse = V1E911PostWithHttpInfo(reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an E911 Location Enter new location details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsE911AddLocationOutput</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911AddLocationOutput> V1E911PostWithHttpInfo(ServiceE911AddLocationInput reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling E911Api->V1E911Post");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "E911Api.V1E911Post";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsE911AddLocationOutput>("/v1/e911", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an E911 Location Enter new location details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsE911AddLocationOutput</returns>
        public async System.Threading.Tasks.Task<ServiceDocsE911AddLocationOutput> V1E911PostAsync(ServiceE911AddLocationInput reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911AddLocationOutput> localVarResponse = await V1E911PostWithHttpInfoAsync(reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an E911 Location Enter new location details.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqBody">location details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsE911AddLocationOutput)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsE911AddLocationOutput>> V1E911PostWithHttpInfoAsync(ServiceE911AddLocationInput reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling E911Api->V1E911Post");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "E911Api.V1E911Post";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsE911AddLocationOutput>("/v1/e911", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1E911Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
