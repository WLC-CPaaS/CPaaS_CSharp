/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallQueueManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Call Queues
        /// </summary>
        /// <remarks>
        /// Retrieve call queue details for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetAll</returns>
        ServiceDocsCallQueueGetAll V1AccountAccountIDCallqueueGet(string accountID, int operationIndex = 0);

        /// <summary>
        /// Get Call Queues
        /// </summary>
        /// <remarks>
        /// Retrieve call queue details for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetAll</returns>
        ApiResponse<ServiceDocsCallQueueGetAll> V1AccountAccountIDCallqueueGetWithHttpInfo(string accountID, int operationIndex = 0);
        /// <summary>
        /// Create Call Queue
        /// </summary>
        /// <remarks>
        /// Set up a call queue in an account for specific inbound calls.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingle</returns>
        ServiceDocsCallQueueGetSingle V1AccountAccountIDCallqueuePost(string accountID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0);

        /// <summary>
        /// Create Call Queue
        /// </summary>
        /// <remarks>
        /// Set up a call queue in an account for specific inbound calls.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingle</returns>
        ApiResponse<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueuePostWithHttpInfo(string accountID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0);
        /// <summary>
        /// Delete Call Queue
        /// </summary>
        /// <remarks>
        /// Remove the call queue from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingle</returns>
        ServiceDocsCallQueueGetSingle V1AccountAccountIDCallqueueQueueIDDelete(string accountID, string queueID, int operationIndex = 0);

        /// <summary>
        /// Delete Call Queue
        /// </summary>
        /// <remarks>
        /// Remove the call queue from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingle</returns>
        ApiResponse<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDDeleteWithHttpInfo(string accountID, string queueID, int operationIndex = 0);
        /// <summary>
        /// Get Call Queue Details
        /// </summary>
        /// <remarks>
        /// Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingle</returns>
        ServiceDocsCallQueueGetSingle V1AccountAccountIDCallqueueQueueIDGet(string accountID, string queueID, int operationIndex = 0);

        /// <summary>
        /// Get Call Queue Details
        /// </summary>
        /// <remarks>
        /// Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingle</returns>
        ApiResponse<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDGetWithHttpInfo(string accountID, string queueID, int operationIndex = 0);
        /// <summary>
        /// Update Call Queue
        /// </summary>
        /// <remarks>
        /// Update the metadata mentioned above.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingle</returns>
        ServiceDocsCallQueueGetSingle V1AccountAccountIDCallqueueQueueIDPut(string accountID, string queueID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0);

        /// <summary>
        /// Update Call Queue
        /// </summary>
        /// <remarks>
        /// Update the metadata mentioned above.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingle</returns>
        ApiResponse<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDPutWithHttpInfo(string accountID, string queueID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0);
        /// <summary>
        /// Get Call Queue Status
        /// </summary>
        /// <remarks>
        /// Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingleStatus</returns>
        ServiceDocsCallQueueGetSingleStatus V1AccountAccountIDCallqueueQueueIDStatusGet(string accountID, string queueID, int operationIndex = 0);

        /// <summary>
        /// Get Call Queue Status
        /// </summary>
        /// <remarks>
        /// Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingleStatus</returns>
        ApiResponse<ServiceDocsCallQueueGetSingleStatus> V1AccountAccountIDCallqueueQueueIDStatusGetWithHttpInfo(string accountID, string queueID, int operationIndex = 0);
        /// <summary>
        /// Get Queue Roles of Account
        /// </summary>
        /// <remarks>
        /// Obtain data about each queue role in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetRoles</returns>
        ServiceDocsCallQueueGetRoles V1AccountAccountIDQueuerolesGet(string accountID, int operationIndex = 0);

        /// <summary>
        /// Get Queue Roles of Account
        /// </summary>
        /// <remarks>
        /// Obtain data about each queue role in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetRoles</returns>
        ApiResponse<ServiceDocsCallQueueGetRoles> V1AccountAccountIDQueuerolesGetWithHttpInfo(string accountID, int operationIndex = 0);
        /// <summary>
        /// Assign Queue Role to Call Queue
        /// </summary>
        /// <remarks>
        /// Assign roles to members in a call queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceAPIResponse</returns>
        ServiceAPIResponse V1AccountAccountIDQueuerolesQueueIDPost(string accountID, string queueID, ServiceVOIPCallQueueRoleAssignData reqBody, int operationIndex = 0);

        /// <summary>
        /// Assign Queue Role to Call Queue
        /// </summary>
        /// <remarks>
        /// Assign roles to members in a call queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceAPIResponse</returns>
        ApiResponse<ServiceAPIResponse> V1AccountAccountIDQueuerolesQueueIDPostWithHttpInfo(string accountID, string queueID, ServiceVOIPCallQueueRoleAssignData reqBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallQueueManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Call Queues
        /// </summary>
        /// <remarks>
        /// Retrieve call queue details for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetAll</returns>
        System.Threading.Tasks.Task<ServiceDocsCallQueueGetAll> V1AccountAccountIDCallqueueGetAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Call Queues
        /// </summary>
        /// <remarks>
        /// Retrieve call queue details for an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallQueueGetAll>> V1AccountAccountIDCallqueueGetWithHttpInfoAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Call Queue
        /// </summary>
        /// <remarks>
        /// Set up a call queue in an account for specific inbound calls.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueuePostAsync(string accountID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Call Queue
        /// </summary>
        /// <remarks>
        /// Set up a call queue in an account for specific inbound calls.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallQueueGetSingle>> V1AccountAccountIDCallqueuePostWithHttpInfoAsync(string accountID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Call Queue
        /// </summary>
        /// <remarks>
        /// Remove the call queue from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDDeleteAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Call Queue
        /// </summary>
        /// <remarks>
        /// Remove the call queue from an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallQueueGetSingle>> V1AccountAccountIDCallqueueQueueIDDeleteWithHttpInfoAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Call Queue Details
        /// </summary>
        /// <remarks>
        /// Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDGetAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Call Queue Details
        /// </summary>
        /// <remarks>
        /// Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallQueueGetSingle>> V1AccountAccountIDCallqueueQueueIDGetWithHttpInfoAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Call Queue
        /// </summary>
        /// <remarks>
        /// Update the metadata mentioned above.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingle</returns>
        System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDPutAsync(string accountID, string queueID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Call Queue
        /// </summary>
        /// <remarks>
        /// Update the metadata mentioned above.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallQueueGetSingle>> V1AccountAccountIDCallqueueQueueIDPutWithHttpInfoAsync(string accountID, string queueID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Call Queue Status
        /// </summary>
        /// <remarks>
        /// Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingleStatus</returns>
        System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingleStatus> V1AccountAccountIDCallqueueQueueIDStatusGetAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Call Queue Status
        /// </summary>
        /// <remarks>
        /// Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingleStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallQueueGetSingleStatus>> V1AccountAccountIDCallqueueQueueIDStatusGetWithHttpInfoAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Queue Roles of Account
        /// </summary>
        /// <remarks>
        /// Obtain data about each queue role in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetRoles</returns>
        System.Threading.Tasks.Task<ServiceDocsCallQueueGetRoles> V1AccountAccountIDQueuerolesGetAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Queue Roles of Account
        /// </summary>
        /// <remarks>
        /// Obtain data about each queue role in an account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetRoles)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDocsCallQueueGetRoles>> V1AccountAccountIDQueuerolesGetWithHttpInfoAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Assign Queue Role to Call Queue
        /// </summary>
        /// <remarks>
        /// Assign roles to members in a call queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceAPIResponse</returns>
        System.Threading.Tasks.Task<ServiceAPIResponse> V1AccountAccountIDQueuerolesQueueIDPostAsync(string accountID, string queueID, ServiceVOIPCallQueueRoleAssignData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Assign Queue Role to Call Queue
        /// </summary>
        /// <remarks>
        /// Assign roles to members in a call queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceAPIResponse>> V1AccountAccountIDQueuerolesQueueIDPostWithHttpInfoAsync(string accountID, string queueID, ServiceVOIPCallQueueRoleAssignData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallQueueManagementApi : ICallQueueManagementApiSync, ICallQueueManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallQueueManagementApi : ICallQueueManagementApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallQueueManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallQueueManagementApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallQueueManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallQueueManagementApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallQueueManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallQueueManagementApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallQueueManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CallQueueManagementApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Call Queues Retrieve call queue details for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetAll</returns>
        public ServiceDocsCallQueueGetAll V1AccountAccountIDCallqueueGet(string accountID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetAll> localVarResponse = V1AccountAccountIDCallqueueGetWithHttpInfo(accountID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queues Retrieve call queue details for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetAll</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetAll> V1AccountAccountIDCallqueueGetWithHttpInfo(string accountID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallQueueGetAll>("/v1/account/{accountID}/callqueue", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Queues Retrieve call queue details for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetAll</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallQueueGetAll> V1AccountAccountIDCallqueueGetAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetAll> localVarResponse = await V1AccountAccountIDCallqueueGetWithHttpInfoAsync(accountID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queues Retrieve call queue details for an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetAll)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetAll>> V1AccountAccountIDCallqueueGetWithHttpInfoAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallQueueGetAll>("/v1/account/{accountID}/callqueue", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Call Queue Set up a call queue in an account for specific inbound calls.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingle</returns>
        public ServiceDocsCallQueueGetSingle V1AccountAccountIDCallqueuePost(string accountID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> localVarResponse = V1AccountAccountIDCallqueuePostWithHttpInfo(accountID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Queue Set up a call queue in an account for specific inbound calls.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueuePostWithHttpInfo(string accountID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueuePost");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CallQueueManagementApi->V1AccountAccountIDCallqueuePost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueuePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDocsCallQueueGetSingle>("/v1/account/{accountID}/callqueue", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueuePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Call Queue Set up a call queue in an account for specific inbound calls.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueuePostAsync(string accountID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> localVarResponse = await V1AccountAccountIDCallqueuePostWithHttpInfoAsync(accountID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Queue Set up a call queue in an account for specific inbound calls.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle>> V1AccountAccountIDCallqueuePostWithHttpInfoAsync(string accountID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueuePost");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CallQueueManagementApi->V1AccountAccountIDCallqueuePost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueuePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDocsCallQueueGetSingle>("/v1/account/{accountID}/callqueue", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueuePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Call Queue Remove the call queue from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingle</returns>
        public ServiceDocsCallQueueGetSingle V1AccountAccountIDCallqueueQueueIDDelete(string accountID, string queueID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> localVarResponse = V1AccountAccountIDCallqueueQueueIDDeleteWithHttpInfo(accountID, queueID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Call Queue Remove the call queue from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDDeleteWithHttpInfo(string accountID, string queueID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDDelete");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueQueueIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ServiceDocsCallQueueGetSingle>("/v1/account/{accountID}/callqueue/{queueID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueQueueIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Call Queue Remove the call queue from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDDeleteAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> localVarResponse = await V1AccountAccountIDCallqueueQueueIDDeleteWithHttpInfoAsync(accountID, queueID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Call Queue Remove the call queue from an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle>> V1AccountAccountIDCallqueueQueueIDDeleteWithHttpInfoAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDDelete");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueQueueIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ServiceDocsCallQueueGetSingle>("/v1/account/{accountID}/callqueue/{queueID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueQueueIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Queue Details Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingle</returns>
        public ServiceDocsCallQueueGetSingle V1AccountAccountIDCallqueueQueueIDGet(string accountID, string queueID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> localVarResponse = V1AccountAccountIDCallqueueQueueIDGetWithHttpInfo(accountID, queueID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queue Details Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDGetWithHttpInfo(string accountID, string queueID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDGet");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueQueueIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallQueueGetSingle>("/v1/account/{accountID}/callqueue/{queueID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueQueueIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Queue Details Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDGetAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> localVarResponse = await V1AccountAccountIDCallqueueQueueIDGetWithHttpInfoAsync(accountID, queueID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queue Details Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle>> V1AccountAccountIDCallqueueQueueIDGetWithHttpInfoAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDGet");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueQueueIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallQueueGetSingle>("/v1/account/{accountID}/callqueue/{queueID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueQueueIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Call Queue Update the metadata mentioned above.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingle</returns>
        public ServiceDocsCallQueueGetSingle V1AccountAccountIDCallqueueQueueIDPut(string accountID, string queueID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> localVarResponse = V1AccountAccountIDCallqueueQueueIDPutWithHttpInfo(accountID, queueID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Queue Update the metadata mentioned above.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingle</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDPutWithHttpInfo(string accountID, string queueID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDPut");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueQueueIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ServiceDocsCallQueueGetSingle>("/v1/account/{accountID}/callqueue/{queueID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueQueueIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Call Queue Update the metadata mentioned above.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingle</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingle> V1AccountAccountIDCallqueueQueueIDPutAsync(string accountID, string queueID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle> localVarResponse = await V1AccountAccountIDCallqueueQueueIDPutWithHttpInfoAsync(accountID, queueID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Queue Update the metadata mentioned above.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingle)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingle>> V1AccountAccountIDCallqueueQueueIDPutWithHttpInfoAsync(string accountID, string queueID, ServiceVOIPCallQueueAddEditData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDPut");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDPut");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueQueueIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ServiceDocsCallQueueGetSingle>("/v1/account/{accountID}/callqueue/{queueID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueQueueIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Queue Status Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetSingleStatus</returns>
        public ServiceDocsCallQueueGetSingleStatus V1AccountAccountIDCallqueueQueueIDStatusGet(string accountID, string queueID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingleStatus> localVarResponse = V1AccountAccountIDCallqueueQueueIDStatusGetWithHttpInfo(accountID, queueID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queue Status Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetSingleStatus</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingleStatus> V1AccountAccountIDCallqueueQueueIDStatusGetWithHttpInfo(string accountID, string queueID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDStatusGet");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDStatusGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueQueueIDStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallQueueGetSingleStatus>("/v1/account/{accountID}/callqueue/{queueID}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueQueueIDStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Queue Status Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetSingleStatus</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallQueueGetSingleStatus> V1AccountAccountIDCallqueueQueueIDStatusGetAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingleStatus> localVarResponse = await V1AccountAccountIDCallqueueQueueIDStatusGetWithHttpInfoAsync(accountID, queueID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queue Status Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetSingleStatus)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetSingleStatus>> V1AccountAccountIDCallqueueQueueIDStatusGetWithHttpInfoAsync(string accountID, string queueID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDStatusGet");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDCallqueueQueueIDStatusGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDCallqueueQueueIDStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallQueueGetSingleStatus>("/v1/account/{accountID}/callqueue/{queueID}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDCallqueueQueueIDStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Queue Roles of Account Obtain data about each queue role in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceDocsCallQueueGetRoles</returns>
        public ServiceDocsCallQueueGetRoles V1AccountAccountIDQueuerolesGet(string accountID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetRoles> localVarResponse = V1AccountAccountIDQueuerolesGetWithHttpInfo(accountID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Queue Roles of Account Obtain data about each queue role in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceDocsCallQueueGetRoles</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetRoles> V1AccountAccountIDQueuerolesGetWithHttpInfo(string accountID, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDQueuerolesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDQueuerolesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceDocsCallQueueGetRoles>("/v1/account/{accountID}/queueroles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDQueuerolesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Queue Roles of Account Obtain data about each queue role in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDocsCallQueueGetRoles</returns>
        public async System.Threading.Tasks.Task<ServiceDocsCallQueueGetRoles> V1AccountAccountIDQueuerolesGetAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetRoles> localVarResponse = await V1AccountAccountIDQueuerolesGetWithHttpInfoAsync(accountID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Queue Roles of Account Obtain data about each queue role in an account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDocsCallQueueGetRoles)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceDocsCallQueueGetRoles>> V1AccountAccountIDQueuerolesGetWithHttpInfoAsync(string accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDQueuerolesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDQueuerolesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceDocsCallQueueGetRoles>("/v1/account/{accountID}/queueroles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDQueuerolesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Queue Role to Call Queue Assign roles to members in a call queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceAPIResponse</returns>
        public ServiceAPIResponse V1AccountAccountIDQueuerolesQueueIDPost(string accountID, string queueID, ServiceVOIPCallQueueRoleAssignData reqBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse> localVarResponse = V1AccountAccountIDQueuerolesQueueIDPostWithHttpInfo(accountID, queueID, reqBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Queue Role to Call Queue Assign roles to members in a call queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceAPIResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse> V1AccountAccountIDQueuerolesQueueIDPostWithHttpInfo(string accountID, string queueID, ServiceVOIPCallQueueRoleAssignData reqBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDQueuerolesQueueIDPost");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDQueuerolesQueueIDPost");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CallQueueManagementApi->V1AccountAccountIDQueuerolesQueueIDPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDQueuerolesQueueIDPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceAPIResponse>("/v1/account/{accountID}/queueroles/{queueID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDQueuerolesQueueIDPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Queue Role to Call Queue Assign roles to members in a call queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceAPIResponse</returns>
        public async System.Threading.Tasks.Task<ServiceAPIResponse> V1AccountAccountIDQueuerolesQueueIDPostAsync(string accountID, string queueID, ServiceVOIPCallQueueRoleAssignData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse> localVarResponse = await V1AccountAccountIDQueuerolesQueueIDPostWithHttpInfoAsync(accountID, queueID, reqBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Queue Role to Call Queue Assign roles to members in a call queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID, 32 alpha numeric</param>
        /// <param name="queueID">Queue ID, 32 alpha numeric</param>
        /// <param name="reqBody">payload fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceAPIResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ServiceAPIResponse>> V1AccountAccountIDQueuerolesQueueIDPostWithHttpInfoAsync(string accountID, string queueID, ServiceVOIPCallQueueRoleAssignData reqBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountID' when calling CallQueueManagementApi->V1AccountAccountIDQueuerolesQueueIDPost");
            }

            // verify the required parameter 'queueID' is set
            if (queueID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queueID' when calling CallQueueManagementApi->V1AccountAccountIDQueuerolesQueueIDPost");
            }

            // verify the required parameter 'reqBody' is set
            if (reqBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reqBody' when calling CallQueueManagementApi->V1AccountAccountIDQueuerolesQueueIDPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(queueID)); // path parameter
            localVarRequestOptions.Data = reqBody;

            localVarRequestOptions.Operation = "CallQueueManagementApi.V1AccountAccountIDQueuerolesQueueIDPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceAPIResponse>("/v1/account/{accountID}/queueroles/{queueID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AccountAccountIDQueuerolesQueueIDPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
