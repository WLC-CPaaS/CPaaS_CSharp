/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceSystemStatusVOIPService
    /// </summary>
    [DataContract(Name = "service.SystemStatusVOIPService")]
    public partial class ServiceSystemStatusVOIPService : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceSystemStatusVOIPService" /> class.
        /// </summary>
        /// <param name="apps">apps.</param>
        /// <param name="backend">backend.</param>
        /// <param name="callManager">callManager.</param>
        /// <param name="mediaServer">mediaServer.</param>
        /// <param name="messageBroker">messageBroker.</param>
        /// <param name="sipProxy">sipProxy.</param>
        public ServiceSystemStatusVOIPService(string apps = default, string backend = default, string callManager = default, string mediaServer = default, string messageBroker = default, string sipProxy = default)
        {
            this.Apps = apps;
            this.Backend = backend;
            this.CallManager = callManager;
            this.MediaServer = mediaServer;
            this.MessageBroker = messageBroker;
            this.SipProxy = sipProxy;
        }

        /// <summary>
        /// Gets or Sets Apps
        /// </summary>
        [DataMember(Name = "apps", EmitDefaultValue = false)]
        public string Apps { get; set; }

        /// <summary>
        /// Gets or Sets Backend
        /// </summary>
        [DataMember(Name = "backend", EmitDefaultValue = false)]
        public string Backend { get; set; }

        /// <summary>
        /// Gets or Sets CallManager
        /// </summary>
        [DataMember(Name = "call_manager", EmitDefaultValue = false)]
        public string CallManager { get; set; }

        /// <summary>
        /// Gets or Sets MediaServer
        /// </summary>
        [DataMember(Name = "media_server", EmitDefaultValue = false)]
        public string MediaServer { get; set; }

        /// <summary>
        /// Gets or Sets MessageBroker
        /// </summary>
        [DataMember(Name = "message_broker", EmitDefaultValue = false)]
        public string MessageBroker { get; set; }

        /// <summary>
        /// Gets or Sets SipProxy
        /// </summary>
        [DataMember(Name = "sip_proxy", EmitDefaultValue = false)]
        public string SipProxy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceSystemStatusVOIPService {\n");
            sb.Append("  Apps: ").Append(Apps).Append("\n");
            sb.Append("  Backend: ").Append(Backend).Append("\n");
            sb.Append("  CallManager: ").Append(CallManager).Append("\n");
            sb.Append("  MediaServer: ").Append(MediaServer).Append("\n");
            sb.Append("  MessageBroker: ").Append(MessageBroker).Append("\n");
            sb.Append("  SipProxy: ").Append(SipProxy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
