/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModelsGenerateConfigFileRequest
    /// </summary>
    [DataContract(Name = "models.GenerateConfigFileRequest")]
    public partial class ModelsGenerateConfigFileRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsGenerateConfigFileRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelsGenerateConfigFileRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsGenerateConfigFileRequest" /> class.
        /// </summary>
        /// <param name="parameters">parameters (required).</param>
        /// <param name="templateFileId">templateFileId (required).</param>
        /// <param name="templateId">templateId (required).</param>
        public ModelsGenerateConfigFileRequest(ModelsConfigFileParameter parameters = default, string templateFileId = default, string templateId = default)
        {
            // to ensure "parameters" is required (not null)
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters is a required property for ModelsGenerateConfigFileRequest and cannot be null");
            }
            this.Parameters = parameters;
            // to ensure "templateFileId" is required (not null)
            if (templateFileId == null)
            {
                throw new ArgumentNullException("templateFileId is a required property for ModelsGenerateConfigFileRequest and cannot be null");
            }
            this.TemplateFileId = templateFileId;
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new ArgumentNullException("templateId is a required property for ModelsGenerateConfigFileRequest and cannot be null");
            }
            this.TemplateId = templateId;
        }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", IsRequired = true, EmitDefaultValue = true)]
        public ModelsConfigFileParameter Parameters { get; set; }

        /// <summary>
        /// Gets or Sets TemplateFileId
        /// </summary>
        [DataMember(Name = "template_file_id", IsRequired = true, EmitDefaultValue = true)]
        public string TemplateFileId { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name = "template_id", IsRequired = true, EmitDefaultValue = true)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelsGenerateConfigFileRequest {\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  TemplateFileId: ").Append(TemplateFileId).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
