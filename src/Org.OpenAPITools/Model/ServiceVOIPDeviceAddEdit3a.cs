/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceVOIPDeviceAddEdit3a
    /// </summary>
    [DataContract(Name = "service.VOIPDeviceAddEdit3a")]
    public partial class ServiceVOIPDeviceAddEdit3a : IValidatableObject
    {
        /// <summary>
        /// Defines InviteFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InviteFormatEnum
        {
            /// <summary>
            /// Enum Username for value: username
            /// </summary>
            [EnumMember(Value = "username")]
            Username = 1
        }


        /// <summary>
        /// Gets or Sets InviteFormat
        /// </summary>
        [DataMember(Name = "invite_format", IsRequired = true, EmitDefaultValue = true)]
        public InviteFormatEnum InviteFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceVOIPDeviceAddEdit3a" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceVOIPDeviceAddEdit3a() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceVOIPDeviceAddEdit3a" /> class.
        /// </summary>
        /// <param name="inviteFormat">inviteFormat (required).</param>
        /// <param name="password">password.</param>
        /// <param name="username">username (required).</param>
        public ServiceVOIPDeviceAddEdit3a(InviteFormatEnum inviteFormat = default, string password = default, string username = default)
        {
            this.InviteFormat = inviteFormat;
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for ServiceVOIPDeviceAddEdit3a and cannot be null");
            }
            this.Username = username;
            this.Password = password;
        }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceVOIPDeviceAddEdit3a {\n");
            sb.Append("  InviteFormat: ").Append(InviteFormat).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Password (string) maxLength
            if (this.Password != null && this.Password.Length > 32)
            {
                yield return new ValidationResult("Invalid value for Password, length must be less than 32.", new [] { "Password" });
            }

            // Password (string) minLength
            if (this.Password != null && this.Password.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Password, length must be greater than 5.", new [] { "Password" });
            }

            // Username (string) maxLength
            if (this.Username != null && this.Username.Length > 32)
            {
                yield return new ValidationResult("Invalid value for Username, length must be less than 32.", new [] { "Username" });
            }

            // Username (string) minLength
            if (this.Username != null && this.Username.Length < 2)
            {
                yield return new ValidationResult("Invalid value for Username, length must be greater than 2.", new [] { "Username" });
            }

            yield break;
        }
    }

}
