/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MenuOutputDetailMedia
    /// </summary>
    [DataContract(Name = "MenuOutputDetailMedia")]
    public partial class MenuOutputDetailMedia : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuOutputDetailMedia" /> class.
        /// </summary>
        /// <param name="greeting">The ID of a media object that should be used as the menu greeting.</param>
        /// <param name="invalidMedia">When the collected digits don&#39;t result in a match or hunt this media can be played.</param>
        /// <param name="transferMedia">When a call is transferred from the menu, either after all retries exhausted or a successful hunt, this media can be played.</param>
        public MenuOutputDetailMedia(string greeting = default, Object invalidMedia = default, Object transferMedia = default)
        {
            this.Greeting = greeting;
            this.InvalidMedia = invalidMedia;
            this.TransferMedia = transferMedia;
        }

        /// <summary>
        /// The ID of a media object that should be used as the menu greeting
        /// </summary>
        /// <value>The ID of a media object that should be used as the menu greeting</value>
        [DataMember(Name = "greeting", EmitDefaultValue = false)]
        public string Greeting { get; set; }

        /// <summary>
        /// When the collected digits don&#39;t result in a match or hunt this media can be played
        /// </summary>
        /// <value>When the collected digits don&#39;t result in a match or hunt this media can be played</value>
        [DataMember(Name = "invalid_media", EmitDefaultValue = false)]
        public Object InvalidMedia { get; set; }

        /// <summary>
        /// When a call is transferred from the menu, either after all retries exhausted or a successful hunt, this media can be played
        /// </summary>
        /// <value>When a call is transferred from the menu, either after all retries exhausted or a successful hunt, this media can be played</value>
        [DataMember(Name = "transfer_media", EmitDefaultValue = false)]
        public Object TransferMedia { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MenuOutputDetailMedia {\n");
            sb.Append("  Greeting: ").Append(Greeting).Append("\n");
            sb.Append("  InvalidMedia: ").Append(InvalidMedia).Append("\n");
            sb.Append("  TransferMedia: ").Append(TransferMedia).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Greeting (string) maxLength
            if (this.Greeting != null && this.Greeting.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for Greeting, length must be less than 2048.", new [] { "Greeting" });
            }

            // Greeting (string) minLength
            if (this.Greeting != null && this.Greeting.Length < 3)
            {
                yield return new ValidationResult("Invalid value for Greeting, length must be greater than 3.", new [] { "Greeting" });
            }

            yield break;
        }
    }

}
