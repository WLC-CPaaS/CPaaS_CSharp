/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModelAccountWebhook
    /// </summary>
    [DataContract(Name = "model.AccountWebhook")]
    public partial class ModelAccountWebhook : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAccountWebhook" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="callbackMethod">callbackMethod.</param>
        /// <param name="callbackUrl">callbackUrl.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="data">data.</param>
        /// <param name="id">id.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="title">title.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="webhookType">webhookType.</param>
        public ModelAccountWebhook(string accountId = default, string callbackMethod = default, string callbackUrl = default, string createdAt = default, Dictionary<string, Object> data = default, string id = default, bool isActive = default, string title = default, string updatedAt = default, string webhookType = default)
        {
            this.AccountId = accountId;
            this.CallbackMethod = callbackMethod;
            this.CallbackUrl = callbackUrl;
            this.CreatedAt = createdAt;
            this.Data = data;
            this.Id = id;
            this.IsActive = isActive;
            this.Title = title;
            this.UpdatedAt = updatedAt;
            this.WebhookType = webhookType;
        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets CallbackMethod
        /// </summary>
        [DataMember(Name = "callback_method", EmitDefaultValue = false)]
        public string CallbackMethod { get; set; }

        /// <summary>
        /// Gets or Sets CallbackUrl
        /// </summary>
        [DataMember(Name = "callback_url", EmitDefaultValue = false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "is_active", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets WebhookType
        /// </summary>
        [DataMember(Name = "webhook_type", EmitDefaultValue = false)]
        public string WebhookType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelAccountWebhook {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CallbackMethod: ").Append(CallbackMethod).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  WebhookType: ").Append(WebhookType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
