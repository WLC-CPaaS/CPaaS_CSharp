/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceDocsDeviceStatus
    /// </summary>
    [DataContract(Name = "service.DocsDeviceStatus")]
    public partial class ServiceDocsDeviceStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceDocsDeviceStatus" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="nextStartKey">List Pagination: Used to get the next page of results. Will not exist if this is the last page..</param>
        /// <param name="pageSize">List Pagination: The number of results returned in this page.</param>
        /// <param name="requestId">Unique id for each request.</param>
        /// <param name="startKey">List Pagination: Code for paged results.</param>
        /// <param name="statusCode">HTTP response status code.</param>
        public ServiceDocsDeviceStatus(List<ServiceDeviceStatusOutput> data = default, string nextStartKey = default, int pageSize = default, string requestId = default, string startKey = default, int statusCode = default)
        {
            this.Data = data;
            this.NextStartKey = nextStartKey;
            this.PageSize = pageSize;
            this.RequestId = requestId;
            this.StartKey = startKey;
            this.StatusCode = statusCode;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public List<ServiceDeviceStatusOutput> Data { get; set; }

        /// <summary>
        /// List Pagination: Used to get the next page of results. Will not exist if this is the last page.
        /// </summary>
        /// <value>List Pagination: Used to get the next page of results. Will not exist if this is the last page.</value>
        [DataMember(Name = "next_start_key", EmitDefaultValue = false)]
        public string NextStartKey { get; set; }

        /// <summary>
        /// List Pagination: The number of results returned in this page
        /// </summary>
        /// <value>List Pagination: The number of results returned in this page</value>
        [DataMember(Name = "page_size", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Unique id for each request
        /// </summary>
        /// <value>Unique id for each request</value>
        [DataMember(Name = "request_id", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// List Pagination: Code for paged results
        /// </summary>
        /// <value>List Pagination: Code for paged results</value>
        [DataMember(Name = "start_key", EmitDefaultValue = false)]
        public string StartKey { get; set; }

        /// <summary>
        /// HTTP response status code
        /// </summary>
        /// <value>HTTP response status code</value>
        [DataMember(Name = "status_code", EmitDefaultValue = false)]
        public int StatusCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceDocsDeviceStatus {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  NextStartKey: ").Append(NextStartKey).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  StartKey: ").Append(StartKey).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
