/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceTemporalRuleOutputFull
    /// </summary>
    [DataContract(Name = "service.TemporalRuleOutputFull")]
    public partial class ServiceTemporalRuleOutputFull : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceTemporalRuleOutputFull" /> class.
        /// </summary>
        /// <param name="cycle">cycle.</param>
        /// <param name="days">days.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="id">id.</param>
        /// <param name="interval">interval.</param>
        /// <param name="month">month.</param>
        /// <param name="name">name.</param>
        /// <param name="ordinal">ordinal.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="timeWindowStart">timeWindowStart.</param>
        /// <param name="timeWindowStop">timeWindowStop.</param>
        /// <param name="wdays">wdays.</param>
        public ServiceTemporalRuleOutputFull(string cycle = default, List<int> days = default, bool enabled = default, string id = default, int interval = default, int month = default, string name = default, string ordinal = default, int startDate = default, int timeWindowStart = default, int timeWindowStop = default, List<string> wdays = default)
        {
            this.Cycle = cycle;
            this.Days = days;
            this.Enabled = enabled;
            this.Id = id;
            this.Interval = interval;
            this.Month = month;
            this.Name = name;
            this.Ordinal = ordinal;
            this.StartDate = startDate;
            this.TimeWindowStart = timeWindowStart;
            this.TimeWindowStop = timeWindowStop;
            this.Wdays = wdays;
        }

        /// <summary>
        /// Gets or Sets Cycle
        /// </summary>
        [DataMember(Name = "cycle", EmitDefaultValue = false)]
        public string Cycle { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name = "days", EmitDefaultValue = false)]
        public List<int> Days { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public int Interval { get; set; }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name = "month", EmitDefaultValue = false)]
        public int Month { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Ordinal
        /// </summary>
        [DataMember(Name = "ordinal", EmitDefaultValue = false)]
        public string Ordinal { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "start_date", EmitDefaultValue = false)]
        public int StartDate { get; set; }

        /// <summary>
        /// Gets or Sets TimeWindowStart
        /// </summary>
        [DataMember(Name = "time_window_start", EmitDefaultValue = false)]
        public int TimeWindowStart { get; set; }

        /// <summary>
        /// Gets or Sets TimeWindowStop
        /// </summary>
        [DataMember(Name = "time_window_stop", EmitDefaultValue = false)]
        public int TimeWindowStop { get; set; }

        /// <summary>
        /// Gets or Sets Wdays
        /// </summary>
        [DataMember(Name = "wdays", EmitDefaultValue = false)]
        public List<string> Wdays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceTemporalRuleOutputFull {\n");
            sb.Append("  Cycle: ").Append(Cycle).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ordinal: ").Append(Ordinal).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TimeWindowStart: ").Append(TimeWindowStart).Append("\n");
            sb.Append("  TimeWindowStop: ").Append(TimeWindowStop).Append("\n");
            sb.Append("  Wdays: ").Append(Wdays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
