/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModelsCallRecordingParameters
    /// </summary>
    [DataContract(Name = "models.CallRecordingParameters")]
    public partial class ModelsCallRecordingParameters : IValidatableObject
    {
        /// <summary>
        /// Defines Format
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum Mp3 for value: mp3
            /// </summary>
            [EnumMember(Value = "mp3")]
            Mp3 = 1,

            /// <summary>
            /// Enum Wav for value: wav
            /// </summary>
            [EnumMember(Value = "wav")]
            Wav = 2
        }


        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsCallRecordingParameters" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="format">format.</param>
        /// <param name="recordMinSec">recordMinSec.</param>
        /// <param name="recordOnAnswer">recordOnAnswer.</param>
        /// <param name="recordOnBridge">recordOnBridge.</param>
        /// <param name="recordSampleRate">recordSampleRate.</param>
        /// <param name="timeLimit">timeLimit.</param>
        /// <param name="url">url.</param>
        public ModelsCallRecordingParameters(bool enabled = default, FormatEnum? format = default, int recordMinSec = default, bool recordOnAnswer = default, bool recordOnBridge = default, int recordSampleRate = default, int timeLimit = default, string url = default)
        {
            this.Enabled = enabled;
            this.Format = format;
            this.RecordMinSec = recordMinSec;
            this.RecordOnAnswer = recordOnAnswer;
            this.RecordOnBridge = recordOnBridge;
            this.RecordSampleRate = recordSampleRate;
            this.TimeLimit = timeLimit;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets RecordMinSec
        /// </summary>
        [DataMember(Name = "record_min_sec", EmitDefaultValue = false)]
        public int RecordMinSec { get; set; }

        /// <summary>
        /// Gets or Sets RecordOnAnswer
        /// </summary>
        [DataMember(Name = "record_on_answer", EmitDefaultValue = true)]
        public bool RecordOnAnswer { get; set; }

        /// <summary>
        /// Gets or Sets RecordOnBridge
        /// </summary>
        [DataMember(Name = "record_on_bridge", EmitDefaultValue = true)]
        public bool RecordOnBridge { get; set; }

        /// <summary>
        /// Gets or Sets RecordSampleRate
        /// </summary>
        [DataMember(Name = "record_sample_rate", EmitDefaultValue = false)]
        public int RecordSampleRate { get; set; }

        /// <summary>
        /// Gets or Sets TimeLimit
        /// </summary>
        [DataMember(Name = "time_limit", EmitDefaultValue = false)]
        public int TimeLimit { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelsCallRecordingParameters {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  RecordMinSec: ").Append(RecordMinSec).Append("\n");
            sb.Append("  RecordOnAnswer: ").Append(RecordOnAnswer).Append("\n");
            sb.Append("  RecordOnBridge: ").Append(RecordOnBridge).Append("\n");
            sb.Append("  RecordSampleRate: ").Append(RecordSampleRate).Append("\n");
            sb.Append("  TimeLimit: ").Append(TimeLimit).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TimeLimit (int) maximum
            if (this.TimeLimit > (int)10800)
            {
                yield return new ValidationResult("Invalid value for TimeLimit, must be a value less than or equal to 10800.", new [] { "TimeLimit" });
            }

            // TimeLimit (int) minimum
            if (this.TimeLimit < (int)5)
            {
                yield return new ValidationResult("Invalid value for TimeLimit, must be a value greater than or equal to 5.", new [] { "TimeLimit" });
            }

            yield break;
        }
    }

}
