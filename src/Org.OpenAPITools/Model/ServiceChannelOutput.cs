/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceChannelOutput
    /// </summary>
    [DataContract(Name = "service.ChannelOutput")]
    public partial class ServiceChannelOutput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceChannelOutput" /> class.
        /// </summary>
        /// <param name="answered">answered.</param>
        /// <param name="authorizingId">authorizingId.</param>
        /// <param name="authorizingType">authorizingType.</param>
        /// <param name="callflowId">callflowId.</param>
        /// <param name="channelAuthorized">channelAuthorized.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customAuthHeaders">customAuthHeaders.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSipHeaders">customSipHeaders.</param>
        /// <param name="destination">destination.</param>
        /// <param name="direction">direction.</param>
        /// <param name="elapsedS">elapsedS.</param>
        /// <param name="fromTag">fromTag.</param>
        /// <param name="interactionId">interactionId.</param>
        /// <param name="isLoopback">isLoopback.</param>
        /// <param name="isOnhold">isOnhold.</param>
        /// <param name="otherLeg">otherLeg.</param>
        /// <param name="ownerId">ownerId.</param>
        /// <param name="presenceId">presenceId.</param>
        /// <param name="request">request.</param>
        /// <param name="resellerId">resellerId.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="toTag">toTag.</param>
        /// <param name="username">username.</param>
        /// <param name="uuid">uuid.</param>
        public ServiceChannelOutput(bool answered = default, string authorizingId = default, string authorizingType = default, string callflowId = default, bool channelAuthorized = default, Dictionary<string, Object> customApplicationVars = default, Dictionary<string, Object> customAuthHeaders = default, Dictionary<string, Object> customChannelVars = default, Dictionary<string, Object> customSipHeaders = default, string destination = default, string direction = default, int elapsedS = default, string fromTag = default, string interactionId = default, bool isLoopback = default, bool isOnhold = default, string otherLeg = default, string ownerId = default, string presenceId = default, string request = default, string resellerId = default, int timestamp = default, string toTag = default, string username = default, string uuid = default)
        {
            this.Answered = answered;
            this.AuthorizingId = authorizingId;
            this.AuthorizingType = authorizingType;
            this.CallflowId = callflowId;
            this.ChannelAuthorized = channelAuthorized;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomAuthHeaders = customAuthHeaders;
            this.CustomChannelVars = customChannelVars;
            this.CustomSipHeaders = customSipHeaders;
            this.Destination = destination;
            this.Direction = direction;
            this.ElapsedS = elapsedS;
            this.FromTag = fromTag;
            this.InteractionId = interactionId;
            this.IsLoopback = isLoopback;
            this.IsOnhold = isOnhold;
            this.OtherLeg = otherLeg;
            this.OwnerId = ownerId;
            this.PresenceId = presenceId;
            this.Request = request;
            this.ResellerId = resellerId;
            this.Timestamp = timestamp;
            this.ToTag = toTag;
            this.Username = username;
            this.Uuid = uuid;
        }

        /// <summary>
        /// Gets or Sets Answered
        /// </summary>
        [DataMember(Name = "answered", EmitDefaultValue = true)]
        public bool Answered { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizingId
        /// </summary>
        [DataMember(Name = "authorizing_id", EmitDefaultValue = false)]
        public string AuthorizingId { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizingType
        /// </summary>
        [DataMember(Name = "authorizing_type", EmitDefaultValue = false)]
        public string AuthorizingType { get; set; }

        /// <summary>
        /// Gets or Sets CallflowId
        /// </summary>
        [DataMember(Name = "callflow_id", EmitDefaultValue = false)]
        public string CallflowId { get; set; }

        /// <summary>
        /// Gets or Sets ChannelAuthorized
        /// </summary>
        [DataMember(Name = "channel_authorized", EmitDefaultValue = true)]
        public bool ChannelAuthorized { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name = "custom_application_vars", EmitDefaultValue = false)]
        public Dictionary<string, Object> CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomAuthHeaders
        /// </summary>
        [DataMember(Name = "custom_auth_headers", EmitDefaultValue = false)]
        public Dictionary<string, Object> CustomAuthHeaders { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name = "custom_channel_vars", EmitDefaultValue = false)]
        public Dictionary<string, Object> CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSipHeaders
        /// </summary>
        [DataMember(Name = "custom_sip_headers", EmitDefaultValue = false)]
        public Dictionary<string, Object> CustomSipHeaders { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedS
        /// </summary>
        [DataMember(Name = "elapsed_s", EmitDefaultValue = false)]
        public int ElapsedS { get; set; }

        /// <summary>
        /// Gets or Sets FromTag
        /// </summary>
        [DataMember(Name = "from_tag", EmitDefaultValue = false)]
        public string FromTag { get; set; }

        /// <summary>
        /// Gets or Sets InteractionId
        /// </summary>
        [DataMember(Name = "interaction_id", EmitDefaultValue = false)]
        public string InteractionId { get; set; }

        /// <summary>
        /// Gets or Sets IsLoopback
        /// </summary>
        [DataMember(Name = "is_loopback", EmitDefaultValue = true)]
        public bool IsLoopback { get; set; }

        /// <summary>
        /// Gets or Sets IsOnhold
        /// </summary>
        [DataMember(Name = "is_onhold", EmitDefaultValue = true)]
        public bool IsOnhold { get; set; }

        /// <summary>
        /// Gets or Sets OtherLeg
        /// </summary>
        [DataMember(Name = "other_leg", EmitDefaultValue = false)]
        public string OtherLeg { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name = "owner_id", EmitDefaultValue = false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets PresenceId
        /// </summary>
        [DataMember(Name = "presence_id", EmitDefaultValue = false)]
        public string PresenceId { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name = "request", EmitDefaultValue = false)]
        public string Request { get; set; }

        /// <summary>
        /// Gets or Sets ResellerId
        /// </summary>
        [DataMember(Name = "reseller_id", EmitDefaultValue = false)]
        public string ResellerId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets ToTag
        /// </summary>
        [DataMember(Name = "to_tag", EmitDefaultValue = false)]
        public string ToTag { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceChannelOutput {\n");
            sb.Append("  Answered: ").Append(Answered).Append("\n");
            sb.Append("  AuthorizingId: ").Append(AuthorizingId).Append("\n");
            sb.Append("  AuthorizingType: ").Append(AuthorizingType).Append("\n");
            sb.Append("  CallflowId: ").Append(CallflowId).Append("\n");
            sb.Append("  ChannelAuthorized: ").Append(ChannelAuthorized).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomAuthHeaders: ").Append(CustomAuthHeaders).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSipHeaders: ").Append(CustomSipHeaders).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ElapsedS: ").Append(ElapsedS).Append("\n");
            sb.Append("  FromTag: ").Append(FromTag).Append("\n");
            sb.Append("  InteractionId: ").Append(InteractionId).Append("\n");
            sb.Append("  IsLoopback: ").Append(IsLoopback).Append("\n");
            sb.Append("  IsOnhold: ").Append(IsOnhold).Append("\n");
            sb.Append("  OtherLeg: ").Append(OtherLeg).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  PresenceId: ").Append(PresenceId).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  ResellerId: ").Append(ResellerId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ToTag: ").Append(ToTag).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
