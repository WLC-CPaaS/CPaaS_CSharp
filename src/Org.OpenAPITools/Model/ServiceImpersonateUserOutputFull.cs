/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceImpersonateUserOutputFull
    /// </summary>
    [DataContract(Name = "service.ImpersonateUserOutputFull")]
    public partial class ServiceImpersonateUserOutputFull : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceImpersonateUserOutputFull" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="authToken">authToken.</param>
        /// <param name="clusterId">clusterId.</param>
        /// <param name="isMasterAccount">isMasterAccount.</param>
        /// <param name="isReseller">isReseller.</param>
        /// <param name="ownerId">ownerId.</param>
        /// <param name="resellerId">resellerId.</param>
        /// <param name="userInfo">userInfo.</param>
        public ServiceImpersonateUserOutputFull(string accountId = default, string accountName = default, string authToken = default, string clusterId = default, bool isMasterAccount = default, bool isReseller = default, string ownerId = default, string resellerId = default, ServiceImpersonatedUserInfo userInfo = default)
        {
            this.AccountId = accountId;
            this.AccountName = accountName;
            this.AuthToken = authToken;
            this.ClusterId = clusterId;
            this.IsMasterAccount = isMasterAccount;
            this.IsReseller = isReseller;
            this.OwnerId = ownerId;
            this.ResellerId = resellerId;
            this.UserInfo = userInfo;
        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name = "account_name", EmitDefaultValue = false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets AuthToken
        /// </summary>
        [DataMember(Name = "auth_token", EmitDefaultValue = false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name = "cluster_id", EmitDefaultValue = false)]
        public string ClusterId { get; set; }

        /// <summary>
        /// Gets or Sets IsMasterAccount
        /// </summary>
        [DataMember(Name = "is_master_account", EmitDefaultValue = true)]
        public bool IsMasterAccount { get; set; }

        /// <summary>
        /// Gets or Sets IsReseller
        /// </summary>
        [DataMember(Name = "is_reseller", EmitDefaultValue = true)]
        public bool IsReseller { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name = "owner_id", EmitDefaultValue = false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets ResellerId
        /// </summary>
        [DataMember(Name = "reseller_id", EmitDefaultValue = false)]
        public string ResellerId { get; set; }

        /// <summary>
        /// Gets or Sets UserInfo
        /// </summary>
        [DataMember(Name = "user_info", EmitDefaultValue = false)]
        public ServiceImpersonatedUserInfo UserInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceImpersonateUserOutputFull {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  IsMasterAccount: ").Append(IsMasterAccount).Append("\n");
            sb.Append("  IsReseller: ").Append(IsReseller).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  ResellerId: ").Append(ResellerId).Append("\n");
            sb.Append("  UserInfo: ").Append(UserInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
