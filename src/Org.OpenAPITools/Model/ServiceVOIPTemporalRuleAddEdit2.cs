/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceVOIPTemporalRuleAddEdit2
    /// </summary>
    [DataContract(Name = "service.VOIPTemporalRuleAddEdit2")]
    public partial class ServiceVOIPTemporalRuleAddEdit2 : IValidatableObject
    {
        /// <summary>
        /// Defines Cycle
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CycleEnum
        {
            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 1,

            /// <summary>
            /// Enum Daily for value: daily
            /// </summary>
            [EnumMember(Value = "daily")]
            Daily = 2,

            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            [EnumMember(Value = "weekly")]
            Weekly = 3,

            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            [EnumMember(Value = "monthly")]
            Monthly = 4,

            /// <summary>
            /// Enum Yearly for value: yearly
            /// </summary>
            [EnumMember(Value = "yearly")]
            Yearly = 5
        }


        /// <summary>
        /// Gets or Sets Cycle
        /// </summary>
        [DataMember(Name = "cycle", IsRequired = true, EmitDefaultValue = true)]
        public CycleEnum Cycle { get; set; }
        /// <summary>
        /// Defines Ordinal
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrdinalEnum
        {
            /// <summary>
            /// Enum Every for value: every
            /// </summary>
            [EnumMember(Value = "every")]
            Every = 1,

            /// <summary>
            /// Enum First for value: first
            /// </summary>
            [EnumMember(Value = "first")]
            First = 2,

            /// <summary>
            /// Enum Second for value: second
            /// </summary>
            [EnumMember(Value = "second")]
            Second = 3,

            /// <summary>
            /// Enum Third for value: third
            /// </summary>
            [EnumMember(Value = "third")]
            Third = 4,

            /// <summary>
            /// Enum Fourth for value: fourth
            /// </summary>
            [EnumMember(Value = "fourth")]
            Fourth = 5,

            /// <summary>
            /// Enum Fifth for value: fifth
            /// </summary>
            [EnumMember(Value = "fifth")]
            Fifth = 6,

            /// <summary>
            /// Enum Last for value: last
            /// </summary>
            [EnumMember(Value = "last")]
            Last = 7
        }


        /// <summary>
        /// Gets or Sets Ordinal
        /// </summary>
        [DataMember(Name = "ordinal", EmitDefaultValue = false)]
        public OrdinalEnum? Ordinal { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceVOIPTemporalRuleAddEdit2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceVOIPTemporalRuleAddEdit2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceVOIPTemporalRuleAddEdit2" /> class.
        /// </summary>
        /// <param name="cycle">cycle (required).</param>
        /// <param name="days">days.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="interval">interval.</param>
        /// <param name="month">month.</param>
        /// <param name="name">name (required).</param>
        /// <param name="ordinal">ordinal.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="startDateReq">startDateReq.</param>
        /// <param name="timeWindowStart">timeWindowStart.</param>
        /// <param name="timeWindowStartReq">timeWindowStartReq.</param>
        /// <param name="timeWindowStop">timeWindowStop.</param>
        /// <param name="timeWindowStopReq">timeWindowStopReq.</param>
        /// <param name="wdays">wdays.</param>
        public ServiceVOIPTemporalRuleAddEdit2(CycleEnum cycle = default, List<int> days = default, bool enabled = default, int interval = default, int month = default, string name = default, OrdinalEnum? ordinal = default, int startDate = default, string startDateReq = default, int timeWindowStart = default, string timeWindowStartReq = default, int timeWindowStop = default, string timeWindowStopReq = default, List<string> wdays = default)
        {
            this.Cycle = cycle;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ServiceVOIPTemporalRuleAddEdit2 and cannot be null");
            }
            this.Name = name;
            this.Days = days;
            this.Enabled = enabled;
            this.Interval = interval;
            this.Month = month;
            this.Ordinal = ordinal;
            this.StartDate = startDate;
            this.StartDateReq = startDateReq;
            this.TimeWindowStart = timeWindowStart;
            this.TimeWindowStartReq = timeWindowStartReq;
            this.TimeWindowStop = timeWindowStop;
            this.TimeWindowStopReq = timeWindowStopReq;
            this.Wdays = wdays;
        }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name = "days", EmitDefaultValue = false)]
        public List<int> Days { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public int Interval { get; set; }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name = "month", EmitDefaultValue = false)]
        public int Month { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "start_date", EmitDefaultValue = false)]
        public int StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartDateReq
        /// </summary>
        [DataMember(Name = "start_date_req", EmitDefaultValue = false)]
        public string StartDateReq { get; set; }

        /// <summary>
        /// Gets or Sets TimeWindowStart
        /// </summary>
        [DataMember(Name = "time_window_start", EmitDefaultValue = false)]
        public int TimeWindowStart { get; set; }

        /// <summary>
        /// Gets or Sets TimeWindowStartReq
        /// </summary>
        [DataMember(Name = "time_window_start_req", EmitDefaultValue = false)]
        public string TimeWindowStartReq { get; set; }

        /// <summary>
        /// Gets or Sets TimeWindowStop
        /// </summary>
        [DataMember(Name = "time_window_stop", EmitDefaultValue = false)]
        public int TimeWindowStop { get; set; }

        /// <summary>
        /// Gets or Sets TimeWindowStopReq
        /// </summary>
        [DataMember(Name = "time_window_stop_req", EmitDefaultValue = false)]
        public string TimeWindowStopReq { get; set; }

        /// <summary>
        /// Gets or Sets Wdays
        /// </summary>
        [DataMember(Name = "wdays", EmitDefaultValue = false)]
        public List<string> Wdays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceVOIPTemporalRuleAddEdit2 {\n");
            sb.Append("  Cycle: ").Append(Cycle).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ordinal: ").Append(Ordinal).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartDateReq: ").Append(StartDateReq).Append("\n");
            sb.Append("  TimeWindowStart: ").Append(TimeWindowStart).Append("\n");
            sb.Append("  TimeWindowStartReq: ").Append(TimeWindowStartReq).Append("\n");
            sb.Append("  TimeWindowStop: ").Append(TimeWindowStop).Append("\n");
            sb.Append("  TimeWindowStopReq: ").Append(TimeWindowStopReq).Append("\n");
            sb.Append("  Wdays: ").Append(Wdays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Interval (int) minimum
            if (this.Interval < (int)1)
            {
                yield return new ValidationResult("Invalid value for Interval, must be a value greater than or equal to 1.", new [] { "Interval" });
            }

            // Month (int) maximum
            if (this.Month > (int)12)
            {
                yield return new ValidationResult("Invalid value for Month, must be a value less than or equal to 12.", new [] { "Month" });
            }

            // Month (int) minimum
            if (this.Month < (int)1)
            {
                yield return new ValidationResult("Invalid value for Month, must be a value greater than or equal to 1.", new [] { "Month" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // TimeWindowStart (int) maximum
            if (this.TimeWindowStart > (int)86400)
            {
                yield return new ValidationResult("Invalid value for TimeWindowStart, must be a value less than or equal to 86400.", new [] { "TimeWindowStart" });
            }

            // TimeWindowStart (int) minimum
            if (this.TimeWindowStart < (int)0)
            {
                yield return new ValidationResult("Invalid value for TimeWindowStart, must be a value greater than or equal to 0.", new [] { "TimeWindowStart" });
            }

            // TimeWindowStop (int) maximum
            if (this.TimeWindowStop > (int)86400)
            {
                yield return new ValidationResult("Invalid value for TimeWindowStop, must be a value less than or equal to 86400.", new [] { "TimeWindowStop" });
            }

            // TimeWindowStop (int) minimum
            if (this.TimeWindowStop < (int)0)
            {
                yield return new ValidationResult("Invalid value for TimeWindowStop, must be a value greater than or equal to 0.", new [] { "TimeWindowStop" });
            }

            yield break;
        }
    }

}
