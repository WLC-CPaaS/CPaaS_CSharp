/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceWebhookAdd
    /// </summary>
    [DataContract(Name = "service.WebhookAdd")]
    public partial class ServiceWebhookAdd : IValidatableObject
    {
        /// <summary>
        /// Defines CallbackMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CallbackMethodEnum
        {
            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POST = 1,

            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            [EnumMember(Value = "PUT")]
            PUT = 2
        }


        /// <summary>
        /// Gets or Sets CallbackMethod
        /// </summary>
        [DataMember(Name = "callback_method", IsRequired = true, EmitDefaultValue = true)]
        public CallbackMethodEnum CallbackMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceWebhookAdd" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceWebhookAdd() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceWebhookAdd" /> class.
        /// </summary>
        /// <param name="callbackMethod">callbackMethod (required).</param>
        /// <param name="callbackUrl">callbackUrl (required).</param>
        /// <param name="data">data.</param>
        /// <param name="title">title (required).</param>
        /// <param name="webhookType">webhookType (required).</param>
        public ServiceWebhookAdd(CallbackMethodEnum callbackMethod = default, string callbackUrl = default, Dictionary<string, Object> data = default, string title = default, string webhookType = default)
        {
            this.CallbackMethod = callbackMethod;
            // to ensure "callbackUrl" is required (not null)
            if (callbackUrl == null)
            {
                throw new ArgumentNullException("callbackUrl is a required property for ServiceWebhookAdd and cannot be null");
            }
            this.CallbackUrl = callbackUrl;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for ServiceWebhookAdd and cannot be null");
            }
            this.Title = title;
            // to ensure "webhookType" is required (not null)
            if (webhookType == null)
            {
                throw new ArgumentNullException("webhookType is a required property for ServiceWebhookAdd and cannot be null");
            }
            this.WebhookType = webhookType;
            this.Data = data;
        }

        /// <summary>
        /// Gets or Sets CallbackUrl
        /// </summary>
        [DataMember(Name = "callback_url", IsRequired = true, EmitDefaultValue = true)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets WebhookType
        /// </summary>
        [DataMember(Name = "webhook_type", IsRequired = true, EmitDefaultValue = true)]
        public string WebhookType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceWebhookAdd {\n");
            sb.Append("  CallbackMethod: ").Append(CallbackMethod).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  WebhookType: ").Append(WebhookType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 3)
            {
                yield return new ValidationResult("Invalid value for Title, length must be greater than 3.", new [] { "Title" });
            }

            yield break;
        }
    }

}
