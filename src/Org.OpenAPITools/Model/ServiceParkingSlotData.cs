/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceParkingSlotData
    /// </summary>
    [DataContract(Name = "service.ParkingSlotData")]
    public partial class ServiceParkingSlotData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceParkingSlotData" /> class.
        /// </summary>
        /// <param name="attended">attended.</param>
        /// <param name="callId">callId.</param>
        /// <param name="cidName">cidName.</param>
        /// <param name="cidNumber">cidNumber.</param>
        /// <param name="cidUri">cidUri.</param>
        /// <param name="fromTag">fromTag.</param>
        /// <param name="node">node.</param>
        /// <param name="presenceId">presenceId.</param>
        /// <param name="presenceRealm">presenceRealm.</param>
        /// <param name="presenceType">presenceType.</param>
        /// <param name="presenceUser">presenceUser.</param>
        /// <param name="ringbackId">ringbackId.</param>
        /// <param name="slotCallId">slotCallId.</param>
        /// <param name="switchUri">switchUri.</param>
        /// <param name="toTag">toTag.</param>
        public ServiceParkingSlotData(bool attended = default, string callId = default, string cidName = default, string cidNumber = default, string cidUri = default, string fromTag = default, string node = default, string presenceId = default, string presenceRealm = default, string presenceType = default, string presenceUser = default, string ringbackId = default, string slotCallId = default, string switchUri = default, string toTag = default)
        {
            this.Attended = attended;
            this.CallId = callId;
            this.CidName = cidName;
            this.CidNumber = cidNumber;
            this.CidUri = cidUri;
            this.FromTag = fromTag;
            this.Node = node;
            this.PresenceId = presenceId;
            this.PresenceRealm = presenceRealm;
            this.PresenceType = presenceType;
            this.PresenceUser = presenceUser;
            this.RingbackId = ringbackId;
            this.SlotCallId = slotCallId;
            this.SwitchUri = switchUri;
            this.ToTag = toTag;
        }

        /// <summary>
        /// Gets or Sets Attended
        /// </summary>
        [DataMember(Name = "attended", EmitDefaultValue = true)]
        public bool Attended { get; set; }

        /// <summary>
        /// Gets or Sets CallId
        /// </summary>
        [DataMember(Name = "call_id", EmitDefaultValue = false)]
        public string CallId { get; set; }

        /// <summary>
        /// Gets or Sets CidName
        /// </summary>
        [DataMember(Name = "cid_name", EmitDefaultValue = false)]
        public string CidName { get; set; }

        /// <summary>
        /// Gets or Sets CidNumber
        /// </summary>
        [DataMember(Name = "cid_number", EmitDefaultValue = false)]
        public string CidNumber { get; set; }

        /// <summary>
        /// Gets or Sets CidUri
        /// </summary>
        [DataMember(Name = "cid_uri", EmitDefaultValue = false)]
        public string CidUri { get; set; }

        /// <summary>
        /// Gets or Sets FromTag
        /// </summary>
        [DataMember(Name = "from_tag", EmitDefaultValue = false)]
        public string FromTag { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name = "node", EmitDefaultValue = false)]
        public string Node { get; set; }

        /// <summary>
        /// Gets or Sets PresenceId
        /// </summary>
        [DataMember(Name = "presence_id", EmitDefaultValue = false)]
        public string PresenceId { get; set; }

        /// <summary>
        /// Gets or Sets PresenceRealm
        /// </summary>
        [DataMember(Name = "presence_realm", EmitDefaultValue = false)]
        public string PresenceRealm { get; set; }

        /// <summary>
        /// Gets or Sets PresenceType
        /// </summary>
        [DataMember(Name = "presence_type", EmitDefaultValue = false)]
        public string PresenceType { get; set; }

        /// <summary>
        /// Gets or Sets PresenceUser
        /// </summary>
        [DataMember(Name = "presence_user", EmitDefaultValue = false)]
        public string PresenceUser { get; set; }

        /// <summary>
        /// Gets or Sets RingbackId
        /// </summary>
        [DataMember(Name = "ringback_id", EmitDefaultValue = false)]
        public string RingbackId { get; set; }

        /// <summary>
        /// Gets or Sets SlotCallId
        /// </summary>
        [DataMember(Name = "slot_call_id", EmitDefaultValue = false)]
        public string SlotCallId { get; set; }

        /// <summary>
        /// Gets or Sets SwitchUri
        /// </summary>
        [DataMember(Name = "switch_uri", EmitDefaultValue = false)]
        public string SwitchUri { get; set; }

        /// <summary>
        /// Gets or Sets ToTag
        /// </summary>
        [DataMember(Name = "to_tag", EmitDefaultValue = false)]
        public string ToTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceParkingSlotData {\n");
            sb.Append("  Attended: ").Append(Attended).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  CidName: ").Append(CidName).Append("\n");
            sb.Append("  CidNumber: ").Append(CidNumber).Append("\n");
            sb.Append("  CidUri: ").Append(CidUri).Append("\n");
            sb.Append("  FromTag: ").Append(FromTag).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  PresenceId: ").Append(PresenceId).Append("\n");
            sb.Append("  PresenceRealm: ").Append(PresenceRealm).Append("\n");
            sb.Append("  PresenceType: ").Append(PresenceType).Append("\n");
            sb.Append("  PresenceUser: ").Append(PresenceUser).Append("\n");
            sb.Append("  RingbackId: ").Append(RingbackId).Append("\n");
            sb.Append("  SlotCallId: ").Append(SlotCallId).Append("\n");
            sb.Append("  SwitchUri: ").Append(SwitchUri).Append("\n");
            sb.Append("  ToTag: ").Append(ToTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
