/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing CallflowApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CallflowApiTests : IDisposable
    {
        private CallflowApi instance;

        public CallflowApiTests()
        {
            instance = new CallflowApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CallflowApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CallflowApi
            //Assert.IsType<CallflowApi>(instance);
        }

        /// <summary>
        /// Test V1AccountAccountIDCallflowCallflowIDDelete
        /// </summary>
        [Fact]
        public void V1AccountAccountIDCallflowCallflowIDDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string callflowID = null;
            //var response = instance.V1AccountAccountIDCallflowCallflowIDDelete(accountID, callflowID);
            //Assert.IsType<ServiceDocsCallflowGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDCallflowCallflowIDGet
        /// </summary>
        [Fact]
        public void V1AccountAccountIDCallflowCallflowIDGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string callflowID = null;
            //var response = instance.V1AccountAccountIDCallflowCallflowIDGet(accountID, callflowID);
            //Assert.IsType<ServiceDocsCallflowGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDCallflowCallflowIDPut
        /// </summary>
        [Fact]
        public void V1AccountAccountIDCallflowCallflowIDPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string callflowID = null;
            //ServiceCallflowAddEditData reqBody = null;
            //var response = instance.V1AccountAccountIDCallflowCallflowIDPut(accountID, callflowID, reqBody);
            //Assert.IsType<ServiceDocsCallflowGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDCallflowGet
        /// </summary>
        [Fact]
        public void V1AccountAccountIDCallflowGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string? startKey = null;
            //int? pageSize = null;
            //var response = instance.V1AccountAccountIDCallflowGet(accountID, startKey, pageSize);
            //Assert.IsType<ServiceDocsCallflowGetAll>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDCallflowPost
        /// </summary>
        [Fact]
        public void V1AccountAccountIDCallflowPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //ServiceCallflowAddEditData request = null;
            //var response = instance.V1AccountAccountIDCallflowPost(accountID, request);
            //Assert.IsType<ServiceDocsCallflowGetSingle>(response);
        }
    }
}
