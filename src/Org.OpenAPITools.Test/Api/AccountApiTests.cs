/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountApiTests : IDisposable
    {
        private AccountApi instance;

        public AccountApiTests()
        {
            instance = new AccountApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccountApi
            //Assert.IsType<AccountApi>(instance);
        }

        /// <summary>
        /// Test V1AccountAccountidChildrenGet
        /// </summary>
        [Fact]
        public void V1AccountAccountidChildrenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //string? startKey = null;
            //int? pageSize = null;
            //var response = instance.V1AccountAccountidChildrenGet(accountid, startKey, pageSize);
            //Assert.IsType<ServiceDocsAccountGetAll>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidDelete
        /// </summary>
        [Fact]
        public void V1AccountAccountidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.V1AccountAccountidDelete(accountid);
            //Assert.IsType<ServiceDocsAccountGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidDnsrecordGet
        /// </summary>
        [Fact]
        public void V1AccountAccountidDnsrecordGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.V1AccountAccountidDnsrecordGet(accountid);
            //Assert.IsType<ServiceDocsAccountGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidDnsrecordPost
        /// </summary>
        [Fact]
        public void V1AccountAccountidDnsrecordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.V1AccountAccountidDnsrecordPost(accountid);
            //Assert.IsType<ServiceDocsAccountGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidDnsrecordPut
        /// </summary>
        [Fact]
        public void V1AccountAccountidDnsrecordPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //ServiceUpdateRecordTypeForAccount dnsrecord = null;
            //var response = instance.V1AccountAccountidDnsrecordPut(accountid, dnsrecord);
            //Assert.IsType<ServiceDocsAccountGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidGet
        /// </summary>
        [Fact]
        public void V1AccountAccountidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.V1AccountAccountidGet(accountid);
            //Assert.IsType<ServiceDocsAccountGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidLimitGet
        /// </summary>
        [Fact]
        public void V1AccountAccountidLimitGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.V1AccountAccountidLimitGet(accountid);
            //Assert.IsType<ServiceDocsAccountLimit>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidLimitPut
        /// </summary>
        [Fact]
        public void V1AccountAccountidLimitPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //ServiceVOIPAccountLimit2 limit = null;
            //var response = instance.V1AccountAccountidLimitPut(accountid, limit);
            //Assert.IsType<ServiceDocsAccountLimit>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidPost
        /// </summary>
        [Fact]
        public void V1AccountAccountidPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //ServiceVOIPAccountAddData account = null;
            //var response = instance.V1AccountAccountidPost(accountid, account);
            //Assert.IsType<ServiceDocsAccountGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidProvisioningdetailsGet
        /// </summary>
        [Fact]
        public void V1AccountAccountidProvisioningdetailsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.V1AccountAccountidProvisioningdetailsGet(accountid);
            //Assert.IsType<ServiceDocsAccountProvisioning>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidProvisioningdetailsResetpwPut
        /// </summary>
        [Fact]
        public void V1AccountAccountidProvisioningdetailsResetpwPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.V1AccountAccountidProvisioningdetailsResetpwPut(accountid);
            //Assert.IsType<ServiceDocsAccountProvisioning>(response);
        }

        /// <summary>
        /// Test V1AccountAccountidPut
        /// </summary>
        [Fact]
        public void V1AccountAccountidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //ServiceVOIPAccountEditData account = null;
            //var response = instance.V1AccountAccountidPut(accountid, account);
            //Assert.IsType<ServiceDocsAccountGetSingle>(response);
        }

        /// <summary>
        /// Test V1AccountApikeyGet
        /// </summary>
        [Fact]
        public void V1AccountApikeyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.V1AccountApikeyGet();
            //Assert.IsType<ServiceDocsAccountAPIKey>(response);
        }

        /// <summary>
        /// Test V1AccountGet
        /// </summary>
        [Fact]
        public void V1AccountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? startKey = null;
            //int? pageSize = null;
            //var response = instance.V1AccountGet(startKey, pageSize);
            //Assert.IsType<ServiceDocsAccountGetAll>(response);
        }

        /// <summary>
        /// Test V1AccountPost
        /// </summary>
        [Fact]
        public void V1AccountPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ServiceVOIPAccountAddData account = null;
            //var response = instance.V1AccountPost(account);
            //Assert.IsType<ServiceDocsAccountGetSingle>(response);
        }
    }
}
