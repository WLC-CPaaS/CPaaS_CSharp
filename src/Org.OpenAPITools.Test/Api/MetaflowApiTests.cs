/*
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing MetaflowApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MetaflowApiTests : IDisposable
    {
        private MetaflowApi instance;

        public MetaflowApiTests()
        {
            instance = new MetaflowApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MetaflowApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MetaflowApi
            //Assert.IsType<MetaflowApi>(instance);
        }

        /// <summary>
        /// Test V1AccountAccountIDDeviceDeviceIDMetaflowDelete
        /// </summary>
        [Fact]
        public void V1AccountAccountIDDeviceDeviceIDMetaflowDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string deviceID = null;
            //var response = instance.V1AccountAccountIDDeviceDeviceIDMetaflowDelete(accountID, deviceID);
            //Assert.IsType<ServiceDocsMetaflowGet>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDDeviceDeviceIDMetaflowGet
        /// </summary>
        [Fact]
        public void V1AccountAccountIDDeviceDeviceIDMetaflowGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string deviceID = null;
            //var response = instance.V1AccountAccountIDDeviceDeviceIDMetaflowGet(accountID, deviceID);
            //Assert.IsType<ServiceDocsMetaflowGet>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDDeviceDeviceIDMetaflowPost
        /// </summary>
        [Fact]
        public void V1AccountAccountIDDeviceDeviceIDMetaflowPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string deviceID = null;
            //ServiceVOIPMetaflowAddData reqBody = null;
            //var response = instance.V1AccountAccountIDDeviceDeviceIDMetaflowPost(accountID, deviceID, reqBody);
            //Assert.IsType<ServiceDocsMetaflowGet>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDMetaflowDelete
        /// </summary>
        [Fact]
        public void V1AccountAccountIDMetaflowDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //var response = instance.V1AccountAccountIDMetaflowDelete(accountID);
            //Assert.IsType<ServiceDocsMetaflowGet>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDMetaflowGet
        /// </summary>
        [Fact]
        public void V1AccountAccountIDMetaflowGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //var response = instance.V1AccountAccountIDMetaflowGet(accountID);
            //Assert.IsType<ServiceDocsMetaflowGet>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDMetaflowPost
        /// </summary>
        [Fact]
        public void V1AccountAccountIDMetaflowPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //ServiceVOIPMetaflowAddData metaflow = null;
            //var response = instance.V1AccountAccountIDMetaflowPost(accountID, metaflow);
            //Assert.IsType<ServiceDocsMetaflowGet>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDUserUserIDMetaflowDelete
        /// </summary>
        [Fact]
        public void V1AccountAccountIDUserUserIDMetaflowDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string userID = null;
            //var response = instance.V1AccountAccountIDUserUserIDMetaflowDelete(accountID, userID);
            //Assert.IsType<ServiceDocsMetaflowGet>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDUserUserIDMetaflowGet
        /// </summary>
        [Fact]
        public void V1AccountAccountIDUserUserIDMetaflowGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string userID = null;
            //var response = instance.V1AccountAccountIDUserUserIDMetaflowGet(accountID, userID);
            //Assert.IsType<ServiceDocsMetaflowGet>(response);
        }

        /// <summary>
        /// Test V1AccountAccountIDUserUserIDMetaflowPost
        /// </summary>
        [Fact]
        public void V1AccountAccountIDUserUserIDMetaflowPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string userID = null;
            //ServiceVOIPMetaflowAddData reqBody = null;
            //var response = instance.V1AccountAccountIDUserUserIDMetaflowPost(accountID, userID, reqBody);
            //Assert.IsType<ServiceDocsMetaflowGet>(response);
        }
    }
}
